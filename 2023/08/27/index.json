[
  {
    "Title": "Readonly Modifier in C# - Code Maze",
    "Url": "https://code-maze.com/csharp-readonly-modifier/",
    "Timestamp": "2023-08-27T09:02:39",
    "Domain": "code-maze.com",
    "Description": "In this article, we are going to learn about readonly modifier in C#. Let's understand what is mutable and immutable."
  },
  {
    "Title": "Why I Won't Run Another Business",
    "Url": "https://youtube.com/watch?v=EqB9vLXBLIo",
    "Timestamp": "2023-08-27T09:02:37",
    "Domain": "youtube.com",
    "Description": "I talk about my experiences at Troika Games and why I won't run another company."
  },
  {
    "Title": "Block YouTube Ads on AppleTV by Decrypting and Stripping Ads from Profobuf",
    "Url": "https://ericdraken.com/pfsense-decrypt-ad-traffic/",
    "Timestamp": "2023-08-27T07:03:54",
    "Domain": "ericdraken.com",
    "Description": "Apple TV and iOS YouTube ads are not blocked by Pi-hole, so I researched this and discovered a flaw in Protobuf that allows me to restrict YouTube ads."
  },
  {
    "Title": "The \"Weak Event\" Pattern in C#",
    "Url": "https://steven-giesel.com/blogPost/675b75fc-2c1b-43da-9ff8-42962ca8159b",
    "Timestamp": "2023-08-27T06:02:31",
    "Domain": "steven-giesel.com",
    "Description": "Events in C# are a powerful mechanism for decoupling components and enabling a publisher/subscriber model. However, they have a significant drawback: the publisher holds a strong reference to the subscriber, and this can cause memory leaks. This article describes a pattern for implementing weak events in C#.\n"
  },
  {
    "Title": "</> htmx ~ Why htmx Does Not Have a Build Step",
    "Url": "https://htmx.org/essays/no-build-step/",
    "Timestamp": "2023-08-27T06:02:30",
    "Domain": "htmx.org",
    "Description": "August 19, 2023"
  },
  {
    "Title": "Slack's Migration to a Cellular Architecture - Slack Engineering",
    "Url": "https://slack.engineering/slacks-migration-to-a-cellular-architecture/",
    "Timestamp": "2023-08-27T03:02:25",
    "Domain": "slack.engineering",
    "Description": "Summary In recent years, cellular architectures have become increasingly popular for large online services as a way to increase redundancy and limit the blast radius of site failures. In pursuit of these goals, we have migrated the most critical user-facing services at Slack from a monolithic to a cell-based architecture over the last 1.5 years. …"
  },
  {
    "Title": "Microsoft.Fast.Components.FluentUI 2.4.3",
    "Url": "https://www.nuget.org/packages/Microsoft.Fast.Components.FluentUI/2.4.3",
    "Timestamp": "2023-08-27T01:02:29",
    "Domain": "www.nuget.org",
    "Description": "A set of Blazor components wrapping Microsoft’s official Fluent UI Web Components. They implement the latest state of the Fluent design language, are built on FAST and work in every major browser."
  },
  {
    "Title": "Visual Studio 2022: C# Global Namespace ",
    "Url": "https://www.msdevbuild.com/2023/08/visual-studio-2022-c-global-namespace.html",
    "Timestamp": "2023-08-27T00:02:34",
    "Domain": "www.msdevbuild.com",
    "Description": "Global usings were introduced in C# 10 and .NET Core 6.0 and later versions. This feature proves to be highly beneficial as it allows you to incorpora"
  }
]