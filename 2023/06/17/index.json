[
  {
    "Title": "ASP.NET Community Standup | Create a Microsoft Power App for your ASP.NET Core Web API",
    "Url": "https://youtube.com/watch?v=saVqRI7QjoY",
    "Timestamp": "2023-06-17T02:05:30",
    "Domain": "youtube.com",
    "Description": "Learn how to quickly build a front-end for your .net web APIs (using Power Platform) with Julia Kasper and Marcel Ferreira.Featuring: Julia Kasper, Marcel Fe..."
  },
  {
    "Title": "Refactoring From an Anemic Domain Model To a Rich Domain Model",
    "Url": "https://www.milanjovanovic.tech/blog/refactoring-from-an-anemic-domain-model-to-a-rich-domain-model",
    "Timestamp": "2023-06-17T01:05:54",
    "Domain": "www.milanjovanovic.tech",
    "Description": " Is the Anemic domain model an antipattern? It's a domain model without any behavior and only data properties.\nAnemic domain models work great in simple applications, but they are difficult to maintain and evolve if you have rich business logic.\nThe important parts of your business logic and rules end up being scattered all over the application. It reduces cohesiveness and reusability, and makes adding new features more difficult.\nRich domain model attempts to solve this by encapsulating as much of the business logic as possible.\nBut how can you design a Rich domain model?\nThis is a never-ending process of moving business logic into the domain and refining your domain model.\nLet's see how to refactor from an Anemic domain model to a Rich domain model."
  }
]