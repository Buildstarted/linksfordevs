[
  {
    "Title": "A History of JavaScript Modules and Bundling, For the Post-ES6 Developer | 8th Light",
    "Url": "https://8thlight.com/insights/a-history-of-javascript-modules-and-bundling-for-the-post-es6-developer",
    "Timestamp": "2023-06-20T06:06:24",
    "Domain": "8thlight.com",
    "Description": ""
  },
  {
    "Title": "C# Source Code Generators - Bruno Sonnino",
    "Url": "https://blog.revolution.com.br/2023/06/11/c-source-code-generators/",
    "Timestamp": "2023-06-20T06:06:21",
    "Domain": "blog.revolution.com.br",
    "Description": "C# 9 introduced a new feature that allows you to inspect user code as it is being compiled and generate new C# source files that are added to the compilation. This enables you to write code that runs during compilation and produces additional source code based on the analysis of your program. In this blog"
  },
  {
    "Title": "GraphQL Code Generator‚ÄìAvoid generating types that are not needed",
    "Url": "https://bartwullems.blogspot.com/2023/06/graphql-code-generatoravoid-generating.html",
    "Timestamp": "2023-06-20T06:06:20",
    "Domain": "bartwullems.blogspot.com",
    "Description": "If you are using GraphQL in your frontend(or even backend) applications I hope you are not creating all the types yourself. Thanks to the bu..."
  },
  {
    "Title": "When is an implementation detail an implementation detail?",
    "Url": "https://blog.ploeh.dk/2023/06/19/when-is-an-implementation-detail-an-implementation-detail/",
    "Timestamp": "2023-06-20T06:06:20",
    "Domain": "blog.ploeh.dk",
    "Description": "On the tension between encapsulation and testability."
  },
  {
    "Title": "ASP.NET Community Standup - Create a Microsoft Power App for your ASP.NET Core Web API",
    "Url": "https://youtu.be/saVqRI7QjoY",
    "Timestamp": "2023-06-20T02:03:40",
    "Domain": "youtu.be",
    "Description": "Learn how to quickly build a front-end for your .net web APIs (using Power Platform) with Julia Kasper and Marcel Ferreira.Featuring: Julia Kasper, Marcel Fe..."
  },
  {
    "Title": "Saving Files with .NET MAUI Community Toolkit",
    "Url": "https://askxammy.com/saving-files-with-net-maui-community-toolkit/",
    "Timestamp": "2023-06-20T01:03:45",
    "Domain": "askxammy.com",
    "Description": "Knowing how to save files in our applications is very important, however, the perception has been that implementation can be tedious. Thanks to the .NET MAUI Community Toolkit using FileSaver, you can now save files much faster. In this article I will show you all the necessary elements to achieve it.\n\nüîß¬†First of all... What do I need to know?\nWhat is .NET MAUI Community Toolkit??\n\nIt‚Äôs a collection of reusable elements such as animations, behaviors ¬†converters, among others, for developing applications for iOS, Android, macOS and WinUI using MAUI.\n\n‚úçÔ∏è Important!¬†Adding this configuration to your project just once is enough to fully benefit from the Community Toolkit. If you've already implemented it using another NuGet feature, feel free to skip this step.\n\n¬†\n\n[expand title=üîß Still haven't implemented it? Check it here!\n]\n\nAdd from NuGet Package: Community.Toolkit.Maui\n\n\n\nNow let‚Äôs initialize:¬†Go to your MauiProgram.cs file\n\nIn the CreateMauiApp method, place in the .UseMauiApp<App>()¬†line and just below it add the following line of code:\n\n‚ö† Don‚Äôt forget to add the using CommunityToolkit.Maui;at the top of the class.\n[/expand]\n\nPlatform Settings\nOnce you have the MAUI Community Toolkit installation ready. Let‚Äôs continue by adding some platform settings. To implement them, follow the instructions added below:\n\nOn Android: Go to ¬†Platform ‚ûñ Android¬†‚ûñ¬†AndroidManifes.cs and add the following code:\n\n\n\n¬† ¬† ¬† On Tizen: Go to ¬†Platform ‚ûñ Tizen ‚ûñ tizen-manifest.xml and add the following code:\n\n\n ¬†For iOS/MacCatalyst¬†and¬†Windows¬†you don‚Äôt need an additional configuration.\n\nLet‚Äôs start!¬†\nWhat is a FileSaver?\nThis is an API that is part of the MAUI Community Toolkit, which allows you to select a file and save it to a destination folder on your device's file system\nHow to implement it?¬†\n\nStep 1‚É£¬†: Let's use Dependency Injection\nFor this example, we will use Dependency Injection. If you want to know more about this topic you can enter to the article .NET Dependency Injection.\n‚ûñ Registering the FileSaver: For the first step, we need to use the FileSaver, which is responsible for saving the desired file on the system. Since we'll be using Dependency Injection, we need to register it.\nTo do this, go to MauiProgram.cs, navigate to the CreateMauiApp method, and add the following code after the builder.\n\n‚ûñInjecting the service: Now go to your MainPage.xaml.cs, and let's inject the File Saver as I show you below:\n\nStep 2‚É£: Saving the file\nWe will use the SaveAsync() method, which displays a dialog on the screen to allow us to select a file and save it to a destination folder on the file system. This method contains the following set of properties:\n‚ûñ Initial path: This is the initial path (suggested) that appears by default in the dialog box when the user goes to save their file. - It‚Äôs of string type.\n‚ûñ File name: Upon saving a file, the user is presented with a suggested name, which can be edited or kept as is. It is essential to include the file extension in the suggested name. - It‚Äôs of string type. ‚Äì [Mandatory]¬†\n‚ûñ Stream: This is an abstraction of a stream of bytes. Here, you will manage all the contents of the file that you want to save. - It‚Äôs of Stream type. ‚Äì [Mandatory]¬†\n‚ûñ CancellationToken: Allows you to send a cancellation for the operation you are doing. - It‚Äôs of CancellationToken type. ‚Äì [Mandatory]¬†\nNow let's se how to do it in code\nAdd the cancellationToken: To do so, locate the comment in step 1 that says Add the CancellationToken here and add the following line of code:\n\n‚ö† If you want to cancel it, you just have to do the following:\n\nTo prepare the content of the file that we are going to save, we must first create a new method, in this example we will call it SaveFile. Inside, you will see two lines of code which I explain below:\nüîπ We create a stream that we will later pass as a parameter to the SaveAsync method. For this example, we will use text, but you can replace it with other type of content you wish to save.\nüîπ We call ¬†the SaveAsync method, we use SampleFile.txt as the suggested file name.\n\nFinally, let's see the result!\n\n\n\n\nAdditional Topics\nFileSaverResult\nThe FileSaverResult covers the result returned by the SaveAsync method. It contains a set of properties and methods that can help determine if the operation was successful or if there was an exception, among other informations as shown below:\nüîπ File Path: Is a property that refers to the location on disk where the file was saved. - It‚Äôs of string type.\nüîπ Exception: Returns the Exception in case the save operation failed.\nüîπ IsSuccessful: Indicates the success of the operation by returning a boolean value.\nüîπ EnsureSuccess: Is a method that checks if the operation was successfull.\nTo access these methods and properties, just save the result of SaveAsync using await and don't forget to make the method async.\n\n\nAnd done! üòé From now on, you know how to save files in your .NET MAUI applications! üíöüíï\n<Label Text=‚ÄùThanks for reading!¬†üëã ‚Äù />\nSpanish post:\n\nhttps://es.askxammy.com/guardando-archivos-con-net-maui-community-toolkit/\n\nReferences:\n\nGerald Versluis's Video\nhttps://learn.microsoft.com/en-us/dotnet/communitytoolkit/maui/essentials/file-saver?tabs=tizen?WT.mc_id=DT-MVP-50033\n"
  },
  {
    "Title": "On .NET Live - Improving Productivity & Reducing Support Time with Tag Helpers",
    "Url": "https://youtube.com/watch?v=kbbaiUIjBEg",
    "Timestamp": "2023-06-20T01:03:43",
    "Domain": "youtube.com",
    "Description": "Tag Helpers are one of the most useful features to save time in ASP.NET Core. In this week's episode, community MVP Mitchel Sellers shows us his open-source ..."
  },
  {
    "Title": "How to use RuntimeHelpers.IsReferenceOrContainsReferences to micro-optimize collections - G√©rald Barr√©",
    "Url": "https://www.meziantou.net/how-to-use-runtimehelpers-isreferenceorcontainsreferences-to-micro-optimize-coll.htm",
    "Timestamp": "2023-06-20T01:03:43",
    "Domain": "www.meziantou.net",
    "Description": "In this post, I describe how to use RuntimeHelpers.IsReferenceOrContainsReferences to micro-optimize collections in .NET."
  }
]