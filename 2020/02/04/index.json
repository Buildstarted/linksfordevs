[
  {
    "Title": "SpaceX asks permission to take Starship on a high-altitude test flight",
    "Url": "https://www.engadget.com/2020/02/04/spacex-fcc-starship-test-flight/",
    "Timestamp": "2020-02-04T20:48:35",
    "Domain": "www.engadget.com",
    "Description": "SpaceX's Starship could take a high-altitude test flight as soon as March."
  },
  {
    "Title": "Google's OpenSK lets you BYOSK – burn your own security key",
    "Url": "https://www.theregister.co.uk/2020/02/04/burn_your_own_security_key_google_releases_opensk/",
    "Timestamp": "2020-02-04T19:12:49",
    "Domain": "www.theregister.co.uk",
    "Description": "Now there's no excuse"
  },
  {
    "Title": "tock/tock",
    "Url": "https://github.com/tock/tock",
    "Timestamp": "2020-02-04T19:12:43",
    "Domain": "github.com",
    "Description": "A secure embedded operating system for microcontrollers - tock/tock"
  },
  {
    "Title": "EF Core Relationships in ASP .NET Core 3.1",
    "Url": "https://wakeupandcode.com/ef-core-relationships-in-asp-net-core-3-1/",
    "Timestamp": "2020-02-04T19:03:59",
    "Domain": "wakeupandcode.com",
    "Description": "This is the fifth of a new series of posts on ASP .NET Core 3.1 for 2020. In this series, we’ll cover 26 topics over a span of 26 weeks from January through June 2020, titled AS…"
  },
  {
    "Title": "CaltropUwU/BadUI",
    "Url": "https://github.com/CaltropUwU/BadUI/tree/master/physicsVolumeBall",
    "Timestamp": "2020-02-04T19:00:22",
    "Domain": "github.com",
    "Description": "Contribute to CaltropUwU/BadUI development by creating an account on GitHub."
  },
  {
    "Title": "Volume Control",
    "Url": "https://caltrop.dev/badUI/physicsVolumeBall/",
    "Timestamp": "2020-02-04T19:00:19",
    "Domain": "caltrop.dev",
    "Description": "Completely normal volume control"
  },
  {
    "Title": "SLS Core Stage in Stennis B-2 Stand to start Green Run campaign - NASASpaceFlight.com",
    "Url": "https://www.nasaspaceflight.com/2020/01/sls-core-stage-stennis-b-2-stand-green-run-campaign/",
    "Timestamp": "2020-02-04T19:00:13",
    "Domain": "www.nasaspaceflight.com",
    "Description": "The Green Run test campaign for the first NASA Space Launch System (SLS) Core Stage…"
  },
  {
    "Title": "Here's Why Your Static Website Needs HTTPS",
    "Url": "https://www.youtube.com/watch?v=_BNIkw4Ao9w",
    "Timestamp": "2020-02-04T17:44:05",
    "Domain": "www.youtube.com",
    "Description": "This is part of the blog post at https://www.troyhunt.com/heres-why-your-static-website-needs-https"
  },
  {
    "Title": "Cliff Click's answer to What interesting optimizations can a JIT do that a compiler cannot do? - Quora",
    "Url": "https://www.quora.com/What-interesting-optimizations-can-a-JIT-do-that-a-compiler-cannot-do/answer/Cliff-Click-1",
    "Timestamp": "2020-02-04T17:34:19",
    "Domain": "www.quora.com",
    "Description": "The JIT has actual profiles available, which no AOT or prior-profiling technology can do. So yes, which branches branch which way. This lets you decide to e.g. run code down the “hot path” JIT’d and on the “so cold its never taken path” in the interpreter… which means the hot path never has to merge the code-path logic in, which typically cleans out nearly all of the error check & correct logic. But also: which classes are loaded, or not, so typically hundreds of overloadable classes are discovered as overloaded exactly one way, leading to thousands of call sites being statically compiled (and possibly inlined), millions of virtual call invocations removed. Happens very often in large complex frameworks, where key classes are instantiated exactly 1 way based on the programmer picking certain key options at runtime. Also: what to inline, leading to higher resolution profiles on the first tiers of JITing, leading even more aggressively inlined & optimized code down the very specific hot code paths. Also: fields which are always zero, or never set past some point (and not declared final). Any large Java program has thousands of these. You get to treat them as final (or constants), whereas a static profiler-based optimizer cannot. Also: what escapes, and what does not — allowing escape analysis on objects which blatantly escape in a AOT compilation, but which in practice either never escape, or escape extremely rarely. On the rare escape you “inflate” the object as needed. On the non-escape path, the entire object can be “en-registered” - no allocation. There are lots more places where the dynamic profiles are fed back into the JIT, and in my opinion this area remains a fertile ground for future optimizations. Cliff"
  },
  {
    "Title": "Life of a triangle - NVIDIA's logical pipeline",
    "Url": "https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline",
    "Timestamp": "2020-02-04T17:34:12",
    "Domain": "developer.nvidia.com",
    "Description": "Since the release of the ground breaking Fermi architecture almost 5 years have gone by, it might be time to refresh the principle graphics architecture beneath it."
  },
  {
    "Title": "GPU Performance for Game Artists",
    "Url": "http://fragmentbuffer.com/gpu-performance-for-game-artists/",
    "Timestamp": "2020-02-04T17:34:10",
    "Domain": "fragmentbuffer.com",
    "Description": "Performance is everybody's responsibility, no matter what your role. For artists, a little knowledge of what goes on under the hood can make a big impact on a game's framerate. If you're an artist and want to understand how the GPU works and why things like draw calls, LODs, and mipmaps are important for performance, read on!"
  },
  {
    "Title": "Add Real-Time to a Java App with Azure SignalR Service",
    "Url": "https://anthonychu.ca/post/java-spring-boot-azure-signalr-service/",
    "Timestamp": "2020-02-04T17:33:42",
    "Domain": "anthonychu.ca",
    "Description": "Azure SignalR is a fully managed service that makes it easy to add highly-scalable real-time messaging to any application using WebSockets and other protocols. SignalR Service has integrations for ASP.NET and Azure Functions. Other backend apps can use the service&#39;s RESTful HTTP API.In this article, we&#39;ll look at the benefits of using Azure SignalR Service for real-time communication and how to integrate it with a Java Spring Boot chat application using the service&#39;s HTTP API."
  },
  {
    "Title": "Digging into the Bedrock framework, January 2020",
    "Url": "https://www.youtube.com/watch?v=eS2ozPYPKRk",
    "Timestamp": "2020-02-04T17:31:52",
    "Domain": "www.youtube.com",
    "Description": "Talk by Tim Seaward\n\nAbstract:\nAfter an abridged history of pipelines and Bedrock Framework, we will look at a basic implementation today. Then after getting our hands a little dirty looking at the internals we will discuss what the future holds for Bedrock and not only what Bedrock can do for you but what you can do for Bedrock."
  },
  {
    "Title": "Get CoreRT Hello World selfcontained binary under 1 MB by MichalStrehovsky · Pull Request #7962 · dotnet/corert",
    "Url": "https://github.com/dotnet/corert/pull/7962",
    "Timestamp": "2020-02-04T17:31:46",
    "Domain": "github.com",
    "Description": "This has actually two things. The actual fix to make self-contained CoreRT Hello World less than 1 MB, and a bunch of tools that helped me find the fix. I’ve had the tools for a while but they don’..."
  },
  {
    "Title": "Performance testing",
    "Url": "http://slides.aakinshin.net/dotnetos2019",
    "Timestamp": "2020-02-04T17:31:32",
    "Domain": "slides.aakinshin.net",
    "Description": "Prevent performance degradations"
  },
  {
    "Title": "Champaign Mathematician - with Holly Krieger — Numberphile",
    "Url": "https://www.numberphile.com/podcast/holly-krieger",
    "Timestamp": "2020-02-04T16:13:11",
    "Domain": "www.numberphile.com",
    "Description": "This is Numberphile. We mainly post videos about mathematics and just numbers in general."
  },
  {
    "Title": "Fixing Random, part 27",
    "Url": "https://ericlippert.com/2019/05/02/fixing-random-part-27/",
    "Timestamp": "2020-02-04T16:11:27",
    "Domain": "ericlippert.com",
    "Description": "Last time on FAIC we went through a loose, hand-wavy definition of what it means to have a “weighted” continuous distribution: our weights are now doubles, and given by a Probability Di…"
  },
  {
    "Title": "This is what happens when you divide by zero on a mechanical calculator",
    "Url": "https://www.youtube.com/watch?v=OFJUYFlSYsM",
    "Timestamp": "2020-02-04T16:10:13",
    "Domain": "www.youtube.com",
    "Description": "From early on in math class, you’re taught that you cannot divide a number by zero. On paper, it doesn’t work out. Do it electronically, and you’ll get an error message. http://goo.gl/K1HGYC\n\nTry do divide by zero with a mechanical calculator and, well, that’s where things get interesting.\n\nYouTuber MultiGlizda recorded the chaos that happens within a Facit ESA-01 mechanical calculator when it’s asked to divide a number by zero. With the case off, viewers are able to see the fascinating inner workings of these old machines in operation, and also demonstrate the dicey nature of the number zero and its division.\n\nYouTube channel numberphile explains that division is based on subtraction; that is, if you want to divide a number by a second number, you just subtract second number from the first number over and over again. So, 20 divided by 5 would be 20 minus 5, which equals 15, minus 5 which equals 10, minus 5 which equals 5, minus 5 which equals 0. Since it took four subtractions to get to zero, the answer is 4. \n\nIt’s a bit of a convoluted way of explaining division, but it helps us understand the video below. You see, when you divide 20 by 0, you’ll end up subtracting 0 from 20 an infinite amount of times. And in the case of the Facit ESA-01 mechanical calculator, what winds up happening is the machine attempts to complete the infinite number of operations it believes is necessary to complete the division."
  },
  {
    "Title": "Entity Framework Core performance tuning – a worked example – The Reformed Programmer",
    "Url": "https://www.thereformedprogrammer.net/entity-framework-core-performance-tuning-a-worked-example/",
    "Timestamp": "2020-02-04T16:09:32",
    "Domain": "www.thereformedprogrammer.net",
    "Description": "Last Updated: December 24, 2019 | Created: September 22, 2017"
  },
  {
    "Title": "What dotnet new Could Be",
    "Url": "https://rehansaeed.com/what-dotnet-new-could-be/",
    "Timestamp": "2020-02-04T16:09:05",
    "Domain": "rehansaeed.com",
    "Description": "The ‘dotnet new’ CLI command is a great way to create projects from templates in dotnet. However, I think it could provide a much better experience than it currently does. I also suspec…"
  },
  {
    "Title": "signalr package · go.dev",
    "Url": "https://pkg.go.dev/github.com/davidfowl/signalr-ports/signalr-go-server/pkg/signalr?tab=doc",
    "Timestamp": "2020-02-04T15:02:43",
    "Domain": "pkg.go.dev",
    "Description": "ClientProxy allows the hub to send messages to one or more of its clients"
  },
  {
    "Title": "Getting started with cloud deployments with Pulumi and .NET",
    "Url": "https://channel9.msdn.com/Shows/On-NET/Getting-started-with-cloud-deployments-with-Pulumi-and-NET",
    "Timestamp": "2020-02-04T15:02:05",
    "Domain": "channel9.msdn.com",
    "Description": "In this episode, Matt and Luke sit with Scott Hunter to show how Pulumi enables .NET developers to define and deployment their cloud infrastructure as code. [00:50] - What is Pulumi?[02:30] - Creating"
  },
  {
    "Title": "Yahoo! Inc. Customer Data Security Breach Litigation Settlement",
    "Url": "https://yahoodatabreachsettlement.com/",
    "Timestamp": "2020-02-04T13:04:50",
    "Domain": "yahoodatabreachsettlement.com",
    "Description": "Yahoo! Inc. Customer Data Security Breach Litigation Settlement"
  },
  {
    "Title": "Fast, parallel applications with WebAssembly SIMD · V8",
    "Url": "https://v8.dev/features/simd",
    "Timestamp": "2020-02-04T08:01:07",
    "Domain": "v8.dev",
    "Description": "Bringing vector operations to WebAssembly"
  },
  {
    "Title": "Reuse Blazor WASM UI in Blazor Server — App vNext",
    "Url": "http://www.appvnext.com/blog/2020/2/2/reuse-blazor-wasm-ui-in-blazor-server",
    "Timestamp": "2020-02-04T07:01:47",
    "Domain": "www.appvnext.com",
    "Description": "So, you’ve decided to use Blazor, but you’re not sure which hosting model to use: Client (WebAssembly) or Server (SignalR-based). Wouldn’t it be great if you could write one version of your app that can run as either a WebAssembly or Server-based Blazor app? With a few tweaks, and by following a few"
  },
  {
    "Title": ".NET 5 breaking change: StringInfo and TextElementEnumerator classes are now UAX29-compliant · Issue #16702 · dotnet/docs",
    "Url": "https://github.com/dotnet/docs/issues/16702",
    "Timestamp": "2020-02-04T06:58:17",
    "Domain": "github.com",
    "Description": ".NET 5&#39;s System.Globalization.StringInfo and System.Globalization.TextElementEnumerator classes now follow UAX29 guidelines for extended grapheme enumeration Unicode has the concept of a &quot;..."
  }
]