[
  {
    "Title": "VS Code 1.49 (August 2020 Update) Continues Remote Development Improvements -- Visual Studio Magazine",
    "Url": "https://visualstudiomagazine.com/articles/2020/09/18/vscode-1-49.aspx",
    "Timestamp": "2020-09-18T23:03:59",
    "Domain": "visualstudiomagazine.com",
    "Description": ""
  },
  {
    "Title": "Introducing Cosmos DB Studio",
    "Url": "https://thomaslevesque.com/2020/09/17/introducing-cosmos-db-studio/",
    "Timestamp": "2020-09-18T23:03:54",
    "Domain": "thomaslevesque.com",
    "Description": "I’ve been using Azure Cosmos DB on a fairly regular basis for the last 2 years or so. It’s a pretty good database, but one thing has always bothered me: the lack of a proper tool to query and modify data in the database. Basically, here are the current options:\n The standalone Cosmos DB Explorer website The Data Explorer in the Azure Portal Cosmos DB support in Azure Storage Explorer  These 3 options are actually the same thing, made from the same code base, which was recently open-sourced."
  },
  {
    "Title": "mrDIMAS/rg3d",
    "Url": "https://github.com/mrDIMAS/rg3d",
    "Timestamp": "2020-09-18T22:04:03",
    "Domain": "github.com",
    "Description": "3d game engine written in Rust. Contribute to mrDIMAS/rg3d development by creating an account on GitHub."
  },
  {
    "Title": "Announcing ImageSharp.Web 1.0.0 | Six Labors",
    "Url": "https://sixlabors.com/blog/announcing-imagesharpweb-100/",
    "Timestamp": "2020-09-18T22:04:01",
    "Domain": "sixlabors.com",
    "Description": ""
  },
  {
    "Title": "Blessing Krofegha -  Is Headless CMS the Future of Development? [w/ASL Interpreting]",
    "Url": "https://www.youtube.com/watch?v=GJJ0l9Nop50",
    "Timestamp": "2020-09-18T22:03:58",
    "Domain": "www.youtube.com",
    "Description": "Blessing Krofegha on Twitter: https://twitter.com/Beveloper"
  },
  {
    "Title": "Age of Ascent Trailer",
    "Url": "https://www.youtube.com/watch?v=4Bpz94X4ARA",
    "Timestamp": "2020-09-18T22:03:57",
    "Domain": "www.youtube.com",
    "Description": "Find out more at https://www.ageofascent.com"
  },
  {
    "Title": "Continuous Integration for the .NET Framework",
    "Url": "https://dev.to/mcartoixa/continuous-integration-for-the-net-framework-1hc6",
    "Timestamp": "2020-09-18T22:03:57",
    "Domain": "dev.to",
    "Description": "I realize writing this post that I have been practicing .NET development (C# in particular) since 200..."
  },
  {
    "Title": "Weekly Update 209",
    "Url": "https://www.troyhunt.com/weekly-update-209/",
    "Timestamp": "2020-09-18T22:03:55",
    "Domain": "www.troyhunt.com",
    "Description": "More IoT, more cyber and more Q&amp;A so yeah, business as usual this week. More specifically, a lot of this week's update talks about VPNs and where they still make sense with so much HTTPS all over the place these days. As I say in the vid, blog"
  },
  {
    "Title": "Code Maze Weekly #43 - Code Maze",
    "Url": "https://code-maze.com/code-maze-weekly-43/",
    "Timestamp": "2020-09-18T21:04:04",
    "Domain": "code-maze.com",
    "Description": "This week we’ve seen many interesting articles again, but we also had some great news too: .NET 5 Release Candidate one is out and available for testing! While we’re waiting for the full .NET 5 to be finalized, let’s take it slow and read some interesting articles by our favorite bloggers: .NET and C# .NET […]"
  },
  {
    "Title": "Apple Ending Fortnite Save the World Updates for Mac",
    "Url": "https://www.epicgames.com/fortnite/en-US/news/apple-ends-epics-ability-to-offer-fortnite-save-the-world-on-mac",
    "Timestamp": "2020-09-18T21:03:55",
    "Domain": "www.epicgames.com",
    "Description": "Please read what Fortnite is doing for Save the World Mac players. Some will qualify for automatic refunds and how you can still play on other platforms.\n"
  },
  {
    "Title": "Astrocamel - Blog/Portfolio of George Skouroupathis",
    "Url": "https://www.astrocamel.com/web/2020/09/04/how-i-bypassed-cloudflares-sql-injection-filter.html",
    "Timestamp": "2020-09-18T20:23:34",
    "Domain": "www.astrocamel.com",
    "Description": "astrocamel, Blog, Portfolio, George Skouroupathis"
  },
  {
    "Title": "To All The Jobs I Had Before",
    "Url": "https://elisabethirgens.github.io/notes/2020/09/to-all-jobs-i-had-before/",
    "Timestamp": "2020-09-18T20:03:53",
    "Domain": "elisabethirgens.github.io",
    "Description": "My career as a developer started 5 years ago. Before that I have 15 years work experience from other roles, and I‘ve been thinking about what I learnt from all those jobs I had before."
  },
  {
    "Title": "HOVALAAG Processor Documentation",
    "Url": "http://silverspaceship.com/hovalaag/docs.html",
    "Timestamp": "2020-09-18T19:03:50",
    "Domain": "silverspaceship.com",
    "Description": null
  },
  {
    "Title": "Fabulous: Functional App Development | Xamarin Blog",
    "Url": "https://devblogs.microsoft.com/xamarin/fabulous-functional-app-development/",
    "Timestamp": "2020-09-18T18:04:00",
    "Domain": "devblogs.microsoft.com",
    "Description": "Go functionality with Xamarin, F#, and Fabulous to build native mobile apps with the MVU architecture pattern and hot code reloading."
  },
  {
    "Title": "Commerce Department Prohibits WeChat and TikTok Transactions to Protect the National Security of the United States",
    "Url": "https://www.commerce.gov/news/press-releases/2020/09/commerce-department-prohibits-wechat-and-tiktok-transactions-protect",
    "Timestamp": "2020-09-18T18:03:57",
    "Domain": "www.commerce.gov",
    "Description": " In response to President Trump’s Executive Orders signed August 6, 2020, the Department of Commerce (Commerce) today announced prohibitions on transactions relating to mobile applications (apps) WeChat and TikTok to safeguard the national security of the United States."
  },
  {
    "Title": "Release v3.0.0 One Piece · vuejs/vue-next",
    "Url": "https://github.com/vuejs/vue-next/releases/tag/v3.0.0",
    "Timestamp": "2020-09-18T18:03:54",
    "Domain": "github.com",
    "Description": "Today we are proud to announce the official release of Vue.js 3.0 \"One Piece\". This new major version of the framework provides improved performance, smaller bundle sizes, better TypeScript integra..."
  },
  {
    "Title": "Patient Dies After Ransomware Attack on Düsseldorf Hospital",
    "Url": "https://hotforsecurity.bitdefender.com/blog/patient-dies-after-ransomware-attack-on-dusseldorf-hospital-24159.html",
    "Timestamp": "2020-09-18T17:04:13",
    "Domain": "hotforsecurity.bitdefender.com",
    "Description": "According to reports, the network failure announced by Düsseldorf University Hospital (UKD) last week – which turned out to be a ransomware infection – has resulted in a patient dying. “In the morning hours of Thursday (September 10th), larger parts of the IT... #CVE201919781 #Düsseldorf #hospital"
  },
  {
    "Title": "Ice",
    "Url": "https://hivewired.wordpress.com/2020/09/06/ice/",
    "Timestamp": "2020-09-18T17:04:06",
    "Domain": "hivewired.wordpress.com",
    "Description": "Most climate scientists believe that the melting of the ice sheets will be gradual and linear, but are they right?"
  },
  {
    "Title": "What happened to Firefox Send?",
    "Url": "https://support.mozilla.org/en-US/kb/what-happened-firefox-send",
    "Timestamp": "2020-09-18T16:04:01",
    "Domain": "support.mozilla.org",
    "Description": "[https://send.firefox.com/ Firefox Send] has been discontinued as of September 17th, 2020. Thank you for trying Firefox Send in the past."
  },
  {
    "Title": "HOVALAAG",
    "Url": "http://silverspaceship.com/hovalaag/",
    "Timestamp": "2020-09-18T16:03:58",
    "Domain": "silverspaceship.com",
    "Description": ""
  },
  {
    "Title": "#ServerlessSeptember 2020 Content Collection - updated 🚨 DAILY 🚨",
    "Url": "https://dev.to/azure/serverlessseptember-2020-content-collection-443k",
    "Timestamp": "2020-09-18T15:04:08",
    "Domain": "dev.to",
    "Description": "Hey there!  You've come here to find fresh serverless content? There you go.  🚨 This article gets upd..."
  },
  {
    "Title": "I get a weird error about no matching function when I try to use winrt::capture | The Old New Thing",
    "Url": "https://devblogs.microsoft.com/oldnewthing/20200918-45/?p=104239",
    "Timestamp": "2020-09-18T15:04:06",
    "Domain": "devblogs.microsoft.com",
    "Description": "Last time, we looked at using the C++/WinRT capture to call COM ABI methods from C++/WinRT. But sometimes, you follow the cookbook to the letter, and it still fails: winrt::com_ptr<IServiceProvider> provider = ...;  auto top = winrt::capture<IShellBrowser>   (provider, &IServiceProvider::QueryService, SID_STopLevelBrowser);  Here,"
  },
  {
    "Title": "Calling public methods on Blazor component from another component - Gérald Barré",
    "Url": "https://www.meziantou.net/calling-public-methods-on-blazor-component-from-another-component.htm",
    "Timestamp": "2020-09-18T15:04:04",
    "Domain": "www.meziantou.net",
    "Description": "In this post, I describe how to expose methods in a component that can be used by other components in an ASP.NET Core Blazor application."
  },
  {
    "Title": "RavenDB Meetup : Building a grown up database",
    "Url": "https://ayende.com/blog/191907-A/ravendb-meetup-building-a-grown-up-database?Key=91c399a4-2a62-4e4e-8ca1-8dab24ca1ba1",
    "Timestamp": "2020-09-18T15:04:00",
    "Domain": "ayende.com",
    "Description": "I’m going to be talking to SWENUG next week about RavenDB and how it affects the design and architecture of your systems.Feel free to join us live on Sep 22,..."
  },
  {
    "Title": "The File System is Unpredictable",
    "Url": "https://blog.paranoidcoding.com/2009/12/10/the-file-system-is-unpredictable.html",
    "Timestamp": "2020-09-18T14:36:14",
    "Domain": "blog.paranoidcoding.com",
    "Description": "One of the more frequent questions I answer on StackOverflow is a variation of the following."
  },
  {
    "Title": "Episode 60 - Uno Platform With Jérôme Laban",
    "Url": "https://dotnetcore.show/episode-60-uno-platform-with-jerome-laban/",
    "Timestamp": "2020-09-18T13:04:05",
    "Domain": "dotnetcore.show",
    "Description": "In this episode of The .NET Core Podcast we talked with Jérôme Laban about Uno Platform and why you should be using it to build your cross-platform, UI based applications."
  },
  {
    "Title": "Apple asks to block iOS Unreal Engine development in new court filing",
    "Url": "https://arstechnica.com/gaming/2020/09/apple-asks-to-block-ios-unreal-engine-development-in-new-court-filing/",
    "Timestamp": "2020-09-18T11:04:03",
    "Domain": "arstechnica.com",
    "Description": "iOS maker says it's worried Epic could insert another \"trojan horse\" if allowed."
  },
  {
    "Title": "NVIDIA Broadcast App Out Now! Turn Any Room Into A Home Studio On GeForce RTX GPUs",
    "Url": "https://www.nvidia.com/en-us/geforce/news/nvidia-broadcast-app/",
    "Timestamp": "2020-09-18T10:04:06",
    "Domain": "www.nvidia.com",
    "Description": "Turn your gamer den into a home studio."
  },
  {
    "Title": "FreeCAD/FreeCAD",
    "Url": "https://github.com/FreeCAD/FreeCAD",
    "Timestamp": "2020-09-18T10:04:03",
    "Domain": "github.com",
    "Description": "This is the official source code of FreeCAD, a free and opensource multiplatform 3D parametric modeler. Issues are managed on our own bug tracker at https://www.freecadweb.org/tracker - FreeCAD/Fre..."
  },
  {
    "Title": "safepassme",
    "Url": "https://safepass.me/safepass-me/",
    "Timestamp": "2020-09-18T10:04:01",
    "Domain": "safepass.me",
    "Description": "We check active directory passwords against public database breaches offline, in a fraction of a second. Give us a try! We are at hello-twitter@safepass.me"
  },
  {
    "Title": ".NET App Developer Links - 2020-09-18",
    "Url": "https://links.danrigby.com/2020/09/app-developer-links-2020-09-18/",
    "Timestamp": "2020-09-18T07:04:06",
    "Domain": "links.danrigby.com",
    "Description": "The latest news and resources for .NET app developers."
  },
  {
    "Title": "TechEmpower Web Framework Performance Comparison",
    "Url": "https://www.techempower.com/benchmarks/#section=test&runid=3e069eac-3b1d-4f77-bb06-2bceb4172dea&hw=ph&test=fortune&a=2",
    "Timestamp": "2020-09-18T06:04:20",
    "Domain": "www.techempower.com",
    "Description": "Performance comparison of a wide spectrum of web application frameworks and platforms using community-contributed test implementations."
  },
  {
    "Title": "GraphQL on Azure: Part 5 - Can We Make GraphQL Type Safe in Code | LINQ to Fail",
    "Url": "https://www.aaron-powell.com/posts/2020-09-17-graphql-on-azure-part-5-can-we-make-graphql-type-safe-in-code/",
    "Timestamp": "2020-09-18T06:04:17",
    "Domain": "www.aaron-powell.com",
    "Description": "We're defining a GraphQL schema with a type system, but can we use that type system for our application?"
  },
  {
    "Title": "TypeScript Builders: Improving your types one step at a time",
    "Url": "https://blog.scottlogic.com/2020/09/16/typescript-builders.html",
    "Timestamp": "2020-09-18T06:04:15",
    "Domain": "blog.scottlogic.com",
    "Description": "TypeScript's type system is amazing, but it can't do everything. In this post, I demonstrate how the builder pattern takes my types to the next level. We walk through an example in detail, so you can start using builders too."
  },
  {
    "Title": "C# 9.0: Target-typed expression | Miguel Bernard's Blog",
    "Url": "https://blog.miguelbernard.com/c-9-0-target-typed-new/",
    "Timestamp": "2020-09-18T06:04:12",
    "Domain": "blog.miguelbernard.com",
    "Description": "Learn all about the new target-typed capabilities in C# 9.0. It helps simplify your code and make it more readable."
  },
  {
    "Title": "The future of .NET Standard | .NET Blog",
    "Url": "https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/?WT.mc_id=DOP-MVP-4025064",
    "Timestamp": "2020-09-18T06:04:10",
    "Domain": "devblogs.microsoft.com",
    "Description": "Since .NET 5 was announced, many of you have asked what this means for .NET Standard and whether it will still be relevant. In this post, I’m going to explain how .NET 5 improves code sharing and replaces .NET Standard. I’ll also cover the cases where you still need .NET Standard."
  },
  {
    "Title": "Ultra Safe Nuclear Corporation",
    "Url": "https://www.usnc.com/",
    "Timestamp": "2020-09-18T05:04:11",
    "Domain": "www.usnc.com",
    "Description": "Reliable Energy Anywhere"
  },
  {
    "Title": "First death reported following a ransomware attack on a German hospital | ZDNet",
    "Url": "https://www.zdnet.com/article/first-death-reported-following-a-ransomware-attack-on-a-german-hospital/",
    "Timestamp": "2020-09-18T04:04:11",
    "Domain": "www.zdnet.com",
    "Description": "Death occurred after a patient was diverted to a nearby hospital after the Duesseldorf University Hospital suffered a ransomware attack."
  },
  {
    "Title": "Under Deconstruction: The State of Shopify’s Monolith",
    "Url": "https://engineering.shopify.com/blogs/engineering/shopify-monolith",
    "Timestamp": "2020-09-18T03:04:17",
    "Domain": "engineering.shopify.com",
    "Description": "Ruby on Rails is a great framework for rapidly building beautiful web applications that users and developers love. But if an application is successful, there’s usually continued investment, resulting in additional features and increased overall system complexity.\nShopify’s core monolith has over 2.8 million lines of Ruby code and 500,000 commits. Rails doesn’t provide patterns or tooling for managing the inherent complexity and adding features in a structured, well-bounded way.\nThat’s why, over three years ago, Shopify founded a team to investigate how to make our Rails monoliths more modular. The goal was to help us scale towards ever increasing system capabilities and complexity by creating smaller, independent units of code we called components. The vision went like this:\n\nWe can more easily onboard new developers to just the parts immediately relevant to them, instead of the whole monolith.\nInstead of running the test suite on the whole application, we can run it on the smaller subset of components affected by a change, making the test suite faster and more stable.\nInstead of worrying about the impact on parts of the system we know less well, we can change a component freely as long as we’re keeping its existing contracts intact, cutting down on feature implementation time.\n\nIn summary, developers should feel like they are working on a much smaller app than they actually are.\nIt’s been 18 months since we last shared our efforts to make our Rails monoliths more modular. I’ve been working on this modularity effort for the last two and a half years, currently on a team called Architecture Patterns. I’ll lay out the current state of my team’s work, and some things we’d do differently if we started fresh right now.\nThe Status Quo\nWe generally stand by the original ideas as described in Deconstructing the Monolith, but almost all of the details have changed.  We make consistent progress, but it's important to note that making changes at this scale requires a significant shift in thinking for a critical mass of contributors, and that takes time.\nWhile we’re far from finished, we already reap the benefits of our work. The added constraints on how we write our code trigger deep software design discussions throughout the organization. We see a mindset shift across our developers with a stronger focus on modular design. When making a change, developers are now more aware of the consequences on the design and quality of the monolith as a whole. That means instead of degrading the design of existing code, new feature implementations now more often improve it. Parts of the codebase that received heavy refactoring in recent years are now easier to understand because their relationship with the rest of the system is clearer.\nWe automatically triage exceptions to components, enabling teams to act on them without having to dig through the sometimes noisy exception stream for the whole monolith. And with each component explicitly owned by a team, whole-codebase chores like Rails upgrades are easily distributed and collaboratively solved. Shopify is running its main monolith on the newest, unreleased revisions of Rails. The clearly defined ownership for areas of the codebase is one of the factors enabling us to do that.\nWhat We Learned so Far\nOur main monolith is one of the oldest, largest Rails codebases on the planet, under continuous development since at least 2006, with hundreds of developers currently adding features.\nA refactor on this scale needs to be approached completely differently from smaller efforts. We learned that all large scale changes start\n\nwith understanding and influencing developer behavior\nat the grassroots\nwith a holistic perspective on architecture \nwith careful application of tooling\nwith being aware of the tradeoffs involved\n\nUnderstand Developer Behaviour\nA single centralized team can’t make change happen by working against the momentum of hundreds of developers adding features.\nAlso, it can’t anticipate all the edge cases and have context on all domains of the application. A single team can make simple change happen on a large scale, or complex change on a small scale. To modularize a large monolith though, we need to make complex change happen on a large scale. Even if a centralized team could make it happen, the design would degrade once the team switches its focus to something else. \nThat’s why making a fundamental architecture change to a system that’s being actively worked on is in large part a people problem. We need to change the behavior of the average developer on the codebase. We need to all iteratively evolve the system towards the envisioned future together. The developers are an integral part of the system.\nDr. B.J. Fogg, founder of the Behavior Design Lab at Stanford University, developed a model for thinking about behaviors that matches our experiences. The model suggests that for a behavior to occur, three things need to be in place: Ability, Motivation, and Prompt.\nFogg Behaviour Model by  BJ Fogg, PHD\nIn a nutshell, prompts are necessary for a desired behavior to happen, but they're ineffective unless there's enough motivation and ability. Exceptionally high motivation can, within reason, compensate for low ability and vice versa.\nAutomated tooling and targeted manual code reviews provide prompts. That’s the easy part. Creating ability and motivation to make positive change is harder. Especially when that goes against common Ruby on Rails community practices and requires a view of the system that’s much larger than the area that most individual developers are working on. Spreading an understanding of what we’re aiming for, and why, is critical.\nFor example, we invested quite a bit of time and energy into developing patterns to ensure some consistency in how component boundary interfaces are designed. Again and again we pondered: How should components call each other? We then pushed developers to use these patterns everywhere. In hindsight, this strategy didn’t increase developer ability or motivation. It didn’t solve the problems actually holding them back, and it didn’t explain the reasons or long term goals well enough. Pushing for consistency added rules, which always add some friction, because they have to be learned, remembered, and followed. It didn’t make any hard problem significantly easier to solve. In some cases, the patterns were helpful. In other cases, they lead developers to redefine their problem to fit the solution we provided, which degraded the overall state of the monolith.\nToday, we’re still providing some general suggestions on interface consistency, but we have a lot less hard rules. We’re focusing on finding the areas where developers are hungry to make positive change, but don’t end up doing it because it’s too hard. Often, making our code more modular is hard because legacy code and tooling are based on assumptions that no longer hold true. One of the most problematic outdated assumptions is that all Active Record models are OK to access everywhere, when in this new componentized world we want to restrict their usage to the component that owns them. We can help developers overcome this problem.\nSo in the words of Dr. Fogg, these days we’re looking for areas where the prompt is easy, the motivation is present, and we just have to amp up the ability to make things happen.\nFoster the Grassroots\nAs I mentioned, we, as a centralized team, can’t make this change happen by ourselves. So, we work to create a grassroots movement among the developers at Shopify. We aim to increase the number of people that have ability, motivation and prompt to move the system a tiny step further in the right direction.\nWe give internal talks, write documentation, share wins, embed in other teams, and pair with people all over the company. Embedding and pairing make sure we’re solving the problems that product developers are most struggling with in practice, avoiding what’s often called Ivory Tower Syndrome where the solutions don’t match the problems. It also lets us gain context on different areas of the codebase and the business while helping motivated people achieve goals that align with ours.\nAs an example, we have a group called the Architecture Guild. The guild has a slack channel for software architecture discussions and bi-weekly meetups. It’s an open forum, and a way to grow more architecture conscious mindsets while encouraging architectural thinking. The Architecture Patterns team provides some content that we think is useful, but we encourage other people to share their thoughts, and most of the contributions come from other teams. Currently, the Architecture Guild has ~400 members and 54 documented meetups with meeting notes and recordings that are shared with all developers at Shopify.\nThe Architecture Guild grew organically out of the first Componentization team at Shopify after the first year of Componentization. If I were to start a similar effort again today, I’d establish a forum like this from the beginning to get as many people on board with the change as early as possible. It’s also generally a great vehicle to spread software design knowledge that’s siloed in specific teams to other parts of the company.\nOther methods we use to create fertile ground for ambitious architecture projects are\n\nthe Developer Handbook, an internal online resource documenting how we develop software at Shopify.\nDeveloper Talks, our internal weekly livestreamed and recorded talks about software development at Shopify.\n\nBuild Holistic Architecture\nSome properties of software are so closely related that they need to be approached in pairs. By working on one property and ignoring its “partner property,” you could end up degrading the system.\nBalance Encapsulation With A Simple Dependency Graph\nWe started out by focusing our work on building a clean public interface around each component to hide the internals. The expectation was that this would allow reasoning about and understanding the behavior of a component in isolation. Changing internals of a component wouldn’t break other components—as long as the interface stays stable.\nIt’s not that straightforward though. The public interface is what other components depend on; if a lot of components depend on it, it’s hard to change. The interface needs to be designed with those dependencies in mind, and the more components depend on it, the more abstract it needs to be. It’s hard to change because it’s used everywhere, and it will have to change often if it contains knowledge about concrete parts of the business logic.\nWhen we started analyzing the graph of dependencies between components, it was very dense, to the point that every component depended on over half of all the other components. We also had lots of circular dependencies.\nCircular Dependancies\nCircular dependencies are situations where for example component A depends on component B but component B also depends on component A. But circular dependencies don’t have to be direct, the cycles can be longer than two. For example, A depends on B depends on C depends on A.\nThese properties of the dependency graph mean that the components can’t be reasoned about, or evolved, separately. Changes to any component in a cycle can break all other components in the cycle. Changes to a component that has almost all other components depend on can break almost all other components. So these changes require a lot of context. A dense, cyclical dependency graph undermines the whole idea of Componentization—it blocks us from making the system feel smaller.\nWhen we ignored the dependency graph, in large parts of the codebase the public interface turned out to just be an added layer of indirection in the existing control flows. This made it harder to refactor these control flows because it added additional pieces that needed to be changed. It also didn’t make it a lot easier to reason about parts of the system in isolation.\n The simplest possible way to introduce a public interface to a private implementation\nThe diagram shows that the simplest possible way to introduce a public interface could just mean that a previously problematic design is leaked into a separate interface class, making the underlying design problem harder to fix by spreading it into more files.\nDiscussions about the desirable direction of a dependency often surface these underlying design problems. We routinely discover objects with too many responsibilities and missing abstractions this way.\nPerhaps not surprisingly, one of the central entities of the Shopify system is the Shop and so almost everything depends on the Shop class. That means that if we want to avoid circular dependencies, the Shop class can depend on almost nothing. \nLuckily, there are proven tools we can use to straighten out the dependency graph. We can make arrows point in different directions, by either moving responsibilities into the component that depends on them or applying inversion of control. Inversion of control means to invert a dependency in such a way that control flow and source code dependency are opposed. This can be done for example through a publish/subscribe mechanism like ActiveSupport::Notifications.\nThis strategy of eliminating circular dependencies naturally guides us towards removing concrete implementation from classes like Shop, moving it towards a mostly empty container holding only the identity of a shop and some abstract concepts.\nIf we apply the aforementioned techniques while building out the public interfaces, the result is therefore much more useful. The simplified graph allows us to reason about parts of the system in isolation, and it even lays out a path towards testing parts of the system in isolation.\nDependencies diagram between Platform, Supporting, and Frontend components\nIf determining the desired direction of all the dependencies on a component ever feels overwhelming, we think about the components grouped into layers. This allows us to prioritize and focus on cleaning up dependencies across layers first. The diagram above sketches out an example. Here, we have platform components, Platform and Shop Identity, that purely provide functionality to other components. Supporting components, like Merchandising and Inventory, depend on the platform components but also provide functionality to others and often serve their own external APIs. Frontend components, like Online Store, are primarily externally facing. The dependencies crossing the dotted lines can be prioritized and cleaned up first, before we look at dependencies within a layer, for example between Merchandising and Inventory.\nBalance Loose Coupling With High Cohesion\nTight coupling with low cohesion and loose coupling with high cohesion\nMeaningful boundaries like those we want around components require loose coupling and high cohesion. A good approximation for this is Change Locality: The degree to which code that changes together lives together.\nAt first, we solely focused on decoupling components from each other. This felt good because it was an easy, visible change, but it still left us with cohesive parts of the codebase that spanned across component boundaries. In some cases, we reinforced a broken state. The consequence is that often small changes to the functionality of the system still meant changes in code across multiple components, for which the developers involved needed to know and understand all of those components.\nChange Locality is a sign of both low coupling and high cohesion and makes evolving the code easier. The codebase feels smaller, which is one of our stated goals. And Change Locality can also be made visible. For example, we are working on automation analyzing all pull requests on our codebase for which components they touch. The number of components touched should go down over time.\nAn interesting side note here is that different kinds of cohesion exist. We found that where our legacy code respects cohesion, it’s mostly informational cohesion—grouping code that operates on the same data. This arises from a design process that starts with database tables (very common in the Rails community). Change Locality can be hindered by that. To produce software that is easy to maintain, it makes more sense to focus on functional cohesion—grouping code that performs a task together. That’s also much closer to how we usually think about our system. \nOur focus on functional cohesion is already showing benefits by making our business logic, the heart of our software, easier to understand.\nCreate a SOLID foundation\nThere are ideas in software design that apply in a very similar way on different levels of abstraction—coupling and cohesion, for example. We started out applying these ideas on the level of components. But most of what applies to components, which are really large groups of classes, also applies on the level of individual classes and even methods.\nOn a class level, the most relevant software design ideas are commonly summarized as the SOLID principles. On a component level, the same ideas are called “package principles.” Here’s a SOLID refresher from Wikipedia:\nSingle-responsibility principle\nA class should only have a single responsibility, that is, only changes to one part of the software's specification should be able to affect the specification of the class.\nOpen–closed principle\nSoftware entities should be open for extension, but closed for modification.\nLiskov substitution principle\nObjects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.\nInterface segregation principle\nMany client-specific interfaces are better than one general-purpose interface.\nDependency inversion principle\nDepend upon abstractions, not concretions.\nThe package principles express similar concerns on a different level, for example (source):\nCommon Closure Principle\nClasses that change together are packaged together.\nStable Dependencies Principle\nDepend in the direction of stability.\nStable Abstractions Principle\nAbstractness increases with stability.\nWe found that it’s very hard to apply the principles on a component level if the code doesn’t follow the equivalent principles on a class and method level. Well designed classes enable well designed components. Also, people familiar with applying the SOLID principles on a class level can easily scale these ideas up to the component level.\nSo if you’re having trouble establishing components that have strong boundaries, it may make sense to take a step back and make sure your organization gets better at software design on a scale of methods and classes first.\nThis is again mostly a matter of changing people’s behavior that requires motivation and ability. Motivation and ability can be increased by spreading awareness of the problems and approaches to solving them.\nIn the Ruby world, Sandi Metz is great at teaching these concepts. I recommend her books, and we’re lucky enough to have her teach workshops at Shopify repeatedly. She really gets people excited about software design.\nApply Tooling Deliberately\nTo accelerate our progress towards the modular monolith, we’ve made a few major changes to our tooling based on our experience so far.\nUse Rails Engines\nWhile we started out with a lot of custom code, our components evolved to look more and more like Rails Engines. We’re doubling down on engines going forward. They are the one modularity mechanism that comes with Rails out of the box. They have the familiar looks and features of Rails applications, but other than apps, we can run multiple engines in the same process. And should we make the decision to extract a component from the monolith, an engine is easily transformed into a standalone application.\nEngines don’t fit the use case perfectly though. Some of the roughest edges are related to libraries and tooling assuming a Rails application structure, not the slightly different structure of an engine. Others relate to the fact that each engine can (and probably should) specify its own external gem dependencies, and we need a predictable way to unify them into one set of gems for the host application. Thankfully, there are quite a few resources out there from other projects encountering similar problems. Our own explorations have yielded promising results with multiple production applications currently using engines for modularity, and we’re using engines everywhere going forward.\nDefine and Enforce Contracts\nStrong boundaries require explicit contracts. Contracts in code and documentation allow developers to use a component without reading its implementation, making the system feel smaller.\nInitially, we built a hash schema validation library called Component::Schema based on dry-schema. It served us well for a while, but we ran into problems keeping up with breaking changes and runtime performance for checking more complex contracts.\nIn 2019, Stripe released their static Ruby type checker, Sorbet. Shopify was involved in its development before that release and has a team contributing to Sorbet, as we are using it heavily. Now it’s our go-to tool for expressing input and output contracts on component boundaries. Configured correctly, it has barely any runtime performance impact, it’s more stable, and it provides advanced features like interfaces.\nThis is what an entrypoint into a component looks like using Component::Schema:\n\n\n\nAnd this is what that entrypoint looks like today, using Sorbet:\n\n\n\nPerform Static Dependency Analysis\nAs Kirsten laid out in the original blog post on Componentization at Shopify, we initially built a call graph analysis tool we called Wedge. It logged all method calls during test suite execution on CI to detect calls between components.\nWe found the results produced were often not useful. Call graph logging produces a lot of data, so it’s hard to separate the signal from the noise. Sometimes it’s not even clear which component a call is from or to. Consider a method defined in component A which is inherited by a class in component B. If this method is making a call to component C, which component is the call coming from? Also, because this analysis depended on the full test suite with added instrumentation, it took over an hour to run, which doesn’t make for a useful feedback cycle.\nSo, we developed a new tool called Packwerk to analyze static constant references. For example, the line Shop.first, contains a static reference to Shop and a method call to a method on that class that’s called first. Packwerk only analyzes the static constant reference to Shop. There’s less ambiguity in static references, and because they’re always explicitly introduced by developers, highlighting them is more actionable. Packwerk runs a full analysis on our largest codebase in a few minutes, so we’re able to integrate it with our Pull Request workflow. This allows us to reject changes that break the dependency graph or component encapsulation before they get merged into our main branch.\nWe’re planning to make Packwerk open source soon. Stay tuned!\nDecide to Prioritize Ownership or Boundaries\nThere are two major ways to partition an existing monolith and create components from a big ball of mud. In my experience, all large architecture changes end up in an incomplete state. Maybe that’s a pessimistic view, but my experience tells me that the temporary incomplete state will at least last longer than you expect. So choose an approach based on which intermediary state is most useful for your specific situation.\nOne option is to draw lines through the monolith based on some vision of the future and strengthen those lines over time into full fledged boundaries. The other option is to spin off parts of it into tiny units with strong boundaries and then transition responsibilities over iteratively, growing the components over time.\nFor our main monolith, we took the first approach; our vision was guided by the ideas of Domain Driven Design. We defined components as implementations of subdomains of the domain of commerce, and moved the files into corresponding folders. The main advantage is that even though we’re not finished building out the boundaries, responsibilities are roughly grouped together, and every file has a stewardship team assigned. The disadvantage is that almost no component has a complete, strong boundary yet, because with the components containing large amounts of legacy code, it’s a huge amount of work to establish these. This vision of the future approach is good if well-defined ownership and a clearly visible partition of the app are most important for you—which they were for us because of the huge number of people working on the codebase.\nOn other large apps within Shopify, we’ve tried out the second approach. The advantage is that large parts of the codebase are in isolated and clean components. This creates good examples for people to work towards. The disadvantage of this approach is that we still have a considerable sized ball of mud within the app that has no structure whatsoever. This spin-off approach is good if clean boundaries are the priority for you.\nWhat We’re Building Right Now\nWhile feature development on the monolith is going on as fast as ever, many developers are making things more modular at the same time. We see an increase of people in a position to do this, and the number of good examples around the codebase is expanding.\nWe currently have 37 components in our main monolith, each with public entrypoints covering large parts of its responsibilities. Packwerk is used on about a third of the components to restrict their dependencies and protect the privacy of their internal implementation. We’re working on making Packwerk enticing enough that all components will adopt it.\nThrough increased adoption we’re progressively enforcing properties of the dependency graph. Total acyclicity is the long term goal, but the more edges we can remove from the graph in the short term the easier the system will be to reason about.\nWe have a few other monolithic apps going through similar processes of componentization right now; some with the goal of splitting into separate services long term, some aiming for the modular monolith. We are very deliberate about when to split functionality out into separate services, and we only do it for good reasons. That’s because splitting a single monolithic application into a distributed system of services increases the overall complexity considerably.\nFor example, we split out storefront rendering because it’s a read-only use case with very high throughput and it makes sense for us to scale and distribute it separately from the interface that our merchants use to manage their stores. Credit card vaulting is a separate service because it processes sensitive data that shouldn’t flow through other parts of the system.\nIn addition, we’re preparing to have all new Rails applications at Shopify componentized by default. The idea is to generate multiple separately tested engines out of the box when creating a Rails app, removing the top level app folder and setting up developers for a modular future from the start.\nAt the same time, we’re looking into some of the patterns necessary to unblock further adoption of Packwerk. First and foremost that means making the dependency graph easy to clean up. We want to encourage inversion of control and more generally dependency inversion, which will probably lead us to use a publish/subscribe mechanism instead of straightforward method calls in many cases.\nThe second big blocker is efficiently querying data across components without coupling them too tightly. The most interesting problems in this area are\n\nOur GraphQL API exposes a partially circular graph to external consumers while we’d like the implementation in the components to be acyclic.\nOur GraphQL query execution and ElasticSearch reindexing currently heavily rely on Active Record features, which defeats the “public interface, private implementation” idea.\n\nThe long term vision is to have separate, isolated test suites for most of the components of our main monolith.\nLast But Not Least\nI want to give a shout out to Josh Abernathy, Bryana Knight, Matt Todd, Matthew Clark, Mike Chlipala and Jakob Class at Github. This blog post is based on, and indirectly the result of a conversation I had with them. Thank you!\nAnita Clarke, Edward Ocampo-Gooding, Gannon McGibbon, Jason Gedge, Martin LaRochelle, and Keyfer Mathewson contributed super valuable feedback on this article. Thank you BJ Fogg for the behavior model and use of your image.\nIf you’re interested in the kinds of challenges I described, you should join me at Shopify!\nFurther Reading\n\nKelly Sutton’s blog post How to Break Apart a Rails Monolith\n\nThe Modular Monolith: Rails Architecture | by Dan Manges\nRails conf talk: Between monoliths and microservices - by Vladimir Dementyev\n\nBook: Component-Based Rails Applications \n\nSorbet, static type checker for Ruby \nCollection of resources about modular Rails applications\nFogg Behavior Model\n\n\nDefinitions\n\n\nStable Abstractions Principle \n\nIndirection \n\nCoupling and cohesion\n\nInformational and functional cohesion\n\nSOLID \nPackage principles\nRails Engines\n"
  },
  {
    "Title": "DivineOmega/laravel-password-exposed-validation-rule",
    "Url": "https://github.com/DivineOmega/laravel-password-exposed-validation-rule",
    "Timestamp": "2020-09-18T03:04:14",
    "Domain": "github.com",
    "Description": "🔒 Laravel validation rule that checks if a password has been exposed in a data breach. - DivineOmega/laravel-password-exposed-validation-rule"
  },
  {
    "Title": "Xamarin.Forms Code Snippets",
    "Url": "https://channel9.msdn.com/Shows/XamarinShow/XamarinForms-Code-Snippets",
    "Timestamp": "2020-09-18T03:04:10",
    "Domain": "channel9.msdn.com",
    "Description": "This week, James is joined by Damien Doumer, Microsoft MVP, who shows off some of his favorite code snippets for Xamarin.Forms and how you can create your own. Show Links: Blog - 6 Xamarin.Forms Code "
  },
  {
    "Title": "22687 - (pgp) [meta] OpenPGP support",
    "Url": "https://bugzilla.mozilla.org/show_bug.cgi?id=22687",
    "Timestamp": "2020-09-18T02:04:16",
    "Domain": "bugzilla.mozilla.org",
    "Description": "RESOLVED (kaie) in MailNews Core - Security: OpenPGP. Last updated 2020-09-17."
  },
  {
    "Title": "Windows Sysinternals - Windows Sysinternals",
    "Url": "https://docs.microsoft.com/en-us/sysinternals/",
    "Timestamp": "2020-09-18T02:04:09",
    "Domain": "docs.microsoft.com",
    "Description": "Library, learning resources, downloads, support, and community. Evaluate and find out how to install, deploy, and maintain Windows with Sysinternals utilities."
  },
  {
    "Title": ".NET on Microsoft Learn",
    "Url": "https://docs.microsoft.com/en-us/learn/dotnet/",
    "Timestamp": "2020-09-18T01:04:06",
    "Domain": "docs.microsoft.com",
    "Description": "Learn how to build apps across multiple platforms with programming languages like C#, F#, and Visual Basic. Supported on Windows, Linux, and macOS, get started developing your next project with .NET today."
  }
]