<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>Codifying a ChatGPT workflow into a malleable GUI</title>
      <link>https://www.geoffreylitt.com/2023/07/25/building-personal-tools-on-the-fly-with-llms.html</link>
      <description>Wouldn&amp;#39;t it be neat if you could use LLMs to create little personal utility apps as the need arises? Here&amp;#39;s a story where I did just that...</description>
      <author> ()</author>
      <guid>https://www.geoffreylitt.com/2023/07/25/building-personal-tools-on-the-fly-with-llms.html</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:03 GMT</pubDate>
    </item>
    <item>
      <title>The transformer model, explained clearly - DeriveIt</title>
      <link>https://www.deriveit.org/notes/119</link>
      <description>In this note, we&amp;#39;ll come up with GPT and the TRANSFORMER architecture, from scratch.


</description>
      <author> ()</author>
      <guid>https://www.deriveit.org/notes/119</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:03 GMT</pubDate>
    </item>
    <item>
      <title>How to read inference rules</title>
      <link>https://cohost.org/prophet/post/2248211-how-to-read-inferenc</link>
      <description>The notation used is probably one of the largest barriers of entry to type inference papers, but it is rarely explained explicitly, so... I&amp;#39;m going to do just that!

For starters, inference rules are really nothing more than implications. The inference rule

AB(Name)

really just means &amp;quot;if A then B&amp;quot;. These are usually given a name (in this case, creatively, Name) to make it easier to refer to them in the rest of the paper.

Now, even though these are technically just implications, it&amp;#39;s usually not a great idea to read them from top to bottom. Inference rules denote relations, but it usually usually makes more sense to read them as (possibly non-deterministic) functions.
For example, a judgement for typing function application might look like this. (where Γ⊢e:τ means &amp;quot;In a context Γ, the type of an expression e is infered to τ&amp;quot;)

Γ⊢e1  :  τ1→τ2      Γ⊢e2  :  τ1Γ⊢e1(e2)  :  τ2(App)

Naively, one might read this as

&amp;gt; If e1 has type τ1→τ2 in a context Γ and e2 has type τ1 in Γ, then e1(e2) has type τ2 in Γ

but a much better way to read it, that is much closer to an actual implementation, would be

&amp;gt; In order to infer a type for e1(e2) in a context Γ, one first needs to infer a type for e1 with shape τ1→τ2 in Γ. Now e2 also needs to infer to type τ1 in Γ, so that the result (i.e. the type of e1(e2)) is τ2.

Read this way, the inference rule maps very closely onto an actual implementation! Seriously, compare the corresponding pseudocode to that second description

infer Γ (App e1 e2) =
    let (τ1 -&amp;gt; τ2) = infer Γ e1
    let τ3 = infer Γ e2
    unify τ1 τ3
    return τ2


The only major difference between this code (which skips error handling, just like inference rules) and the inference rule is that the fact that the type of e2 needs to be equal to τ1 is explicit in the code (unify τ1 τ3).

Reading off the algorithm like this is possible if the inference rules are syntax directed, i.e. if there is only ever a single rule that might match on a given expression. This is not always the case, so sometimes it&amp;#39;s better to imagine non-deterministically choosing the correct rule to apply, rather than just pattern matching.

And that&amp;#39;s... pretty much all you need to know to read inference rules!

There are a few common conventions in type systems that might be a bit surprising, so let&amp;#39;s go over those as well


ENVIRONMENTS AND EXTENSION

Type inference needs an environment to keep track of the types of variables. This is usually called Γ and extended as Γ,x  :  τ.

For example, this inference rule for (annotated) let bindings checks e2 under the environment Γ, extended with the binding x  :  τ1.

Γ⊢e1  :  τ1      Γ,x  :  τ1⊢e2  :  τ2Γ⊢let&amp;#160;x  :  τ1=e1&amp;#160;in&amp;#160;e2  :  τ2Let

Extracting information from the environment is achieved through &amp;quot;pattern matching&amp;quot; on the environment, for example in this inference rule for variables.

Γ,x  :  τ⊢x  :  τVar


UNIFICATION VARIABLES

Unification variables [https://cohost.org/prophet/post/2220730-if-there-is-one-piec] don&amp;#39;t exist in theoretical type systems, but they still map very directly onto a similar concept. Instead of generating a fresh unification variable, inference rules just &amp;quot;guess&amp;quot; a new type (they&amp;#39;re relations, remember?).

For example, this typing rule for (unannotated) lambdas just pulls the type τ out of thin air.

Γ,x  :  τ⊢e  :  τ1Γ⊢λx→e  :  τ→τ1Lambda


LISTS

Something you will see pretty often in papers by Simon Peyton Jones are lists that are represented by an overline. E.g. the syntax for uncurried function application might be e1(e‾), where e‾ consists of 0 or more expressions.


SKOLEMS

Similarly, skolems don&amp;#39;t exist as a separate concept. Instead, &amp;quot;unbound&amp;quot; type variables are treated as skolems, although these obviously cannot conflict with any other type variables in scope!
In an implementation, this would be achieved by generating a fresh skolem, but in inference rules, this is expressed by the side condition that the type variable should not occur &amp;quot;free in the environment&amp;quot;, written a∉ftv(Γ), where ftv denotes the set of free type variables (= skolems) in Γ.

For example, a rule for let bindings with polymorphic types (that need to be skolemized) might look like this

Γ⊢e1  :  τ1      a‾∉ftv(Γ)      Γ,x  :  ∀a‾.τ1⊢e2  :  τ2Γ⊢let&amp;#160;x  :  ∀a‾.τ1=e1&amp;#160;in&amp;#160;e2  :  τ2


WHERE TO GO FROM HERE

Great, with a little practice, you should be able to read inference rules now! I would recommend you read Practical type inference for higher rank types [https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/putting.pdf], which is a great, relatively beginner friendly paper about type inference that even contains a full implementation at the end! (And despite the name, is not just about higher rank types).</description>
      <author> (https://cohost.org/prophet)</author>
      <guid>https://cohost.org/prophet/post/2248211-how-to-read-inferenc</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:02 GMT</pubDate>
    </item>
    <item>
      <title>Sampling at scale with OpenTelemetry</title>
      <link>https://www.gouthamve.dev/sampling-at-scale-with-opentelemetry/</link>
      <description>Thoughts on different sampling strategies at scale when using OpenTelemetry. With experience running tracing at scale at Grafana Labs.</description>
      <author> ()</author>
      <guid>https://www.gouthamve.dev/sampling-at-scale-with-opentelemetry/</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:02 GMT</pubDate>
    </item>
    <item>
      <title>Hamel’s Blog - Optimizing LLM latency</title>
      <link>https://hamel.dev/notes/llm/03_inference.html</link>
      <description>An exploration of inference tools for open source LLMs focused on latency.</description>
      <author> ()</author>
      <guid>https://hamel.dev/notes/llm/03_inference.html</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:02 GMT</pubDate>
    </item>
    <item>
      <title>Building a BitTorrent client in Elixir</title>
      <link>https://kochika.me/posts/torrent/</link>
      <description>
In this post, we delve headfirst into the BitTorrent protocol, understanding the process of downloading a torrent by building a minimal torrent client from scratch.</description>
      <author> (Mayank)</author>
      <guid>https://kochika.me/posts/torrent/</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:01 GMT</pubDate>
    </item>
    <item>
      <title>The Illustrated Transformer</title>
      <link>https://jalammar.github.io/illustrated-transformer/</link>
      <description>Discussions:
Hacker News (65 points, 4 comments), Reddit r/MachineLearning (29 points, 3 comments)


Translations: Arabic, Chinese (Simplified) 1, Chinese (Simplified) 2, French 1, French 2, Italian, Japanese, Korean, Persian, Russian, Spanish 1, Spanish 2, Vietnamese

Watch: MIT’s Deep Learning State of the Art lecture referencing this post

In the previous post, we looked at Attention – a ubiquitous method in modern deep learning models. Attention is a concept that helped improve the performance of neural machine translation applications. In this post, we will look at The Transformer – a model that uses attention to boost the speed with which these models can be trained. The Transformer outperforms the Google Neural Machine Translation model in specific tasks. The biggest benefit, however, comes from how The Transformer lends itself to parallelization. It is in fact Google Cloud’s recommendation to use The Transformer as a reference model to use their Cloud TPU offering. So let’s try to break the model apart and look at how it functions.

The Transformer was proposed in the paper Attention is All You Need. A TensorFlow implementation of it is available as a part of the Tensor2Tensor package. Harvard’s NLP group created a guide annotating the paper with PyTorch implementation. In this post, we will attempt to oversimplify things a bit and introduce the concepts one by one to hopefully make it easier to understand to people without in-depth knowledge of the subject matter.

2020 Update: I’ve created a “Narrated Transformer” video which is a gentler approach to the topic:




A High-Level Look
Let’s begin by looking at the model as a single black box. In a machine translation application, it would take a sentence in one language, and output its translation in another.


  


</description>
      <author> (Jay Alammar)</author>
      <guid>https://jalammar.github.io/illustrated-transformer/</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:01 GMT</pubDate>
    </item>
    <item>
      <title>GPT-4 Code Interpreter and Pillow</title>
      <link>https://metastable.org/pillow.html</link>
      <description>Getting ChatGPT to draw whether it wants to or not!</description>
      <author> (By Philip Winston |
		
		Thursday, July 27, 2023)</author>
      <guid>https://metastable.org/pillow.html</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:01 GMT</pubDate>
    </item>
    <item>
      <title>Digital Bum: Finding a Home/lessness on the Internet</title>
      <link>https://aartaka.me/blog/digital-bum</link>
      <description>Internet grew out of a non-commercial academic network with free resources for everyone. Can one get back to this dream of free Internet and build a lifestyle out of it? Well yeah I guess so, kinda worked for me.</description>
      <author> (Artyom Bologov)</author>
      <guid>https://aartaka.me/blog/digital-bum</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:01 GMT</pubDate>
    </item>
    <item>
      <title>Defcon: Preventing Overload with Graceful Feature Degradation</title>
      <link>https://www.micahlerner.com/2023/07/23/defcon-preventing-overload-with-graceful-feature-degradation.html</link>
      <description>Defcon: Preventing Overload with Graceful Feature Degradation</description>
      <author> ()</author>
      <guid>https://www.micahlerner.com/2023/07/23/defcon-preventing-overload-with-graceful-feature-degradation.html</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:01 GMT</pubDate>
    </item>
    <item>
      <title>LN 035: The Messy Desktop</title>
      <link>https://alexanderobenauer.com/labnotes/035/</link>
      <description>When I got to college, I learned a lot about computing fairly quickly, before I even stepped into my first computer science course.</description>
      <author> ()</author>
      <guid>https://alexanderobenauer.com/labnotes/035/</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:00 GMT</pubDate>
    </item>
    <item>
      <title>A Lock-Free Vector</title>
      <link>https://ibraheem.ca/posts/a-lock-free-vector/</link>
      <description>Designing a fast, lock-free vector.</description>
      <author> (Ibraheem Ahmed)</author>
      <guid>https://ibraheem.ca/posts/a-lock-free-vector/</guid>
      <pubDate>Sun, 30 Jul 2023 00:03:00 GMT</pubDate>
    </item>
    <item>
      <title>Git says I am adding &amp;#39;^M&amp;#39; but core.autocrlf is true</title>
      <link>https://stackoverflow.com/questions/34729978/git-says-i-am-adding-m-but-core-autocrlf-is-true</link>
      <description>The problem is simple enough. Git is saying I&amp;#39;ve added CR (^M) to a file,

me@myComp MINGW64 /c/workspace/service (develop)
$ git diff --check
engine/src/main/java/someFile.java:18: trailing whites...</description>
      <author> (Captain Man)</author>
      <guid>https://stackoverflow.com/questions/34729978/git-says-i-am-adding-m-but-core-autocrlf-is-true</guid>
      <pubDate>Sat, 29 Jul 2023 22:04:07 GMT</pubDate>
    </item>
    <item>
      <title>If We Want a Shift to Walking, We Need to Prioritize Dignity</title>
      <link>https://streets.mn/2023/07/19/if-we-want-a-shift-to-walking-we-need-to-prioritize-dignity/</link>
      <description>To make walking and rolling a desirable, everyday activity, we need facilities that are compliant, safe and dignified.</description>
      <author> (View all posts by Sean Hayford Oleary →)</author>
      <guid>https://streets.mn/2023/07/19/if-we-want-a-shift-to-walking-we-need-to-prioritize-dignity/</guid>
      <pubDate>Sat, 29 Jul 2023 21:03:30 GMT</pubDate>
    </item>
    <item>
      <title>So you want to build your own open source chatbot… – Mozilla Hacks - the Web developer blog</title>
      <link>https://hacks.mozilla.org/2023/07/so-you-want-to-build-your-own-open-source-chatbot/</link>
      <description>A small team within Mozilla’s innovation group recently undertook a hackathon to build a trustworthy internal chatbot prototype.</description>
      <author> (By
                                        Stephen Hood)</author>
      <guid>https://hacks.mozilla.org/2023/07/so-you-want-to-build-your-own-open-source-chatbot/</guid>
      <pubDate>Sat, 29 Jul 2023 21:03:30 GMT</pubDate>
    </item>
    <item>
      <title>A spectacular superconductor claim is making news. Here’s why experts are doubtful</title>
      <link>https://www.science.org/content/article/spectacular-superconductor-claim-making-news-here-s-why-experts-are-doubtful</link>
      <description>Skepticism abounds for claim that lead-based material perfectly conducts electricity at room temperature and pressure</description>
      <author> (Adrian Cho
			
				mail
			
		
	
		
			Author
		
	
		
			Staff Writer
		
		View more)</author>
      <guid>https://www.science.org/content/article/spectacular-superconductor-claim-making-news-here-s-why-experts-are-doubtful</guid>
      <pubDate>Sat, 29 Jul 2023 16:03:27 GMT</pubDate>
    </item>
    <item>
      <title>It&amp;#39;s There But It Isn&amp;#39;t - EF Shadow Property #shorts</title>
      <link>https://youtube.com/watch?v=FX9fbokvWZQ</link>
      <description>&amp;#128640; Support me on Patreon to access the source code: https://www.patreon.com/milanjovanovicJoin my weekly .NET newsletter:https://www.milanjovanovic.techRead ...</description>
      <author> (Milan Jovanović
  
  
  
    Milan Jovanović
  






    •)</author>
      <guid>https://youtube.com/watch?v=FX9fbokvWZQ</guid>
      <pubDate>Sat, 29 Jul 2023 12:02:12 GMT</pubDate>
    </item>
    <item>
      <title>A Steering Council notice about PEP 703 (Making the Global Interpreter Lock Optional in CPython)</title>
      <link>https://discuss.python.org/t/a-steering-council-notice-about-pep-703-making-the-global-interpreter-lock-optional-in-cpython/30474</link>
      <description>Posting for the whole Steering Council, on the subject of @colesbury’s PEP 703 (Making the Global Interpreter Lock Optional in CPython).  Thank you, everyone, for responding to the poll on the no-GIL proposal. It’s clear that the overall sentiment is positive, both for the general idea and for PEP 703 specifically. The Steering Council is also largely positive on both. We intend to accept PEP 703, although we’re still working on the acceptance details.  As we’ve done a few times in the past, we ...</description>
      <author> (thomas
                (Thomas Wouters))</author>
      <guid>https://discuss.python.org/t/a-steering-council-notice-about-pep-703-making-the-global-interpreter-lock-optional-in-cpython/30474</guid>
      <pubDate>Sat, 29 Jul 2023 09:03:50 GMT</pubDate>
    </item>
    <item>
      <title>ASP.NET Community Standup - Migrate from framework to core with System.Web.Adapters</title>
      <link>https://youtube.com/watch?v=l_PKg_VozFc</link>
      <description>Taylor Southwick shares some tips and tricks for incremental framework to core migrations with the System.Web adapters. He&amp;#39;ll go over some common scenarios h...</description>
      <author> (notJust․dev
  
  
  
    notJust․dev
  






    •)</author>
      <guid>https://youtube.com/watch?v=l_PKg_VozFc</guid>
      <pubDate>Sat, 29 Jul 2023 08:04:00 GMT</pubDate>
    </item>
    <item>
      <title>&amp;#128104;‍&amp;#128187; &amp;#120279;&amp;#120316;&amp;#120321;&amp;#120289;&amp;#120306;&amp;#120321; &amp;#120278;&amp;#120316;&amp;#120305;&amp;#120310;&amp;#120315;&amp;#120308; &amp;#120278;&amp;#120316;&amp;#120315;&amp;#120323;&amp;#120306;&amp;#120315;&amp;#120321;&amp;#120310;&amp;#120316;&amp;#120315;&amp;#120320; &amp;#120307;&amp;#120316;&amp;#120319; &amp;#120278;&amp;#120313;&amp;#120306;&amp;#120302;&amp;#120315;&amp;#120306;&amp;#120319; &amp;#120278;&amp;#120316;&amp;#120305;&amp;#120306;!</title>
      <link>https://dev.to/ahmedshahjr/-1876</link>
      <description>&amp;#128104;‍&amp;#128187; &amp;#120279;&amp;#120316;&amp;#120321;&amp;#120289;&amp;#120306;&amp;#120321; &amp;#120278;&amp;#120316;&amp;#120305;&amp;#120310;&amp;#120315;&amp;#120308; &amp;#120278;&amp;#120316;&amp;#120315;&amp;#120323;&amp;#120306;&amp;#120315;&amp;#120321;&amp;#120310;&amp;#120316;&amp;#120315;&amp;#120320; &amp;#120307;&amp;#120316;&amp;#120319; &amp;#120278;&amp;#120313;&amp;#120306;&amp;#120302;&amp;#120315;&amp;#120306;&amp;#120319; &amp;#120278;&amp;#120316;&amp;#120305;&amp;#120306;! I highly recommend following Microsoft&amp;#39;s official C#...</description>
      <author> ()</author>
      <guid>https://dev.to/ahmedshahjr/-1876</guid>
      <pubDate>Sat, 29 Jul 2023 08:03:58 GMT</pubDate>
    </item>
    <item>
      <title>How to Access Configuration During Application&amp;#39;s Startup in .NET</title>
      <link>https://code-maze.com/dotnet-access-configuration-during-applications-startup/</link>
      <description>In this article, we will talk about how to Access Configuration During Application&amp;#39;s Startup in .NET, by retrieving different services.</description>
      <author> (Code Maze)</author>
      <guid>https://code-maze.com/dotnet-access-configuration-during-applications-startup/</guid>
      <pubDate>Sat, 29 Jul 2023 07:02:20 GMT</pubDate>
    </item>
    <item>
      <title>The U.K. Government Is Very Close To Eroding Encryption Worldwide&amp;#160;</title>
      <link>https://www.eff.org/deeplinks/2023/07/uk-government-very-close-eroding-encryption-worldwide</link>
      <description>The U.K. Parliament is pushing ahead with a sprawling internet regulation bill that will, among other things, undermine the privacy of people around the world. The Online Safety Bill, now at the final stage before passage in the House of Lords, gives the British government the ability to force backdoors into messaging services, which will destroy end-to-end encryption. No amendments have been accepted that would mitigate the bill’s most dangerous elements. If it passes, the Online Safety Bill will be a huge step backwards for global privacy, and democracy itself.</description>
      <author> (Joe Mullin)</author>
      <guid>https://www.eff.org/deeplinks/2023/07/uk-government-very-close-eroding-encryption-worldwide</guid>
      <pubDate>Sat, 29 Jul 2023 05:03:43 GMT</pubDate>
    </item>
    <item>
      <title>No-GIL mode coming for Python</title>
      <link>https://lwn.net/Articles/939568/</link>
      <description>The Python Steering Council has announced
its intent to accept PEP
703 (Making the Global Interpreter Lock Optional in CPython), with
initial support possibly showing up in the 3.13 release.  There are still
some details to work out, though.</description>
      <author> ([Posted July 28, 2023 by corbet])</author>
      <guid>https://lwn.net/Articles/939568/</guid>
      <pubDate>Sat, 29 Jul 2023 04:03:16 GMT</pubDate>
    </item>
    <item>
      <title>Why Clean Architecture Is Great For Complex Projects</title>
      <link>https://www.milanjovanovic.tech/blog/why-clean-architecture-is-great-for-complex-projects</link>
      <description> I&amp;#39;ve been using Clean Architecture for 6+ years on large scale applications serving thousands of customers and millions of requests. Today I want to talk about why it&amp;#39;s a great approach for structuring your applications.
I&amp;#39;m aware that Clean Architecture isn&amp;#39;t a silver bullet, so I will discuss what types of systems can benefit from this architecture.
Clean architecture isn&amp;#39;t revolutionary.
But it&amp;#39;s prescriptive about how you should structure the code.
It&amp;#39;s an evolution of the layered architecture, focusing on the core domain and the direction of dependencies. All dependencies should point inwards, applying dependency inversion.
Here are some of the promises of Clean Architecture: - Maintainability - Testability - Loose coupling - Separation of concerns
It&amp;#39;s independent of UI, databases, or external services - but you also need to be pragmatic (more on this later).
Let&amp;#39;s dive in.</description>
      <author> (Milan Jovanović)</author>
      <guid>https://www.milanjovanovic.tech/blog/why-clean-architecture-is-great-for-complex-projects</guid>
      <pubDate>Sat, 29 Jul 2023 01:02:57 GMT</pubDate>
    </item>
  </channel>
</rss>