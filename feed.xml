<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>How slow is MediatR really?</title>
      <link>https://www.youtube.com/watch?v=baiH3f_TFfY</link>
      <description>Check out my courses: https://nickchapsas.comBecome a Patreon and get source code access: https://www.patreon.com/nickchapsasHello everybody I&amp;#39;m Nick and in ...</description>
      <author> (Nick Chapsas
  
  
  
    Nick Chapsas
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=baiH3f_TFfY</guid>
      <pubDate>Mon, 24 Jan 2022 13:02:12 GMT</pubDate>
    </item>
    <item>
      <title>Alexandre N&amp;#233;d&amp;#233;lec - Week 3, 2022 - Tips I learned this week</title>
      <link>https://www.techwatching.dev/posts/w03-2022-tips-learned-this-week</link>
      <description>.NET 6 introduced a new way to build a .NET application using the new WebApplication and WebApplicationBuilder classes. One thing I like about it is how configuration is handled. Instead of using the ConfigureAppConfiguration method to add a new configuration source, you can directly use the Configuration property on the WebApplicationBuilder instance. You can see an example of this change on this screenshot of the ASP.NET Core documentation:</description>
      <author> ()</author>
      <guid>https://www.techwatching.dev/posts/w03-2022-tips-learned-this-week</guid>
      <pubDate>Mon, 24 Jan 2022 13:02:11 GMT</pubDate>
    </item>
    <item>
      <title>This Post Was Written by GitHub Copilot</title>
      <link>https://flower.codes/2021/07/08/this-post-was-written-by-github-copilot</link>
      <description>Impostor.</description>
      <author> ()</author>
      <guid>https://flower.codes/2021/07/08/this-post-was-written-by-github-copilot</guid>
      <pubDate>Mon, 24 Jan 2022 13:02:10 GMT</pubDate>
    </item>
    <item>
      <title>Simple WebSocket client and server application using .NET</title>
      <link>https://www.tabsoverspaces.com/233883-simple-websocket-client-and-server-application-using-dotnet</link>
      <description>24 Jan 2022
	
	 2 mins
	
	 .NET, ASP.NET Core, WebSocket</description>
      <author> ()</author>
      <guid>https://www.tabsoverspaces.com/233883-simple-websocket-client-and-server-application-using-dotnet</guid>
      <pubDate>Mon, 24 Jan 2022 11:02:42 GMT</pubDate>
    </item>
    <item>
      <title>I accidentally used YAML.parse instead of JSON.parse, and it... worked?</title>
      <link>https://rohitpaulk.com/articles/accidentally-used-yaml-instead-of-json</link>
      <description>How I stumbled upon the fact that YAML is a superset of JSON.
</description>
      <author> ()</author>
      <guid>https://rohitpaulk.com/articles/accidentally-used-yaml-instead-of-json</guid>
      <pubDate>Mon, 24 Jan 2022 11:02:41 GMT</pubDate>
    </item>
    <item>
      <title>Top-Level Statements in C# - Code Maze</title>
      <link>https://code-maze.com/csharp-top-level-statements/</link>
      <description>If you want to know more about top-level statements in c# and learn to write a program without writing classes, this is the article for you!</description>
      <author> (()x)</author>
      <guid>https://code-maze.com/csharp-top-level-statements/</guid>
      <pubDate>Mon, 24 Jan 2022 09:01:46 GMT</pubDate>
    </item>
    <item>
      <title>Microsoft Feature Management - Feature Flags in ASP.NET Core C# - Detailed Guide | Pro Code Guide</title>
      <link>https://procodeguide.com/programming/feature-flags-in-aspnet-core/</link>
      <description>We will be implementing Microsoft Feature Management i.e. feature flags in ASP.NET Core C# application but all this is applicable to other types of .NET C#</description>
      <author> ()</author>
      <guid>https://procodeguide.com/programming/feature-flags-in-aspnet-core/</guid>
      <pubDate>Mon, 24 Jan 2022 09:01:43 GMT</pubDate>
    </item>
    <item>
      <title>290: The .NET MAUI Episode</title>
      <link>https://www.mergeconflict.fm/290</link>
      <description>We answer all of your questions! Which seem to mostly be about .NET MAUI :)</description>
      <author> (soundbite.fm)</author>
      <guid>https://www.mergeconflict.fm/290</guid>
      <pubDate>Mon, 24 Jan 2022 09:01:43 GMT</pubDate>
    </item>
    <item>
      <title>[Fixed Ending] Episode 90 - Clean Architecture and Subcutaneous Testing with Matthew Jeorrett</title>
      <link>https://dotnetcore.show/episode-90-fixed-ending-clean-architecture-and-subcutaneous-testing-with-matthew-jeorrett/</link>
      <description>In this episode of The .NET Core Podcast we talked with Matthew Jeorrett about what the Clean Architecture, Subcutaneous Testing, and how he utilitsed both to build web applications in a clean, vertical, extensible manner.</description>
      <author> (RJJ Software)</author>
      <guid>https://dotnetcore.show/episode-90-fixed-ending-clean-architecture-and-subcutaneous-testing-with-matthew-jeorrett/</guid>
      <pubDate>Mon, 24 Jan 2022 09:01:43 GMT</pubDate>
    </item>
    <item>
      <title>Fundamentals of Garbage Collection</title>
      <link>https://www.telerik.com/blogs/fundamentals-garbage-collection</link>
      <description>Let’s talk about a core computer science concept: garbage collection—it’s key to managing memory for many languages. How does your preferred language handle it?</description>
      <author> ()</author>
      <guid>https://www.telerik.com/blogs/fundamentals-garbage-collection</guid>
      <pubDate>Mon, 24 Jan 2022 06:02:15 GMT</pubDate>
    </item>
    <item>
      <title>Amazon.com: Out of the Woods of Oregon Slice it Right! Board with Bread &amp;amp; Bagel Slicer (Maple Slicer): Home &amp;amp; Kitchen</title>
      <link>https://www.amazon.com/Out-Woods-Oregon-Slice-Slicer/dp/B0893PKY1N?tag=linksfordevs-20&amp;lfd=202201</link>
      <description>Online shopping for Kitchen Knives &amp;amp; Accessories from a great selection of Cutlery Sets, Specialty Knives, Sharpeners, Cutting Boards, &amp;amp; more at everyday low prices.</description>
      <author> (Brand: Out of the Woods of Oregon)</author>
      <guid>https://www.amazon.com/Out-Woods-Oregon-Slice-Slicer/dp/B0893PKY1N?tag=linksfordevs-20&amp;lfd=202201</guid>
      <pubDate>Mon, 24 Jan 2022 06:02:15 GMT</pubDate>
    </item>
    <item>
      <title>grouping Arrays via `.groupBy()` and `.groupByToMap()`</title>
      <link>https://2ality.com/2022/01/array-grouping.html</link>
      <description>This blog post describes the ECMAScript proposal “Array grouping” by Justin Ridgewell.</description>
      <author> ()</author>
      <guid>https://2ality.com/2022/01/array-grouping.html</guid>
      <pubDate>Mon, 24 Jan 2022 06:02:14 GMT</pubDate>
    </item>
    <item>
      <title>Announcing TypeScript 4.6 Beta</title>
      <link>https://devblogs.microsoft.com/typescript/announcing-typescript-4-6-beta/</link>
      <description>Today we are excited to announce the beta release of TypeScript 4.6! To get started using the beta, you can get it&amp;#160;through NuGet, or use npm with the following command: npm install typescript@beta You can also get editor support by Downloading for Visual Studio 2019/2017 Following directions for&amp;#160;Visual Studio Code&amp;#160;and&amp;#160;Sublime Text 3.</description>
      <author> (Daniel Rosenwasser)</author>
      <guid>https://devblogs.microsoft.com/typescript/announcing-typescript-4-6-beta/</guid>
      <pubDate>Mon, 24 Jan 2022 06:02:13 GMT</pubDate>
    </item>
    <item>
      <title>Debugging Compatibility in Edge</title>
      <link>https://textslashplain.com/2022/01/20/debugging-compatibility-in-edge/</link>
      <description>Background By moving from our old codebase to Chromium, the Microsoft Edge team significantly modernized our codebase and improved our compatibility with websites. As we now share the vast majority…</description>
      <author> (Published by ericlaw)</author>
      <guid>https://textslashplain.com/2022/01/20/debugging-compatibility-in-edge/</guid>
      <pubDate>Mon, 24 Jan 2022 06:02:13 GMT</pubDate>
    </item>
    <item>
      <title>Using games engines for work and profit! | Meetup</title>
      <link>https://www.meetup.com/Sydney-Alt-Net/events/282399701/</link>
      <description>Tue, 25 Jan, 7:00 pm AEDT: ...or something along those lines &amp;#128519;

Now that games engines are ridiculously over powered, wouldn&amp;#39;t it be great if we could somehow find ways to incorporate them into our </description>
      <author> ()</author>
      <guid>https://www.meetup.com/Sydney-Alt-Net/events/282399701/</guid>
      <pubDate>Mon, 24 Jan 2022 05:03:48 GMT</pubDate>
    </item>
    <item>
      <title>Azure Functions consumption plan naming</title>
      <link>https://dotnetthoughts.net/azure-functions-consumption-plan-naming/</link>
      <description>This post is about how to follow naming conventions for Azure Function consumption plans. Unlike Azure App Services, when we create Azure Functions with consumption plan Azure will create a plan name which you can’t modify. If you’re following certain naming conventions it will be different from what you’re following. Here is an example.</description>
      <author> (Anuraj)</author>
      <guid>https://dotnetthoughts.net/azure-functions-consumption-plan-naming/</guid>
      <pubDate>Mon, 24 Jan 2022 05:03:48 GMT</pubDate>
    </item>
    <item>
      <title>Implement hash and HMAC stream one shots by vcsjones &amp;#183; Pull Request #63757 &amp;#183; dotnet/runtime</title>
      <link>https://github.com/dotnet/runtime/pull/63757</link>
      <description>This implements hashing and HMAC statics for streams. Additionally,
&amp;amp;quot;LiteHmac&amp;amp;quot; and &amp;amp;quot;LiteHash&amp;amp;quot; were introduced. The existing HMAC and hash
provider functionality do some bookkeep...</description>
      <author> (dotnet)</author>
      <guid>https://github.com/dotnet/runtime/pull/63757</guid>
      <pubDate>Mon, 24 Jan 2022 04:01:48 GMT</pubDate>
    </item>
    <item>
      <title>Piped</title>
      <link>https://youtube.censors.us/YQ_xWvX1n9g</link>
      <description>An alternative privacy-friendly YouTube frontend which is efficient by design.</description>
      <author> ()</author>
      <guid>https://youtube.censors.us/YQ_xWvX1n9g</guid>
      <pubDate>Mon, 24 Jan 2022 00:01:46 GMT</pubDate>
    </item>
    <item>
      <title>Customizing web search</title>
      <link>https://notes.npilk.com/custom-search</link>
      <description>I use a simple Cloudflare Worker script to automatically redirect my search queries based on keywords I&amp;#39;ve chosen.</description>
      <author> ()</author>
      <guid>https://notes.npilk.com/custom-search</guid>
      <pubDate>Sun, 23 Jan 2022 23:03:08 GMT</pubDate>
    </item>
    <item>
      <title>Sponsor @ErikEJ on GitHub Sponsors</title>
      <link>https://github.com/sponsors/ErikEJ</link>
      <description>.NET and Data Development guru, Entity Framework expert, Microsoft MVP since 2009, .NET Foundation member</description>
      <author> ()</author>
      <guid>https://github.com/sponsors/ErikEJ</guid>
      <pubDate>Sun, 23 Jan 2022 23:03:08 GMT</pubDate>
    </item>
    <item>
      <title>Why I&amp;#39;m comfortable publishing foolishness</title>
      <link>https://yakkomajuri.github.io/blog/publishing-foolishness</link>
      <description>When I started, I was very insecure.</description>
      <author> ()</author>
      <guid>https://yakkomajuri.github.io/blog/publishing-foolishness</guid>
      <pubDate>Sun, 23 Jan 2022 23:03:08 GMT</pubDate>
    </item>
    <item>
      <title>On decoupled loaders</title>
      <link>https://erock.io/2022/01/21/on-decoupled-loaders.html</link>
      <description>A common interface for loading states</description>
      <author> ()</author>
      <guid>https://erock.io/2022/01/21/on-decoupled-loaders.html</guid>
      <pubDate>Sun, 23 Jan 2022 23:03:08 GMT</pubDate>
    </item>
    <item>
      <title>In defense of complicated programming languages</title>
      <link>https://viralinstruction.com/posts/defense/</link>
      <description>Written 2022-01-23</description>
      <author> ()</author>
      <guid>https://viralinstruction.com/posts/defense/</guid>
      <pubDate>Sun, 23 Jan 2022 23:03:08 GMT</pubDate>
    </item>
    <item>
      <title>Surgical programming</title>
      <link>https://macoy.me/blog/programming/SurgicalProgramming</link>
      <description>I have been relatively busy lately due to unpacking all my things from my cross-country move. Some of my hobbies have been receiving more time. However, don&amp;#39;t worry, Cakelisp and GameLib development still continues.</description>
      <author> (By Macoy Madson. Published on January&amp;#160;22,&amp;#160;2022.)</author>
      <guid>https://macoy.me/blog/programming/SurgicalProgramming</guid>
      <pubDate>Sun, 23 Jan 2022 23:03:08 GMT</pubDate>
    </item>
    <item>
      <title>Prototype the UI Before Building an MVP</title>
      <link>https://gashamola.com/2022/01/22/prototype-the-ui-before-building-an-mvp.html</link>
      <description>Being a heavy user of software products, I’ll sometimes have an idea of a product I want. After a brief incubation period, I’ll get the urge to build the damn thing. Being a software developer, I always succumb to this urge and invest a lot of time and effort into building at least an MVP of the product. Most of the time, unfortunately, I lose interest in the product just after playing with it for a while. Then, thinking that I didn’t actually want it, I’ll go about burying it in my Side Projects Graveyard. This pattern persisted more than I’m willing to admit. The problem is that users (including us, developers) won’t know what they want until they see it and feel it. Common sense tells us that the solution is to build and iterate on an MVP to find out what users want, right? But building an MVP is not as cheap as it appears to be. Neither is iterating on an MVP. Think about all the technical decisions you must make and the technical debt you must carry. Software is always less flexible than we hoped. Notice also that after investing in building an MVP it’s extremely hard to let it go once you find out users don’t actually want it. So, you tend to spend on it much more than you should. (Perhaps that’s the reason that many bad movies are produced.) If you are spending someone else’s money, you may accept it as a grim fact of life. Otherwise, you may want to consider other options. For several years now, I’m convinced that a better option is to prototype the UI first. Of course, it does not apply to all products. Luckily, it applies to most user-facing products. A UI prototype is as effective as an MVP in finding out what users want. Unlike design mockups, users can both see it and feel it. Most important, developing a UI prototype takes a fraction of the time and cost of developing an equivalent MVP. Large companies and some startups have been doing it for ages. I know it’s nothing new. But, it has been underemployed by most companies I’ve been involved in. In one company I overheard an all too familiar conversation. The lead developer just finished working on a long-awaited feature and showed it to the VP of Product (and a user himself). His response was quick: “This is exactly what I asked you to develop. It’s perfect. But, there’s no way our customers will ever want it in the product.” (The reason being some overlooked organizational considerations.) The developer worked on it for over a week. A UI prototype would have been enough to discover the issue in a few hours. So, to find out what users want, ask them what they want. Next, build a UI prototype of what they said they wanted. Then, iterate on showing them the prototype, asking if it’s indeed what they wanted, and incorporating their feedback in the prototype. Proceed to develop an MVP only when they are excited about the prototype. I still get the urge to build things, by the way. What changed is I no longer rush to build an MVP of any idea that comes to my mind. Instead, I can satisfy my urge by prototyping what I think I want. Consequently, my Side Projects Graveyard stopped growing as much as it used to do.</description>
      <author> ()</author>
      <guid>https://gashamola.com/2022/01/22/prototype-the-ui-before-building-an-mvp.html</guid>
      <pubDate>Sun, 23 Jan 2022 23:03:08 GMT</pubDate>
    </item>
    <item>
      <title>Improving end to end tests reliability</title>
      <link>https://frantic.im/e2e-tests/</link>
      <description>End-to-end tests are not flaky, if you cook them right.</description>
      <author> (Alex Kotliarskyi)</author>
      <guid>https://frantic.im/e2e-tests/</guid>
      <pubDate>Sun, 23 Jan 2022 23:03:08 GMT</pubDate>
    </item>
    <item>
      <title>Charm</title>
      <link>https://charm.sh/</link>
      <description>Charm</description>
      <author> ()</author>
      <guid>https://charm.sh/</guid>
      <pubDate>Sun, 23 Jan 2022 22:01:38 GMT</pubDate>
    </item>
    <item>
      <title>Building A Production Ready Blazor WASM App</title>
      <link>https://www.youtube.com/watch?v=Yi1kGOoeQqc</link>
      <description>You&amp;#39;ve heard of Blazor WASM and you are excited. But how do we make your application production ready?Steve will talk about writing production ready code tha...</description>
      <author> (dotNET
  
  
  
    dotNET
  






    •
  
  
    
      62K views
    
      2 months ago)</author>
      <guid>https://www.youtube.com/watch?v=Yi1kGOoeQqc</guid>
      <pubDate>Sun, 23 Jan 2022 20:01:28 GMT</pubDate>
    </item>
    <item>
      <title>Supply chain attacks are the new big thing</title>
      <link>https://cryptologie.net/article/550/supply-chain-attacks-are-the-new-big-thing/</link>
      <description>Over 90 WordPress themes, plugins backdoored in supply chain attack

(source: bleepingcomputer.com)
A product can be seen as a production line. That&amp;#39;s what The Phoenix Project novel argues. It makes sense to me. Things gets assembled and passed around, work stations can become bottlenecks, and at the end of the line you deliver the product to the user. In that production line, pieces come from yo ...</description>
      <author> (david wong)</author>
      <guid>https://cryptologie.net/article/550/supply-chain-attacks-are-the-new-big-thing/</guid>
      <pubDate>Sun, 23 Jan 2022 19:01:30 GMT</pubDate>
    </item>
    <item>
      <title>Why skyscrapers are so short - Works in Progress</title>
      <link>https://www.worksinprogress.co/issue/why-skyscrapers-are-so-short/</link>
      <description>The height of skyscrapers is limited by physical, economic and regulatory barriers, but we should want to overcome them and build taller. Here&amp;#39;s how we can do it.</description>
      <author> (Ronan Lyons)</author>
      <guid>https://www.worksinprogress.co/issue/why-skyscrapers-are-so-short/</guid>
      <pubDate>Sun, 23 Jan 2022 17:01:38 GMT</pubDate>
    </item>
  </channel>
</rss>