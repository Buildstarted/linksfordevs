<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>What is Locking and How to Use a Locking Mechanism in C#</title>
      <link>https://code-maze.com/csharp-locking-mechanism/</link>
      <description>In this article, we will discuss the locking mechanism in C#. Including exclusive and non-exclusive locking mechanisms.</description>
      <author> (Code Maze)</author>
      <guid>https://code-maze.com/csharp-locking-mechanism/</guid>
      <pubDate>Mon, 31 Jul 2023 08:35:56 GMT</pubDate>
    </item>
    <item>
      <title>Introduction of Auth0 Templates for .NET </title>
      <link>https://www.infoq.com/news/2023/07/intro-of-auth0-net/</link>
      <description>Auth0 Templates for .NET offers pre-built project templates with integrated Auth0 support for authentication and authorization. The development process is simplified, enabling the creation of Auth0-integrated .NET projects through familiar approaches from built-in templates. The project is open-source.</description>
      <author> (Robert Krzaczyński
                
            
            
        Software EngineerFollow)</author>
      <guid>https://www.infoq.com/news/2023/07/intro-of-auth0-net/</guid>
      <pubDate>Mon, 31 Jul 2023 08:35:56 GMT</pubDate>
    </item>
    <item>
      <title>369: Scanning real world objects into ready-to-use 3D models with RealityKit</title>
      <link>https://www.mergeconflict.fm/369</link>
      <description>We are diving back into RealityKit which got some nice updates and potentially some visionOS optimizations as well as we start to scan real world objects and turn them into digital goods! </description>
      <author> (soundbite.fm)</author>
      <guid>https://www.mergeconflict.fm/369</guid>
      <pubDate>Mon, 31 Jul 2023 08:35:56 GMT</pubDate>
    </item>
    <item>
      <title>Scanning real world objects into ready-to-use 3D models with RealityKit | Merge Conflict ep. 369</title>
      <link>https://youtube.com/watch?v=t2yeoDT-pBI</link>
      <description>We are diving back into RealityKit which got some nice updates and potentially some visionOS optimizations as well as we start to scan real world objects and...</description>
      <author> (AI TechXplorer
  
  
  
    AI TechXplorer
  






    •)</author>
      <guid>https://youtube.com/watch?v=t2yeoDT-pBI</guid>
      <pubDate>Mon, 31 Jul 2023 08:03:04 GMT</pubDate>
    </item>
    <item>
      <title>Happy 30th Birthday Windows Server!</title>
      <link>https://techcommunity.microsoft.com/t5/itops-talk-blog/happy-30th-birthday-windows-server/ba-p/3886101</link>
      <description>Stroll down memory lane and celebrate 30 years of Windows Server innovation
</description>
      <author> (https://techcommunity.microsoft.com/t5/user/viewprofilepage/user-id/170596)</author>
      <guid>https://techcommunity.microsoft.com/t5/itops-talk-blog/happy-30th-birthday-windows-server/ba-p/3886101</guid>
      <pubDate>Mon, 31 Jul 2023 06:02:15 GMT</pubDate>
    </item>
    <item>
      <title>How to Use TypeScript Generics with Functional React Components</title>
      <link>https://www.freecodecamp.org/news/typescript-generics-with-functional-react-components/</link>
      <description>In this article, we will explore the powerful synergy between TypeScript generics and functional React components. Generics allow you to define flexible components that can adapt to different data structures and enforce type safety throughout your codebase. By leveraging Generics in functional components, you can create highly reusable and adaptable</description>
      <author> (Olasunkanmi Balogun)</author>
      <guid>https://www.freecodecamp.org/news/typescript-generics-with-functional-react-components/</guid>
      <pubDate>Mon, 31 Jul 2023 06:02:11 GMT</pubDate>
    </item>
    <item>
      <title>A Git Query Language written in Rust</title>
      <link>https://www.codeproject.com/Tips/5365674/A-Git-Query-Language-written-in-Rust</link>
      <description>Introduce GQL (A Git Query Language) to perform SQL like queries on .git files</description>
      <author> (AmrDeveloper)</author>
      <guid>https://www.codeproject.com/Tips/5365674/A-Git-Query-Language-written-in-Rust</guid>
      <pubDate>Mon, 31 Jul 2023 06:02:11 GMT</pubDate>
    </item>
    <item>
      <title>New: Improved flexibility when configuring endpoint URLs with the AWS SDKs and tools | Amazon Web Services</title>
      <link>https://aws.amazon.com/blogs/developer/new-improved-flexibility-when-configuring-endpoint-urls-with-the-aws-sdks-and-tools/</link>
      <description>The AWS SDKs and Tools team is excited to announce improvements for configuration of the endpoint URL used for API service requests through the shared SDK configuration file and environment variables with the AWS SDKs and Tools. Previously, you could specify the endpoint URL used for AWS requests by setting the --endpoint-url command line parameter […]</description>
      <author> ()</author>
      <guid>https://aws.amazon.com/blogs/developer/new-improved-flexibility-when-configuring-endpoint-urls-with-the-aws-sdks-and-tools/</guid>
      <pubDate>Mon, 31 Jul 2023 06:02:10 GMT</pubDate>
    </item>
    <item>
      <title>What&amp;#39;s up, Python? The GIL removed, a new compiler, optparse deprecated...</title>
      <link>https://www.bitecode.dev/p/whats-up-python-the-gil-removed-a</link>
      <description>July 2023</description>
      <author> (Bite Code!)</author>
      <guid>https://www.bitecode.dev/p/whats-up-python-the-gil-removed-a</guid>
      <pubDate>Mon, 31 Jul 2023 06:02:10 GMT</pubDate>
    </item>
    <item>
      <title>Stream videos from Azure Blob storage with ASP.NET Core</title>
      <link>https://markheath.net/post/stream-video-blobs-aspnetcore</link>
      <description>Mark Heath&amp;#39;s Development Blog</description>
      <author> (Copyright &amp;#169; 2023 Mark Heath)</author>
      <guid>https://markheath.net/post/stream-video-blobs-aspnetcore</guid>
      <pubDate>Mon, 31 Jul 2023 06:02:10 GMT</pubDate>
    </item>
    <item>
      <title>Let’s look at Wolfenstein 3D in F#</title>
      <link>https://www.compositional-it.com/news-blog/lets-have-a-look-at-wolfenstein-3d-made-in-f/</link>
      <description>Introduction If you have seen some of my other blog posts you know I always find an excuse to talk about games made in F#, so once I saw James Randall&amp;#39;s talk at fsharpConf about his F# port of Wolfstein 3D I knew I had to talk about it in this blog post. Overview This…</description>
      <author> (By Dragoș-Andrei Ilieș)</author>
      <guid>https://www.compositional-it.com/news-blog/lets-have-a-look-at-wolfenstein-3d-made-in-f/</guid>
      <pubDate>Mon, 31 Jul 2023 06:02:10 GMT</pubDate>
    </item>
    <item>
      <title>LINUX AIR COMBAT free flight simulator</title>
      <link>https://askmisterwizard.com/2019/LinuxAirCombat/LinuxAirCombat.htm</link>
      <description>LINUX AIR COMBAT</description>
      <author> ()</author>
      <guid>https://askmisterwizard.com/2019/LinuxAirCombat/LinuxAirCombat.htm</guid>
      <pubDate>Mon, 31 Jul 2023 04:02:21 GMT</pubDate>
    </item>
    <item>
      <title>GitHub - khoj-ai/khoj: An AI personal assistant for your digital brain</title>
      <link>https://github.com/khoj-ai/khoj</link>
      <description>An AI personal assistant for your digital brain. Contribute to khoj-ai/khoj development by creating an account on GitHub.</description>
      <author> (khoj-ai)</author>
      <guid>https://github.com/khoj-ai/khoj</guid>
      <pubDate>Mon, 31 Jul 2023 01:03:15 GMT</pubDate>
    </item>
    <item>
      <title>The San Francisco Compute Company</title>
      <link>https://sfcompute.org/</link>
      <description>The San Francisco Compute Group</description>
      <author> ()</author>
      <guid>https://sfcompute.org/</guid>
      <pubDate>Sun, 30 Jul 2023 22:03:09 GMT</pubDate>
    </item>
    <item>
      <title>JasperFx Software is Open for Business!</title>
      <link>https://jeremydmiller.com/2023/07/30/jasperfx-software-is-open-for-business/</link>
      <description>JasperFx Software is open for business!</description>
      <author> (jeremydmiller)</author>
      <guid>https://jeremydmiller.com/2023/07/30/jasperfx-software-is-open-for-business/</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:32 GMT</pubDate>
    </item>
    <item>
      <title>GPT4 can play chess – David Chudzicki</title>
      <link>https://www.davidchudzicki.com/posts/gpt4-can-play-chess/</link>
      <description>David Chudzicki</description>
      <author> (David Chudzicki)</author>
      <guid>https://www.davidchudzicki.com/posts/gpt4-can-play-chess/</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:22 GMT</pubDate>
    </item>
    <item>
      <title>7 Essential Tech Talks Every Developer Should Watch</title>
      <link>https://blog.mihaisafta.com/posts/talks-every-developer-should-watch/</link>
      <description>Whether you’re a seasoned developer or just starting your coding journey, these seven talks are packed with insights that will challenge and inspire you.
In the rapidly evolving world of software development, it’s easy to get lost in the sea of new languages, frameworks, and techniques. But as I journeyed through my career as a developer, I found that revisiting seminal talks from industry visionaries consistently provides me with fresh perspectives and enduring wisdom.</description>
      <author> (Safta Catalin Mihai)</author>
      <guid>https://blog.mihaisafta.com/posts/talks-every-developer-should-watch/</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:21 GMT</pubDate>
    </item>
    <item>
      <title>Stove and Searle on the rhetorical subversion of common sense</title>
      <link>http://edwardfeser.blogspot.com/2023/07/stove-and-searle-on-rhetorical.html</link>
      <description>One of the stranger aspects of contemporary political and intellectual life is the frequency with which commentators put forward extremely d...</description>
      <author> ()</author>
      <guid>http://edwardfeser.blogspot.com/2023/07/stove-and-searle-on-rhetorical.html</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:21 GMT</pubDate>
    </item>
    <item>
      <title>How to create a Django form in 2mins using Alpine.js</title>
      <link>https://www.photondesigner.com/articles/create-django-form-with-alpine-js</link>
      <description>Create an async Django form simply and neatly with Alpine.js. Boost speed, enhance functionality.</description>
      <author> ()</author>
      <guid>https://www.photondesigner.com/articles/create-django-form-with-alpine-js</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:21 GMT</pubDate>
    </item>
    <item>
      <title>Documentation as Code for Cloud - PlantUML - blog.dornea.nu</title>
      <link>https://blog.dornea.nu/2023/07/30/documentation-as-code-for-cloud-plantuml/</link>
      <description>Basics I’ve become a huge fan of PlantUML even before I came across the concept of “documentation as code” I also code for presentations. So the term presentation as code is also a thing.  and it instantly won me over with its capabilities. I have used it in many different roles (software engineer, security engineer, security architect) extensively to draw diagrams (components, sequences) and mind maps.
Though initially, the general syntax might seem a bit challenging to understand, I believe that with some dedication, the learning curve becomes quite manageable.</description>
      <author> ()</author>
      <guid>https://blog.dornea.nu/2023/07/30/documentation-as-code-for-cloud-plantuml/</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:20 GMT</pubDate>
    </item>
    <item>
      <title>I made a Quotebacks plugin for Marked</title>
      <link>https://johnwhiles.com/posts/marked-quotebacks</link>
      <description>Quotebacks is a combination of a chrome extension which can be used to collect quotes from websites, and a little library which renders those quotes in a particular style. I wanted to use it for this website, but I didn’t want to use the existing rendering code1, so I built a plugin for the popular JavaScript library marked.</description>
      <author> (by Tom Critchlow and Toby Shorin)</author>
      <guid>https://johnwhiles.com/posts/marked-quotebacks</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:20 GMT</pubDate>
    </item>
    <item>
      <title>Finding my balance: An evolved and simplified task management system</title>
      <link>https://pankajpipada.com/posts/2023-07-30-taskmgmt/</link>
      <description>An evolution in work related task management over the years, that has worked for me, and has personally shaped my professional life.</description>
      <author> ()</author>
      <guid>https://pankajpipada.com/posts/2023-07-30-taskmgmt/</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:19 GMT</pubDate>
    </item>
    <item>
      <title>SwiftUI Data Flow 2023</title>
      <link>https://troz.net/post/2023/swiftui-data-flow-2023/</link>
      <description>Various ways to pass data around your SwiftUI apps, after WWDC 2023.</description>
      <author> ()</author>
      <guid>https://troz.net/post/2023/swiftui-data-flow-2023/</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:19 GMT</pubDate>
    </item>
    <item>
      <title>What we really need is a CDN that deploys to ALL edge nodes - Junaid Bhura</title>
      <link>https://junaid.dev/what-we-really-need-is-a-cdn-that-deploys-to-all-edge-nodes/</link>
      <description>What we actually need from CDNs are configurable static deployments of our content to ALL edge nodes!</description>
      <author> (Junaid)</author>
      <guid>https://junaid.dev/what-we-really-need-is-a-cdn-that-deploys-to-all-edge-nodes/</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:18 GMT</pubDate>
    </item>
    <item>
      <title>Blog Writing for Developers</title>
      <link>https://rmoff.net/2023/07/19/blog-writing-for-developers/</link>
      <description></description>
      <author> ()</author>
      <guid>https://rmoff.net/2023/07/19/blog-writing-for-developers/</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:18 GMT</pubDate>
    </item>
    <item>
      <title>Why do consultants invent words?</title>
      <link>https://jevgeni.tarassov.ch/topics/management/consulting-reification/</link>
      <description>I talk about why consultants tend to invent words and how that is used as a marketing gimmick. The results will shock you!</description>
      <author> ()</author>
      <guid>https://jevgeni.tarassov.ch/topics/management/consulting-reification/</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:18 GMT</pubDate>
    </item>
    <item>
      <title>You Need More Constraints</title>
      <link>https://borretti.me/article/you-need-more-constraints</link>
      <description>A checklist of useful SQL constraints.</description>
      <author> (Fernando Borretti)</author>
      <guid>https://borretti.me/article/you-need-more-constraints</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:18 GMT</pubDate>
    </item>
    <item>
      <title>Large Language Models (LLMs) as noise generators</title>
      <link>https://unmonoqueteclea.github.io/2023-07-30-large-language-models-(llms)-as-noise-generators.html</link>
      <description>Allow me to introduce you to Jane Doe, a seasoned Software Engineer
with 10 years of experience. Currently, Jane is exploring various job
opportunities and has come across a few enticing offers that demand a
cover letter as part of the application process.</description>
      <author> (unmonoqueteclea)</author>
      <guid>https://unmonoqueteclea.github.io/2023-07-30-large-language-models-(llms)-as-noise-generators.html</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:17 GMT</pubDate>
    </item>
    <item>
      <title>Emacs 29.1 released</title>
      <link>https://lists.gnu.org/archive/html/emacs-devel/2023-07/msg00879.html</link>
      <description />
      <author> ()</author>
      <guid>https://lists.gnu.org/archive/html/emacs-devel/2023-07/msg00879.html</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:17 GMT</pubDate>
    </item>
    <item>
      <title>The web I want – Manu</title>
      <link>https://manuelmoreale.com/the-web-i-want</link>
      <description>The web I want is powered by passion, not money. The web I want doesn&amp;#39;t need to ask for permission to track me because they know that tracking me is …</description>
      <author> ()</author>
      <guid>https://manuelmoreale.com/the-web-i-want</guid>
      <pubDate>Sun, 30 Jul 2023 21:03:17 GMT</pubDate>
    </item>
    <item>
      <title>New – AWS Public IPv4 Address Charge + Public IP Insights | Amazon Web Services</title>
      <link>https://aws.amazon.com/blogs/aws/new-aws-public-ipv4-address-charge-public-ip-insights/</link>
      <description>We are introducing a new charge for public IPv4 addresses. Effective February 1, 2024 there will be a charge of $0.005 per IP per hour for all public IPv4 addresses, whether attached to a service or not (there is already a charge for public IPv4 addresses you allocate in your account but don’t attach to […]</description>
      <author> ()</author>
      <guid>https://aws.amazon.com/blogs/aws/new-aws-public-ipv4-address-charge-public-ip-insights/</guid>
      <pubDate>Sun, 30 Jul 2023 19:02:10 GMT</pubDate>
    </item>
    <item>
      <title>EffectiveDebugging/SourceCode/StockMarket at master &amp;#183; chrisnas/EffectiveDebugging</title>
      <link>https://github.com/chrisnas/EffectiveDebugging/tree/master/SourceCode/StockMarket</link>
      <description>Contribute to chrisnas/EffectiveDebugging development by creating an account on GitHub.</description>
      <author> (chrisnas)</author>
      <guid>https://github.com/chrisnas/EffectiveDebugging/tree/master/SourceCode/StockMarket</guid>
      <pubDate>Sun, 30 Jul 2023 18:03:10 GMT</pubDate>
    </item>
    <item>
      <title>ffmprovisr</title>
      <link>https://amiaopensource.github.io/ffmprovisr/</link>
      <description>FFmpeg is a powerful tool for manipulating audiovisual files. Unfortunately, it also has a steep learning curve, especially for users unfamiliar with a command line interface. This app helps users through the command generation process so that more people can reap the benefits of FFmpeg.</description>
      <author> ()</author>
      <guid>https://amiaopensource.github.io/ffmprovisr/</guid>
      <pubDate>Sun, 30 Jul 2023 18:03:09 GMT</pubDate>
    </item>
    <item>
      <title>Containers in Azure Container Apps: Simplifying app orchestration with Sidecar and Init Containers</title>
      <link>https://luismts.com/azure-container-apps-sidecar-and-init-containers/</link>
      <description>One of the powerful features of Azure Container Apps is the ability to use sidecar containers and init containers to improve the</description>
      <author> (https://www.facebook.com/luismatosluna/)</author>
      <guid>https://luismts.com/azure-container-apps-sidecar-and-init-containers/</guid>
      <pubDate>Sun, 30 Jul 2023 17:02:00 GMT</pubDate>
    </item>
    <item>
      <title>Emacs 29.1 Released</title>
      <link>https://emacsredux.com/blog/2023/07/30/emacs-29-1-released/</link>
      <description>Today is a great day for Emacs - Emacs 29.1 has just been released1! Every Emacs release is special, but I haven’t been so excited about a new version of Emacs in ages. Why so? Reason #1 - pure GTK front-end (a.k.a. pgtk). This also means that now Emacs supports natively Wayland. Which in tern means that it’s easier than ever to run Emacs in Windows’s WSL. This is huge! Reason #2 - built-in support for the massively popular Language Server Protocol via eglot. eglot has existed for a while, but it’s nice to see it bundled with Emacs going forward. This will certainly make Emacs better positioned to complete with “modern” editors like VS Code. Reason #3 - built-in support for TreeSitter. This means that a few years down the road we’ll have many Emacs major modes that are much faster, robust and feature-rich. It’s infinitely easier to built a major mode using a real parser instead of using regular expressions. Lots of built-in modes have already been updated to have a version using TreeSitter internally. Frankly, I can’t think of a bigger improvement in Emacs in the almost 20 years I’ve been an Emacs user. Exciting times ahead! You can read all about the new release here. I’ll likely write a few articles about some of the new features in the weeks and months to come. In Emacs We Trust! M-x Forever! P.S. Feel free to share in the comments what are you most excited about. You can read the official release announcement here.&amp;#160;↩</description>
      <author> (Bozhidar Batsov)</author>
      <guid>https://emacsredux.com/blog/2023/07/30/emacs-29-1-released/</guid>
      <pubDate>Sun, 30 Jul 2023 17:01:58 GMT</pubDate>
    </item>
    <item>
      <title>Wikifunctions</title>
      <link>https://www.wikifunctions.org/wiki/Wikifunctions:Main_Page</link>
      <description></description>
      <author> ()</author>
      <guid>https://www.wikifunctions.org/wiki/Wikifunctions:Main_Page</guid>
      <pubDate>Sun, 30 Jul 2023 17:01:58 GMT</pubDate>
    </item>
    <item>
      <title>Elevate Your .NET Testing Strategy #2: InMemoryDatabase</title>
      <link>https://goatreview.com/dotnet-testing-inmemorydatabase-for-component-tests/</link>
      <description>The development environment in C#/.NET offers a myriad of tools that optimize testing efficiency. Among these are the InMemoryDatabase and WebApplicationFactory, both possessing the potential to drastically streamline testing strategies and development processes.

As a sequel to our previous discussion on unit testing in .NET Core, this article aims</description>
      <author> (Pierre Belin)</author>
      <guid>https://goatreview.com/dotnet-testing-inmemorydatabase-for-component-tests/</guid>
      <pubDate>Sun, 30 Jul 2023 16:02:15 GMT</pubDate>
    </item>
    <item>
      <title>Contenedores en Azure Container Apps: Simplificando la orquestaci&amp;#243;n de aplicaciones con Sidecar e Init Containers</title>
      <link>https://luismts.com/es/azure-container-apps-sidecar-e-init-containers/</link>
      <description>Una de las caracter&amp;#237;sticas poderosas de Azure Container Apps es la capacidad de utilizar sidecar containers e init containers para mejorar la</description>
      <author> (https://www.facebook.com/luismatosluna/)</author>
      <guid>https://luismts.com/es/azure-container-apps-sidecar-e-init-containers/</guid>
      <pubDate>Sun, 30 Jul 2023 16:02:14 GMT</pubDate>
    </item>
    <item>
      <title>Understanding Python Data Types | Pro Code Guide</title>
      <link>https://procodeguide.com/python-tutorials/understanding-python-data-types/</link>
      <description>In this article, we will learn about Python data types. In Python, data types are used to define the type of a variable. There are different types of built-in</description>
      <author> ()</author>
      <guid>https://procodeguide.com/python-tutorials/understanding-python-data-types/</guid>
      <pubDate>Sun, 30 Jul 2023 15:02:40 GMT</pubDate>
    </item>
    <item>
      <title>Understanding Python Numeric Data Types | Pro Code Guide</title>
      <link>https://procodeguide.com/python-tutorials/python-numeric-data-types/</link>
      <description>In this article we will learn about Python numeric data types, what are different numeric data types available in Python and how to use those numeric data</description>
      <author> ()</author>
      <guid>https://procodeguide.com/python-tutorials/python-numeric-data-types/</guid>
      <pubDate>Sun, 30 Jul 2023 15:02:40 GMT</pubDate>
    </item>
    <item>
      <title>Migrating An API from Newtonsoft.Json to System.Text.Json</title>
      <link>https://www.andybutland.dev/2023/07/202307migrating-api-from-newtonsoftjson-to-system-text-json.html</link>
      <description>In some recent work with Umbraco I’ve been looking to migrate an API from using the Newtonsoft.Json  serialization library to the newer, Mic...</description>
      <author> (Share)</author>
      <guid>https://www.andybutland.dev/2023/07/202307migrating-api-from-newtonsoftjson-to-system-text-json.html</guid>
      <pubDate>Sun, 30 Jul 2023 15:02:37 GMT</pubDate>
    </item>
    <item>
      <title>Workplace advice for Programmers (Q&amp;amp;A)</title>
      <link>https://youtube.com/watch?v=2V5zRHSN5PE</link>
      <description>Advice for programmers on how to face problems in the workplace.The Clean Coder:Extreme Ownership: Jocko Podcast: Support my Work  &amp;#129309; https://www.patreon.com...</description>
      <author> (@sus-the-engineer
            
          
        
        
        
        1 hour ago)</author>
      <guid>https://youtube.com/watch?v=2V5zRHSN5PE</guid>
      <pubDate>Sun, 30 Jul 2023 13:03:22 GMT</pubDate>
    </item>
    <item>
      <title>The best 5&amp;#160;.NET and ASP.NET courses for eCommerce developers</title>
      <link>https://medium.com/@mwaseemzakir/the-best-5-net-and-asp-net-courses-for-ecommerce-developers-196be4ebd1fb</link>
      <description>To help eCommerce developers with their careers, we reviewed significant training courses and added free resources for ASP.NET development.</description>
      <author> (https://medium.com/@mwaseemzakir)</author>
      <guid>https://medium.com/@mwaseemzakir/the-best-5-net-and-asp-net-courses-for-ecommerce-developers-196be4ebd1fb</guid>
      <pubDate>Sun, 30 Jul 2023 12:02:27 GMT</pubDate>
    </item>
    <item>
      <title>Weird Things You Can Do In C#: True &amp;amp; False Operators #shorts</title>
      <link>https://youtube.com/watch?v=uuSOlTrFLrg</link>
      <description>&amp;#128640; Support me on Patreon to access the source code: https://www.patreon.com/milanjovanovicJoin my weekly .NET newsletter:https://www.milanjovanovic.techRead ...</description>
      <author> (Milan Jovanović
  
  
  
    Milan Jovanović
  






    •)</author>
      <guid>https://youtube.com/watch?v=uuSOlTrFLrg</guid>
      <pubDate>Sun, 30 Jul 2023 12:02:27 GMT</pubDate>
    </item>
    <item>
      <title>Libreboot – GNU Boot</title>
      <link>https://libreboot.org/news/gnuboot.html#gnu-boot-cease-and-desist-email</link>
      <description>Libreboot – GNU Boot</description>
      <author> (Leah Rowe)</author>
      <guid>https://libreboot.org/news/gnuboot.html#gnu-boot-cease-and-desist-email</guid>
      <pubDate>Sun, 30 Jul 2023 12:02:25 GMT</pubDate>
    </item>
    <item>
      <title>Functions are Vectors</title>
      <link>https://thenumb.at/Functions-are-Vectors/</link>
      <description>Conceptualizing functions as infinite-dimensional vectors lets us apply the tools of linear algebra to a vast landscape of new problems, from image and geometry processing to curve fitting, light transport, and machine learning.

Prerequisites: introductory linear algebra, introductory calculus, introductory differential equations.


  Functions as Vectors
    
      Vector Spaces
      Linear Operators
      Diagonalization
      Inner Product Spaces
      The Spectral Theorem
    
  
  Applications
    
      Fourier Series
      Image Compression
      Geometry Processing
      Further Reading
    
  




Functions as Vectors

Vectors are often first introduced as lists of real numbers—i.e. the familiar notation we use for points, directions, and more.



$$ \mathbf{v} = \begin{bmatrix}x\\y\\z\end{bmatrix} $$






You may recall that this representation is only one example of an abstract vector space.
There are many other types of vectors, such as lists of complex numbers, graph cycles, and even magic squares.

However, all of these vector spaces have one thing in common: a finite number of dimensions.
That is, each kind of vector can be represented as a collection of \(N\) numbers, though the definition of “number” varies.

If any \(N\)-dimensional vector is essentially a length-\(N\) list, we could also consider a vector to be a mapping from an index to a value.

\[\begin{align*}
\mathbf{v}_1 &amp;amp;= x\\
\mathbf{v}_2 &amp;amp;= y\\
\mathbf{v}_3 &amp;amp;= z
\end{align*}\ \iff\ \mathbf{v} = \begin{bmatrix}x \\ y \\ z\end{bmatrix}\]

What does this perspective hint at as we increase the number of dimensions?




    Dimensions
    




In higher dimensions, vectors start to look more like functions!

Countably Infinite Indices

Of course, a finite-length vector only specifies a value at a limited number of indices.
Could we instead define a vector that contains infinitely many values?

Writing down a vector representing a function on the natural numbers (\(\mathbb{N}\))—or any other countably infinite domain—is straightforward: just extend the list indefinitely.



$$ \begin{align*}\mathbf{v}_1 &amp;amp;= 1\\\mathbf{v}_2 &amp;amp;= 2\\ &amp;amp;\vdots \\ \mathbf{v}_i &amp;amp;= i\end{align*}\ \iff\ \mathbf{v} = \begin{bmatrix}1 \\ 2 \\ 3 \\ \vdots \end{bmatrix} $$






This vector could represent the function \(f(x) = x\), where \(x \in \mathbb{N}\).1

Uncountably Infinite Indices

Many interesting functions are defined on the real numbers (\(\mathbb{R}\)), so may not be representable as a countably infinite vector.
Therefore, we will have to make a larger conceptual leap: not only will our set of indices be infinite, it will be uncountably infinite.

That means we can’t write down vectors as lists at all—it is impossible to assign an integer index to each element of an uncountable set.
So, how can we write down a vector mapping a real index to a certain value?

Now, a vector really is just an arbitrary function:



$$ \mathbf{v}_{x} = x^2\ \iff\ \mathbf{v} = \begin{bmatrix} x \mapsto x^2 \end{bmatrix} $$






Precisely defining how and why we can represent functions as infinite-dimensional vectors is the purview of functional analysis.
In this post, we won’t attempt to prove our results in infinite dimensions: we will focus on building intuition via analogies to finite-dimensional linear algebra.



Vector Spaces


  Review: Abstract vector spaces | Chapter 16, Essence of linear algebra.


Formally, a vector space is defined by choosing a set of vectors \(\mathcal{V}\), a scalar field \(\mathbb{F}\), and a zero vector \(\mathbf{0}\).
The field \(\mathbb{F}\) is often the real numbers (\(\mathbb{R}\)), complex numbers (\(\mathbb{C}\)), or a finite field such as the integers modulo a prime (\(\mathbb{Z}_p\)).

Additionally, we must specify how to add two vectors and how to multiply a vector by a scalar.

\[\begin{align*}
(+)\ &amp;amp;:\ \mathcal{V}\times\mathcal{V}\mapsto\mathcal{V}\\
(\cdot)\ &amp;amp;:\ \mathbb{F}\times\mathcal{V} \mapsto \mathcal{V}
\end{align*}\]

To describe a vector space, our definitions must entail several vector space axioms.

A Functional Vector Space

In the following sections, we’ll work with the vector space of real functions.
To avoid ambiguity, square brackets are used to denote function application.


  The scalar field \(\mathbb{F}\) is the real numbers \(\mathbb{R}\).
  The set of vectors \(\mathcal{V}\) contains functions from \(\mathbb{R}\) to \(\mathbb{R}\).2
  \(\mathbf{0}\) is the zero function, i.e. \(\mathbf{0}[x] = 0\).


Adding functions corresponds to applying the functions separately and summing the results.


$$ (f + g)[x] = f[x] + g[x] $$






This definition generalizes the typical element-wise addition rule—it’s like adding the two values at each index.

\[f+g = \begin{bmatrix}f_1 + g_1 \\ f_2 + g_2 \\ \vdots \end{bmatrix}\]

Multiplying a function by a scalar corresponds to applying the function and scaling the result.



$$ (\alpha f)[x] = \alpha f[x] $$






This rule similarly generalizes element-wise multiplication—it’s like scaling the value at each index.

\[\alpha f = \begin{bmatrix}\alpha f_1 \\ \alpha f_2 \\ \vdots \end{bmatrix}\]

Proofs

Given these definitions, we can now prove all necessary vector space axioms.
We will illustrate the analog of each property in \(\mathbb{R}^2\), the familiar vector space of two-dimensional arrows.


  
    Vector Addition is Commutative
  
  
  
For all vectors $$\mathbf{u}, \mathbf{v} \in \mathcal{V}$$:



$$\mathbf{u} + \mathbf{v} = \mathbf{v} + \mathbf{u}$$






Since real addition is commutative, this property follows directly from our definition of vector addition:

$$\begin{align*}
(f + g)[x] &amp;amp;= f[x] + g[x]\\
&amp;amp;= g[x] + f[x]\\
&amp;amp;= (g + f)[x]
\end{align*}$$
  
  



  
    Vector Addition is Associative
  
  
  
For all vectors $$\mathbf{u}, \mathbf{v}, \mathbf{w} \in \mathcal{V}$$:



$$(\mathbf{u} + \mathbf{v}) + \mathbf{w} = \mathbf{u} + (\mathbf{v} + \mathbf{w})$$






This property also follows from our definition of vector addition:

$$\begin{align*}
((f + g) + h)[x] &amp;amp;= (f + g)[x] + h[x]\\
&amp;amp;= f[x] + g[x] + h[x]\\
&amp;amp;= f[x] + (g[x] + h[x])\\
&amp;amp;= f[x] + (g + h)[x]\\
&amp;amp;= (f + (g + h))[x]
\end{align*}$$

  
  



  
    $$\mathbf{0}$$ is an Additive Identity
  
  
  
For all vectors $$\mathbf{u} \in \mathcal{V}$$:



$$\mathbf{0} + \mathbf{u} = \mathbf{u} $$






This one is easy:

$$\begin{align*}
(\mathbf{0} + f)[x] &amp;amp;= \mathbf{0}[x] + f[x]\\
&amp;amp;= 0 + f[x]\\
&amp;amp;= f[x]
\end{align*}$$

  
  



  
    Additive Inverses Exist
  
  
  
For all vectors $$\mathbf{u} \in \mathcal{V}$$, there exists a vector $$-\mathbf{u} \in \mathcal{V}$$ such that:



$$\mathbf{u} + (-\mathbf{u}) = \mathbf{0}$$






Negation is defined as applying $$f$$ and negating the result: $$(-f)[x] = -f[x]$$.
Clearly, $$-f$$ is also in $$\mathcal{V}$$.

$$\begin{align*}
(f + (-f))[x] &amp;amp;= f[x] + (-f)[x]\\
&amp;amp;= f[x] - f[x]\\
&amp;amp;= 0\\
&amp;amp;= \mathbf{0}[x]
\end{align*}$$

  
  



  
    $$1$$ is a Multiplicative Identity
  
  
  
For all vectors $$\mathbf{u} \in \mathcal{V}$$:



$$1\mathbf{u} = \mathbf{u}$$






Note that $$1$$ is specified by the choice of $$\mathbb{F}$$.
In our case, it is simply the real number $$1$$.

$$\begin{align*}
(1 f)[x] &amp;amp;= 1 f[x]\\
&amp;amp;= f[x]
\end{align*}$$

  
  



  
    Scalar Multiplication is Associative
  
  
  
For all vectors $$\mathbf{u} \in \mathcal{V}$$ and scalars $$\alpha, \beta \in \mathbb{F}$$:



$$(\alpha \beta)\mathbf{u} = \alpha(\beta\mathbf{u})$$






This property follows from our definition of scalar multiplication:

$$\begin{align*}
((\alpha\beta) f)[x] &amp;amp;= (\alpha\beta)f[x]\\
&amp;amp;= \alpha(\beta f[x])\\
&amp;amp;= \alpha(\beta f)[x]
\end{align*}$$

  
  



  
    Scalar Multiplication Distributes Over Vector Addition
  
  
  
For all vectors $$\mathbf{u}, \mathbf{v} \in \mathcal{V}$$ and scalars $$\alpha \in \mathbb{F}$$:



$$\alpha(\mathbf{u} + \mathbf{v}) = \alpha\mathbf{u} + \alpha\mathbf{v}$$






Again using our definitions of vector addition and scalar multiplication:

$$\begin{align*}
(\alpha (f + g))[x] &amp;amp;= \alpha(f + g)[x]\\
&amp;amp;= \alpha(f[x] + g[x])\\
&amp;amp;= \alpha f[x] + \alpha g[x]\\
&amp;amp;= (\alpha f)[x] + (\alpha g)[x]\\
&amp;amp;= (\alpha f + \alpha g)[x]
\end{align*}$$

  
  



  
    Scalar Multiplication Distributes Over Scalar Addition
  
  
  
For all vectors $$\mathbf{u} \in \mathcal{V}$$ and scalars $$\alpha, \beta \in \mathbb{F}$$:



 $$(\alpha + \beta)\mathbf{u} = \alpha\mathbf{u} + \beta\mathbf{u}$$






Again using our definitions of vector addition and scalar multiplication:

$$\begin{align*}
((\alpha + \beta)f)[x] &amp;amp;= (\alpha + \beta)f[x]\\
&amp;amp;= \alpha f[x] + \beta f[x] \\
&amp;amp;= (\alpha f)[x] + (\beta f)[x]
\end{align*}$$

  
  


Therefore, we’ve built a vector space of functions!3
It may not be immediately obvious why this result is useful, but bear with us through a few more definitions—we will spend the rest of this post exploring powerful techniques arising from this perspective.

A Standard Basis for Functions


  Review: Linear combinations, span, and basis vectors | Chapter 2, Essence of linear algebra.


Unless specified otherwise, vectors are written down with respect to the standard basis.
In \(\mathbb{R}^2\), the standard basis consists of the two coordinate axes.



$$ \mathbf{e}_1 = \begin{bmatrix}1 \\ 0\end{bmatrix},\,\, \mathbf{e}_2 = \begin{bmatrix}0 \\ 1\end{bmatrix} $$






Hence, vector notation is shorthand for a linear combination of the standard basis vectors.



$$ \mathbf{u} = \begin{bmatrix}\alpha \\ \beta\end{bmatrix} = \alpha\mathbf{e}_1 + \beta\mathbf{e}_2 $$






Above, we represented functions as vectors by assuming each dimension of an infinite-length vector contains the function’s result for that index.
This construction points to a natural generalization of the standard basis.

Just like the coordinate axes, each standard basis function contains a \(1\) at one index and \(0\) everywhere else.
More precisely, for every \(\alpha \in \mathbb{R}\),


\[\mathbf{e}_\alpha[x] = \begin{cases} 1 &amp;amp; \text{if } x = \alpha \\ 0 &amp;amp; \text{otherwise} \end{cases}\]



We can then express any real function \(f\) as a linear combination of these basis functions:

\[\begin{align*} f[x] &amp;amp;= f[\alpha]\mathbf{e}_\alpha[x] \\ &amp;amp;= f[1]\mathbf{e}_1[x] + f[2]\mathbf{e}_2[x] + f[\pi]\mathbf{e}_\pi[x] + \dots \end{align*}\]

If you evaluate this sum at \(x\), you’ll find that all terms are zero—except \(\mathbf{e}_x\), making the result \(f[x]\).



Linear Operators


  Review: Change of basis | Chapter 13, Essence of linear algebra.


Now that we can manipulate functions as vectors, let’s start transferring the tools of linear algebra to the functional perspective.

One ubiquitous operation on finite-dimensional vectors is transforming them with matrices.
A matrix \(\mathbf{A}\) encodes a linear transformation, meaning multiplication preserves linear combinations.

\[\mathbf{A}(\alpha \mathbf{x} + \beta \mathbf{y}) = \alpha \mathbf{A}\mathbf{x} + \beta \mathbf{A}\mathbf{y}\]

Multiplying a vector by a matrix can be intuitively interpreted as defining a new set of coordinate axes from the matrix’s column vectors.
The result is a linear combination of the columns:






\[\mathbf{Ax} = \begin{bmatrix} \vert &amp;amp; \vert &amp;amp; \vert \\ \mathbf{u} &amp;amp; \mathbf{v} &amp;amp; \mathbf{w} \\ \vert &amp;amp; \vert &amp;amp; \vert \end{bmatrix} \begin{bmatrix}x_1 \\ x_2 \\ x_3\end{bmatrix} = x_1\mathbf{u} + x_2\mathbf{v} + x_3\mathbf{w}\]

    


\[\begin{align*}
\mathbf{Ax} &amp;amp;= \begin{bmatrix} \vert &amp;amp; \vert &amp;amp; \vert \\ \mathbf{u} &amp;amp; \mathbf{v} &amp;amp; \mathbf{w} \\ \vert &amp;amp; \vert &amp;amp; \vert \end{bmatrix} \begin{bmatrix}x_1 \\ x_2 \\ x_3\end{bmatrix} \\ &amp;amp;= x_1\mathbf{u} + x_2\mathbf{v} + x_3\mathbf{w}
\end{align*}\]

    







When all vectors can be expressed as a linear combination of \(\mathbf{u}\), \(\mathbf{v}\), and \(\mathbf{w}\), the columns form a basis for the underlying vector space.
Here, the matrix \(\mathbf{A}\) transforms a vector from the \(\mathbf{uvw}\) basis into the standard basis.

Since functions are vectors, we could imagine transforming a function by a matrix.
Such a matrix would be infinite-dimensional, so we will instead call it a linear operator and denote it with \(\mathcal{L}\).



\[\mathcal{L}f = \begin{bmatrix} \vert &amp;amp; \vert &amp;amp; \vert &amp;amp; \\ \mathbf{f} &amp;amp; \mathbf{g} &amp;amp; \mathbf{h} &amp;amp; \cdots \\ \vert &amp;amp; \vert &amp;amp; \vert &amp;amp; \end{bmatrix} \begin{bmatrix}f_1\\ f_2 \\ f_3\\ \vdots\end{bmatrix} = f_1\mathbf{f} + f_2\mathbf{g} + f_3\mathbf{h} + \cdots\]




\[\begin{align*}
\mathcal{L}f &amp;amp;= \begin{bmatrix} \vert &amp;amp; \vert &amp;amp; \vert &amp;amp; \\ \mathbf{f} &amp;amp; \mathbf{g} &amp;amp; \mathbf{h} &amp;amp; \cdots \\ \vert &amp;amp; \vert &amp;amp; \vert &amp;amp; \end{bmatrix} \begin{bmatrix}f_1\\ f_2\\ f_3 \\ \vdots\end{bmatrix} \\ &amp;amp;= f_1\mathbf{f} + f_2\mathbf{g} + f_3\mathbf{h} + \cdots
\end{align*}\]



This visualization isn’t very accurate—we’re dealing with uncountably infinite-dimensional vectors, so we can’t actually write out an operator in matrix form.
Nonetheless, the structure is suggestive: each “column” of the operator describes a new basis function for our functional vector space.
Just like we saw with finite-dimensional vectors, \(\mathcal{L}\) represents a change of basis.

Differentiation


  Review: Derivative formulas through geometry | Chapter 3, Essence of calculus.


So, what’s an example of a linear operator on functions?
You might recall that differentiation is linear:

\[\frac{\partial}{\partial x} \left(\alpha f[x] + \beta g[x]\right) = \alpha\frac{\partial f}{\partial x} + \beta\frac{\partial g}{\partial x}\]

It’s hard to visualize differentiation on general functions, but it’s feasible for the subspace of polynomials, \(\mathcal{P}\).
Let’s take a slight detour to examine this smaller space of functions.

\[\mathcal{P} = \{ p[x] = a + bx + cx^2 + dx^3 + \cdots \}\]

We typically write down polynomials as a sequence of powers, i.e. \(1, x, x^2, x^3\), etc.
All polynomials are linear combinations of the functions \(\mathbf{e}_i[x] = x^i\), so they constitute a countably infinite basis for \(\mathcal{P}\).4

This basis provides a convenient vector notation:



\[\begin{align*} p[x] &amp;amp;= a + bx + cx^2 + dx^3 + \cdots \\ &amp;amp;= a\mathbf{e}_0 + b\mathbf{e}_1 + c \mathbf{e}_2 + d\mathbf{e}_3 + \dots \end{align*}\ \iff\ \mathbf{p} = \begin{bmatrix}a\\ b\\ c\\ d\\ \vdots\end{bmatrix}\]




\[\begin{align*} p[x] &amp;amp;= a + bx + cx^2 + dx^3 + \cdots \\ &amp;amp;= a\mathbf{e}_0 + b\mathbf{e}_1 + c \mathbf{e}_2 + d\mathbf{e}_3 + \dots \\&amp;amp; \iff\ \mathbf{p} = \begin{bmatrix}a\\ b\\ c\\ d\\ \vdots\end{bmatrix} \end{align*}\]



Since differentiation is linear, we’re able to apply the rule \(\frac{\partial}{\partial x} x^n = nx^{n-1}\) to each term.



\[\begin{align*}\frac{\partial}{\partial x}p[x] &amp;amp;= \vphantom{\Bigg\vert}a\frac{\partial}{\partial x}1 + b\frac{\partial}{\partial x}x + c\frac{\partial}{\partial x}x^2 + d\frac{\partial}{\partial x}x^3 + \dots \\ &amp;amp;= b + 2cx + 3dx^2 + \cdots\\ &amp;amp;= b\mathbf{e}_0 + 2c\mathbf{e}_1 + 3d\mathbf{e}_2 + \dots\end{align*}  \ \iff\ \frac{\partial}{\partial x}\mathbf{p} = \begin{bmatrix}b\\ 2c\\ 3d\\ \vdots\end{bmatrix}\]




\[\begin{align*}\frac{\partial}{\partial x}p[x] &amp;amp;= \vphantom{\Bigg\vert}a\frac{\partial}{\partial x}1 + b\frac{\partial}{\partial x}x + c\frac{\partial}{\partial x}x^2\, +\\ &amp;amp; \phantom{=} d\frac{\partial}{\partial x}x^3 + \dots \\ &amp;amp;= b + 2cx + 3dx^2 + \cdots\\ &amp;amp;= b\mathbf{e}_0 + 2c\mathbf{e}_1 + 3d\mathbf{e}_2 + \dots  \\ &amp;amp;\iff\ \frac{\partial}{\partial x}\mathbf{p} = \begin{bmatrix}b\\ 2c\\ 3d\\ \vdots\end{bmatrix}\end{align*}\]



We’ve performed a linear transformation on the coefficients, so we can represent differentiation as a matrix!

\[\frac{\partial}{\partial x}\mathbf{p} = \begin{bmatrix}0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots\\ 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 0 &amp;amp; \cdots\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 3 &amp;amp; \cdots\\ \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots \end{bmatrix}\begin{bmatrix}a\\ b\\ c\\ d\\ \vdots\end{bmatrix} = \begin{bmatrix}b\\ 2c\\ 3d\\ \vdots\end{bmatrix}\]

Each column of the differentiation operator is itself a polynomial, so this matrix represents a change of basis.

\[\frac{\partial}{\partial x} = \begin{bmatrix} \vert &amp;amp; \vert &amp;amp; \vert &amp;amp; \vert &amp;amp; \vert &amp;amp;  \\ 0 &amp;amp; 1 &amp;amp; 2x &amp;amp; 3x^2 &amp;amp; 4x^3 &amp;amp; \cdots \\ \vert &amp;amp; \vert &amp;amp; \vert &amp;amp; \vert &amp;amp; \vert &amp;amp;  \end{bmatrix}\]

As we can see, the differentiation operator simply maps each basis function to its derivative.

This result also applies to the larger space of analytic real functions, which includes polynomials, exponential functions, trigonometric functions, logarithms, and other familiar names.
By definition, an analytic function can be expressed as a Taylor series about \(0\):

\[f[x] = \sum_{n=0}^\infty \frac{f^{(n)}[0]}{n!}x^n = \sum_{n=0}^\infty \alpha_n x^n\]

Which is a linear combination of our polynomial basis functions.
That means a Taylor expansion is essentially a change of basis into the sequence of powers, where our differentiation operator is quite simple.5



Diagonalization


  Review: Eigenvectors and eigenvalues | Chapter 14, Essence of linear algebra.


Matrix decompositions are arguably the crowning achievement of linear algebra.
To get started, let’s review what diagonalization means for a \(3\times3\) real matrix \(\mathbf{A}\).

Eigenvectors

A vector \(\mathbf{u}\) is an eigenvector of the matrix \(\mathbf{A}\) when the following condition holds:



$$ \mathbf{Au} = \lambda \mathbf{u} $$






The eigenvalue \(\lambda\) may be computed by solving the characteristic polynomial of \(\mathbf{A}\).
Eigenvalues may be real or complex.

The matrix \(\mathbf{A}\) is diagonalizable when it admits three linearly independent eigenvectors, each with a corresponding real eigenvalue.
This set of eigenvectors constitutes an eigenbasis for the underlying vector space, indicating that we can express any vector \(\mathbf{x}\) via their linear combination.



$$ \mathbf{x} = \alpha\mathbf{u}_1 + \beta\mathbf{u}_2 + \gamma\mathbf{u}_3 $$






To multiply \(\mathbf{x}\) by \(\mathbf{A}\), we just have to scale each component by its corresponding eigenvalue.



$$ \begin{align*} \mathbf{Ax} &amp;amp;= \alpha\mathbf{A}\mathbf{u}_1 + \beta\mathbf{A}\mathbf{u}_2 + \gamma\mathbf{A}\mathbf{u}_3 \\
&amp;amp;= \alpha\lambda_1\mathbf{u}_1 + \beta\lambda_2\mathbf{u}_2 + \gamma\lambda_3\mathbf{u}_3 \end{align*} $$






Finally, re-combining the eigenvectors expresses the result in the standard basis.



Intuitively, we’ve shown that multiplying by \(\mathbf{A}\) is equivalent to a change of basis, a scaling, and a change back.
That means we can write \(\mathbf{A}\) as the product of an invertible matrix \(\mathbf{U}\) and a diagonal matrix \(\mathbf{\Lambda}\).



\[\begin{align*} \mathbf{A} &amp;amp;= \mathbf{U\Lambda U^{-1}} \\
 &amp;amp;= \begin{bmatrix}\vert &amp;amp; \vert &amp;amp; \vert \\ \mathbf{u}_1 &amp;amp; \mathbf{u}_2 &amp;amp; \mathbf{u}_3 \\ \vert &amp;amp; \vert &amp;amp; \vert \end{bmatrix}
 \begin{bmatrix}\lambda_1 &amp;amp; 0 &amp;amp; 0 \\ 0 &amp;amp; \lambda_2 &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; \lambda_3 \end{bmatrix}
 \begin{bmatrix}\vert &amp;amp; \vert &amp;amp; \vert \\ \mathbf{u}_1 &amp;amp; \mathbf{u}_2 &amp;amp; \mathbf{u}_3 \\ \vert &amp;amp; \vert &amp;amp; \vert \end{bmatrix}^{-1}
\end{align*}\]




\[\begin{align*} \mathbf{A} &amp;amp;= \mathbf{U\Lambda U^{-1}} \\
 &amp;amp;= \begin{bmatrix}\vert &amp;amp; \vert &amp;amp; \vert \\ \mathbf{u}_1 &amp;amp; \mathbf{u}_2 &amp;amp; \mathbf{u}_3 \\ \vert &amp;amp; \vert &amp;amp; \vert \end{bmatrix}
 \\ &amp;amp; \phantom{=} \begin{bmatrix}\lambda_1 &amp;amp; 0 &amp;amp; 0 \\ 0 &amp;amp; \lambda_2 &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; \lambda_3 \end{bmatrix}
 \\ &amp;amp; \phantom{=} \begin{bmatrix}\vert &amp;amp; \vert &amp;amp; \vert \\ \mathbf{u}_1 &amp;amp; \mathbf{u}_2 &amp;amp; \mathbf{u}_3 \\ \vert &amp;amp; \vert &amp;amp; \vert \end{bmatrix}^{-1}
\end{align*}\]



Note that \(\mathbf{U}\) is invertible because its columns (the eigenvectors) form a basis for \(\mathbb{R}^3\).
When multiplying by \(\mathbf{x}\), \(\mathbf{U}^{-1}\) converts \(\mathbf{x}\) to the eigenbasis, \(\mathbf{\Lambda}\) scales by the corresponding eigenvalues, and \(\mathbf{U}\) takes us back to the standard basis.

In the presence of complex eigenvalues, \(\mathbf{A}\) may still be diagonalizable if we allow \(\mathbf{U}\) and \(\mathbf{\Lambda}\) to include complex entires.
In this case, the decomposition as a whole still maps real vectors to real vectors, but the intermediate values become complex.

Eigenfunctions


  Review: What’s so special about Euler’s number e? | Chapter 5, Essence of calculus.


So, what does diagonalization mean in a vector space of functions?
Given a linear operator \(\mathcal{L}\), you might imagine a corresponding definition for eigenfunctions:

\[\mathcal{L}f = \psi f\]

The scalar \(\psi\) is again known as an eigenvalue.
Since \(\mathcal{L}\) is infinite-dimensional, it doesn’t have a characteristic polynomial—there’s not a straightforward method for computing \(\psi\).

Nevertheless, let’s attempt to diagonalize differentiation on analytic functions.
The first step is to find the eigenfunctions.
Start by applying the above condition to our differentiation operator in the power basis:

\[\begin{align*}
&amp;amp;&amp;amp; \frac{\partial}{\partial x}\mathbf{p} = \psi \mathbf{p} \vphantom{\Big|}&amp;amp; \\
&amp;amp;\iff&amp;amp; \begin{bmatrix}0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots\\ 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 0 &amp;amp; \cdots\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 3 &amp;amp; \cdots\\ \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots \end{bmatrix}\begin{bmatrix}p_0\\ p_1\\ p_2\\ p_3\\ \vdots\end{bmatrix}
&amp;amp;= \begin{bmatrix}\psi p_0\\ \psi p_1 \\ \psi p_2 \\ \psi p_3 \\ \vdots \end{bmatrix} \\
&amp;amp;\iff&amp;amp; \begin{cases} p_1 &amp;amp;= \psi p_0 \\ p_2 &amp;amp;= \frac{\psi}{2} p_1 \\ p_3 &amp;amp;= \frac{\psi}{3} p_2 \\ &amp;amp;\dots \end{cases} &amp;amp;
\end{align*}\]

This system of equations implies that all coefficients are determined solely by our choice of constants \(p_0\) and \(\psi\).
We can explicitly write down their relationship as \(p_i = \frac{\psi^i}{i!}p_0\).

Now, let’s see what this class of polynomials actually looks like.



\[p[x] = p_0 + p_0\psi x + p_0\frac{\psi^2}{2}x^2 + p_0\frac{\psi^3}{6}x^3 + p_0\frac{\psi^4}{24}x^4 + \dots\]




\[\begin{align*}
p[x] &amp;amp;= p_0 + p_0\psi x + p_0\frac{\psi^2}{2}x^2\, +\\ &amp;amp;\phantom{=} p_0\frac{\psi^3}{6}x^3 + p_0\frac{\psi^4}{24}x^4 + \dots
\end{align*}\]



Differentiation shows that this function is, in fact, an eigenfunction for the eigenvalue \(\psi\).



\[\begin{align*} \frac{\partial}{\partial x} p[x] &amp;amp;= 0 + p_0\psi + p_0 \psi^2 x + p_0\frac{\psi^3}{2}x^2 + p_0\frac{\psi^4}{6}x^3 + \dots \\
&amp;amp;= \psi p[x] \end{align*}\]




\[\begin{align*}
\frac{\partial}{\partial x} p[x] &amp;amp;= 0 + p_0\psi + p_0 \psi^2 x\, +\\ &amp;amp;\phantom{=} p_0\frac{\psi^3}{2}x^2 + p_0\frac{\psi^4}{6}x^3 + \dots \\
&amp;amp;= \psi p[x]
\end{align*}\]



With a bit of algebraic manipulation, the definition of \(e^{x}\) pops out:



\[\begin{align*} p[x] &amp;amp;= p_0 + p_0\psi x + p_0\frac{\psi^2}{2}x^2 + p_0\frac{\psi^3}{6}x^3 + p_0\frac{\psi^4}{24}x^4 + \dots \\
&amp;amp;= p_0\left((\psi x) + \frac{1}{2!}(\psi x)^2 + \frac{1}{3!}(\psi x)^3 + \frac{1}{4!}(\psi x)^4 + \dots\right) \\
&amp;amp;= p_0 e^{\psi x} \end{align*}\]




\[\begin{align*}
p[x] &amp;amp;= p_0 + p_0\psi x + p_0\frac{\psi^2}{2}x^2\, +\\ &amp;amp;\phantom{=} p_0\frac{\psi^3}{6}x^3 + p_0\frac{\psi^4}{24}x^4 + \dots \\
&amp;amp;= p_0\Big((\psi x) + \frac{1}{2!}(\psi x)^2\, +\\ &amp;amp;\phantom{=p_0\Big((} \frac{1}{3!}(\psi x)^3 + \frac{1}{4!}(\psi x)^4 + \dots\Big) \\
&amp;amp;= p_0 e^{\psi x}
\end{align*}\]



Therefore, functions of the form \(p_0e^{\psi x}\) are eigenfunctions for the eigenvalue \(\psi\), including when \(\psi=0\).

Diagonalizing Differentiation

We’ve found the eigenfunctions of the derivative operator, but can we diagonalize it?
Ideally, we would express differentiation as the combination of an invertible operator \(\mathcal{L}\) and a diagonal operator \(\mathcal{D}\).



\[\begin{align*} \frac{\partial}{\partial x} &amp;amp;= \mathcal{L} \mathcal{D} \mathcal{L}^{-1}  \\
&amp;amp;=
\begin{bmatrix} \vert &amp;amp; \vert &amp;amp;  &amp;amp; \\ \alpha e^{\psi_1 x} &amp;amp; \beta e^{\psi_2 x} &amp;amp; \dots \\ \vert &amp;amp; \vert &amp;amp;  \end{bmatrix}
\begin{bmatrix} \psi_1 &amp;amp; 0 &amp;amp; \dots \\ 0 &amp;amp; \psi_2 &amp;amp; \dots \\ \vdots &amp;amp; \vdots &amp;amp; \ddots \end{bmatrix}
{\color{red} \begin{bmatrix} \vert &amp;amp; \vert &amp;amp;  &amp;amp; \\ \alpha e^{\psi_1 x} &amp;amp; \beta e^{\psi_2 x} &amp;amp; \dots \\ \vert &amp;amp; \vert &amp;amp;  \end{bmatrix}^{-1} }
\end{align*}\]




\[\begin{align*} \frac{\partial}{\partial x} &amp;amp;= \mathcal{L} \mathcal{D} \mathcal{L}^{-1}  \\
&amp;amp;=
\begin{bmatrix} \vert &amp;amp; \vert &amp;amp;  &amp;amp; \\ \alpha e^{\psi_1 x} &amp;amp; \beta e^{\psi_2 x} &amp;amp; \dots \\ \vert &amp;amp; \vert &amp;amp;  \end{bmatrix}
\\ &amp;amp; \phantom{=} \begin{bmatrix} \psi_1 &amp;amp; 0 &amp;amp; \dots \\ 0 &amp;amp; \psi_2 &amp;amp; \dots \\ \vdots &amp;amp; \vdots &amp;amp; \ddots \end{bmatrix}
\\ &amp;amp; \phantom{=} {\color{red} \begin{bmatrix} \vert &amp;amp; \vert &amp;amp;  &amp;amp; \\ \alpha e^{\psi_1 x} &amp;amp; \beta e^{\psi_2 x} &amp;amp; \dots \\ \vert &amp;amp; \vert &amp;amp;  \end{bmatrix}^{-1} }
\end{align*}\]



Diagonalization is only possible when our eigenfunctions form a basis.
This would be true if all analytic functions are expressible as a linear combination of exponentials.
However…


  
    Counterexample: $$f[x] = x$$
  
  
    
      First assume that \(f[x] = x\) can be represented as a linear combination of exponentials.
Since analytic functions have countably infinite dimensionality, we should only need a countably infinite sum:

\[f[x] = x = \sum_{n=0}^\infty \alpha_n e^{\psi_n x}\]

      Differentiating both sides:

\[\begin{align*} f^{\prime}[x] &amp;amp;= 1 = \sum_{n=0}^\infty \psi_n\alpha_n e^{\psi_n x} \\
 f^{\prime\prime}[x] &amp;amp;= 0 = \sum_{n=0}^\infty \psi_n^2\alpha_n e^{\psi_n x} \end{align*}\]

      Since \(e^{\psi_n x}\) and \(e^{\psi_m x}\) are linearly independent when \(n\neq m\), the final equation implies that all \(\alpha = 0\), except possibly the \(\alpha_\xi\) corresponding to \(\psi_\xi = 0\).
Therefore:

\[\begin{align*}
1 &amp;amp;= \sum_{n=0}^\infty \psi_n\alpha_n e^{\psi_n x}\\
&amp;amp;= \psi_\xi \alpha_\xi + \sum_{n\neq \xi} 0\psi_n e^{\psi_n x} \\
&amp;amp;= 0
\end{align*}\]

      That’s a contradiction—the linear combination representing \(f[x] = x\) does not exist.

      A similar argument shows that we can’t represent any non-constant function whose \(n\)th derivative is zero, nor periodic functions like sine and cosine.
    
  


Real exponentials don’t constitute a basis, so we cannot construct an invertible \(\mathcal{L}\).

The Laplace Transform

We previously mentioned that more matrices can be diagonalized if we allow the decomposition to contain complex numbers.
Analogously, more linear operators are diagonalizable in the larger vector space of functions from \(\mathbb{R}\) to \(\mathbb{C}\).

Differentiation works the same way in this space; we’ll still find that its eigenfunctions are exponential.

\[\frac{\partial}{\partial x} e^{(a+bi)x} = (a+bi)e^{(a+bi)x}\]

However, the new eigenfunctions have complex eigenvalues, so we still can’t diagonalize.
We’ll need to consider the still larger space of functions from \(\mathbb{C}\) to \(\mathbb{C}\).

\[\frac{\partial}{\partial x} : (\mathbb{C}\mapsto\mathbb{C}) \mapsto (\mathbb{C}\mapsto\mathbb{C})\]

In this space, differentiation can be diagonalized via the Laplace transform.
Although useful for solving differential equations, the Laplace transform is non-trivial to invert, so we won’t discuss it further.
In the following sections, we’ll delve into an operator that can be easily diagonalized in \(\mathbb{R}\mapsto\mathbb{C}\): the Laplacian.



Inner Product Spaces


  Review: Dot products and duality | Chapter 9, Essence of linear algebra.


Before we get to the spectral theorem, we’ll need to understand one more topic: inner products.
You’re likely already familiar with one example of an inner product—the Euclidean dot product.

\[\begin{bmatrix}x\\ y\\ z\end{bmatrix} \cdot \begin{bmatrix}a\\ b\\ c\end{bmatrix} = ax + by + cz\]

An inner product describes how to measure a vector along another vector.
For example, \(\mathbf{u}\cdot\mathbf{v}\) is proportional to the length of the projection of \(\mathbf{u}\) onto \(\mathbf{v}\).



$$ \mathbf{u} \cdot \mathbf{v} =\|\mathbf{u}\|\|\mathbf{v}\|\cos[\theta] $$






With a bit of trigonometry, we can show that the dot product is equivalent to multiplying the vectors’ lengths with the cosine of their angle.
This relationship suggests that the product of a vector with itself produces the square of its length.

\[\begin{align*} \mathbf{u}\cdot\mathbf{u} &amp;amp;= \|\mathbf{u}\|\|\mathbf{u}\|\cos[0] \\
&amp;amp;= \|\mathbf{u}\|^2
\end{align*}\]

Similarly, when two vectors form a right angle (are orthogonal), their dot product is zero.



$$ \begin{align*}  \mathbf{u} \cdot \mathbf{v} &amp;amp;= \|\mathbf{u}\|\|\mathbf{v}\|\cos[90^\circ] \\ &amp;amp;= 0 \end{align*} $$






Of course, the Euclidean dot product is only one example of an inner product.
In more general spaces, the inner product is denoted using angle brackets, such as \(\langle \mathbf{u}, \mathbf{v} \rangle\).


  The length (also known as the norm) of a vector is defined as \(\|\mathbf{u}\| = \sqrt{\langle \mathbf{u}, \mathbf{u} \rangle}\).
  Two vectors are orthogonal if their inner product is zero: \(\ \mathbf{u} \perp \mathbf{v}\ \iff\ \langle \mathbf{u}, \mathbf{v} \rangle = 0\).


A vector space augmented with an inner product is known as an inner product space.

A Functional Inner Product

We can’t directly apply the Euclidean dot product to our space of real functions, but its \(N\)-dimensional generalization is suggestive.

\[\begin{align*} \mathbf{u} \cdot \mathbf{v} &amp;amp;= u_1v_1 + u_2v_2 + \dots + u_Nv_N \\ &amp;amp;= \sum_{i=1}^N u_iv_i \end{align*}\]

Given countable indices, we simply match up the values, multiply them, and add the results.
When indices are uncountable, we can convert the discrete sum to its continuous analog: an integral!

\[\langle f, g \rangle = \int_a^b f[x]g[x] \, dx\]

When \(f\) and \(g\) are similar, multiplying them produces a larger function; when they’re different, they cancel out.
Integration measures their product over some domain to produce a scalar result.










Of course, not all functions can be integrated.
Our inner product space will only contain functions that are square integrable over the domain \([a, b]\), which may be \([-\infty, \infty]\).
Luckily, the important properties of our inner product do not depend on the choice of integration domain.

Proofs

Below, we’ll briefly cover functions from \(\mathbb{R}\) to \(\mathbb{C}\).
In this space, our intuitive notion of similarity still applies, but we’ll use a slightly more general inner product:

\[\langle f,g \rangle = \int_a^b f[x]\overline{g[x]}\, dx\]

Where \(\overline{x}\) denotes conjugation, i.e. \(\overline{a + bi} = a - bi\).

Like other vector space operations, an inner product must satisfy several axioms:


  
    Conjugate Symmetry
  
  
  
  For all vectors $$\mathbf{u}, \mathbf{v} \in \mathcal{V}$$:

  $$\langle \mathbf{u}, \mathbf{v} \rangle = \overline{\langle \mathbf{v}, \mathbf{u} \rangle}$$

  Conjugation may be taken outside the integral, making this one easy:

  $$\begin{align*} \langle f, g \rangle &amp;amp;= \int_a^b f[x]\overline{g[x]} \, dx \\
  &amp;amp;= \int_a^b \overline{g[x]\overline{f[x]}} \, dx \\
  &amp;amp;= \overline{\int_a^b g[x]\overline{f[x]} \, dx} \\
  &amp;amp;= \overline{\langle g, f \rangle}
  \end{align*}$$

  Note that we require conjugate symmetry because it implies $$\langle\mathbf{u}, \mathbf{u}\rangle = \overline{\langle\mathbf{u}, \mathbf{u}\rangle}$$, i.e. the inner product of a vector with itself is real.
  
  



  
    Linearity in the First Argument
  
  
  
  For all vectors $$\mathbf{u}, \mathbf{v}, \mathbf{w} \in \mathcal{V}$$ and scalars $$\alpha, \beta \in \mathbb{F}$$:

  $$\langle \alpha \mathbf{u} + \beta \mathbf{v}, \mathbf{w} \rangle = \alpha\langle \mathbf{u}, \mathbf{w} \rangle + \beta\langle \mathbf{v}, \mathbf{w} \rangle $$

  The proof follows from linearity of integration, as well as our vector space axioms:



\[\begin{align*} \langle \alpha f + \beta g, h \rangle &amp;amp;= \int_a^b (\alpha f + \beta g)[x]\overline{h[x]} \, dx \\
&amp;amp;= \int_a^b (\alpha f[x] + \beta g[x])\overline{h[x]} \, dx \\
&amp;amp;= \int_a^b \alpha f[x]\overline{h[x]} + \beta g[x]\overline{h[x]} \, dx \\
&amp;amp;= \alpha\int_a^b f[x]\overline{h[x]}\, dx + \beta\int_a^b g[x]\overline{h[x]} \, dx \\
&amp;amp;= \alpha\langle f, h \rangle + \beta\langle g, h \rangle
\end{align*}\]

      


\[\begin{align*} &amp;amp;\langle \alpha f + \beta g, h \rangle\\ &amp;amp;= \int_a^b (\alpha f + \beta g)[x]\overline{h[x]} \, dx \\
&amp;amp;= \int_a^b (\alpha f[x] + \beta g[x])\overline{h[x]} \, dx \\
&amp;amp;= \int_a^b \alpha f[x]\overline{h[x]} + \beta g[x]\overline{h[x]} \, dx \\
&amp;amp;= \alpha\int_a^b f[x]\overline{h[x]}\, dx\, +\\&amp;amp;\hphantom{==} \beta\int_a^b g[x]\overline{h[x]} \, dx \\
&amp;amp;= \alpha\langle f, h \rangle + \beta\langle g, h \rangle
\end{align*}\]

      

  Given conjugate symmetry, an inner product is also antilinear in the second argument.
  
  



  
    Positive-Definiteness
  
  
  
  For all $$\mathbf{u} \in \mathcal{V}$$:

  $$ \begin{cases} \langle \mathbf{u}, \mathbf{u} \rangle = 0 &amp;amp; \text{if } \mathbf{u} = \mathbf{0} \\ \langle \mathbf{u}, \mathbf{u} \rangle &amp;gt; 0 &amp;amp; \text{otherwise} \end{cases} $$

  By conjugate symmetry, we know $$\langle f, f \rangle$$ is real, so we can compare it with zero.
  
  However, rigorously proving this result requires measure-theoretic concepts beyond the scope of this post.
  In brief, we redefine $$\mathbf{0}$$ not as specifically $$\mathbf{0}[x] = 0$$, but as an equivalence class of functions that are zero </description>
      <author> (Max Slater)</author>
      <guid>https://thenumb.at/Functions-are-Vectors/</guid>
      <pubDate>Sun, 30 Jul 2023 11:03:15 GMT</pubDate>
    </item>
    <item>
      <title>How to benchmark different .NET versions</title>
      <link>https://steven-giesel.com/blogPost/59cfb6f8-8b87-4707-a99e-e372541b696a</link>
      <description>With the famous BenchmarkDotNet library you can benchmark a lot - but it doesn&amp;#39;t stop with a single .NET version. You can benchmark multiple versions of the same code that targets different runtimes!</description>
      <author> ()</author>
      <guid>https://steven-giesel.com/blogPost/59cfb6f8-8b87-4707-a99e-e372541b696a</guid>
      <pubDate>Sun, 30 Jul 2023 09:02:25 GMT</pubDate>
    </item>
  </channel>
</rss>