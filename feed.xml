<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>The Right Way to Check for Null in C#</title>
      <link>https://youtube.com/watch?v=wqDYj0be_og</link>
      <description>Check out my courses: https://dometrain.comBecome a Patreon and get source code access: https://www.patreon.com/nickchapsasHello, everybody, I&amp;#39;m Nick, and in...</description>
      <author> (Nick Chapsas
  
  
  
    Nick Chapsas
  





    •)</author>
      <guid>https://youtube.com/watch?v=wqDYj0be_og</guid>
      <pubDate>Mon, 12 Jun 2023 13:05:59 GMT</pubDate>
    </item>
    <item>
      <title>Programming using Laravel and JavaScript in CodeLobster IDE - Coding Sonata</title>
      <link>https://codingsonata.com/programming-using-laravel-and-javascript-in-codelobster-ide/</link>
      <description>Using CodeLobster IDE with Laravel and JavaScript, developers can benefit from an all-in-one platform that simplifies coding tasks with syntax highlighting, code completion, debugging tools.</description>
      <author> (https://www.facebook.com/aram1987)</author>
      <guid>https://codingsonata.com/programming-using-laravel-and-javascript-in-codelobster-ide/</guid>
      <pubDate>Mon, 12 Jun 2023 13:05:58 GMT</pubDate>
    </item>
    <item>
      <title>Testing Chiseled Ubuntu container images with .NET</title>
      <link>https://www.mytechramblings.com/posts/testing-chiseled-ubuntu-containers-with-dotnet/</link>
      <description>The objective of this post is to test Ubuntu Chiseled images in combination with .NET, evaluating whether it is truly worthwhile to migrate our .NET apps to utilize these base images or not.</description>
      <author> ()</author>
      <guid>https://www.mytechramblings.com/posts/testing-chiseled-ubuntu-containers-with-dotnet/</guid>
      <pubDate>Mon, 12 Jun 2023 11:03:35 GMT</pubDate>
    </item>
    <item>
      <title>Introduction to Firebase in .NET - Code Maze</title>
      <link>https://code-maze.com/dotnet-firebase/</link>
      <description>In this article, we introduce the Firebase application development platform from Google and how to interact with it using the .NET libraries.</description>
      <author> (Phil Broderick)</author>
      <guid>https://code-maze.com/dotnet-firebase/</guid>
      <pubDate>Mon, 12 Jun 2023 09:02:44 GMT</pubDate>
    </item>
    <item>
      <title>Latest Updates for Azure App Service Presented at Microsoft Build 2023 </title>
      <link>https://www.infoq.com/news/2023/06/app-service-build-2023/</link>
      <description>The Microsoft Build 2023 event showcased the latest updates and additions to the Azure App Service. The event, held in person in Seattle, included some group sessions, demonstrations and Q&amp;amp;A sessions on Azure App Service with such topics as changes within PremiumV3, Automatic Scaling or memory optimisation for ASEv3.</description>
      <author> (Robert Krzaczyński
                
            
            
        Software EngineerFollow)</author>
      <guid>https://www.infoq.com/news/2023/06/app-service-build-2023/</guid>
      <pubDate>Mon, 12 Jun 2023 09:02:43 GMT</pubDate>
    </item>
    <item>
      <title>362: Developer Productivity - C# 12, Dev Tunnels, C# Dev Kit</title>
      <link>https://www.mergeconflict.fm/362</link>
      <description>It is follow up week on some topics we touched on earlier. We first break down our thoughts on C# 12&amp;#39;s new Collection Literals, Apple Vision Pro + iCircuit, iOS 17, and some great developer productivity feature for .NET.</description>
      <author> (soundbite.fm)</author>
      <guid>https://www.mergeconflict.fm/362</guid>
      <pubDate>Mon, 12 Jun 2023 09:02:42 GMT</pubDate>
    </item>
    <item>
      <title>Reset user account passwords using Microsoft Graph and application permissions in ASP.NET Core</title>
      <link>https://damienbod.com/2023/06/12/reset-user-account-passwords-using-microsoft-graph-and-application-permissions/</link>
      <description>This article shows how to reset a password for tenant members using a Microsoft Graph application client in ASP.NET Core. An Azure App registration is used to define the application permission for …</description>
      <author> (damienbod)</author>
      <guid>https://damienbod.com/2023/06/12/reset-user-account-passwords-using-microsoft-graph-and-application-permissions/</guid>
      <pubDate>Mon, 12 Jun 2023 09:02:42 GMT</pubDate>
    </item>
    <item>
      <title>ASP.NET Core Basics: Best Practices—Creating a New Project</title>
      <link>https://www.telerik.com/blogs/aspnet-core-basics-best-practices-creating-new-projects</link>
      <description>Check out this blog post from the ASP.NET Core Basics series for a collection of best practices for when you start a new web project.</description>
      <author> ()</author>
      <guid>https://www.telerik.com/blogs/aspnet-core-basics-best-practices-creating-new-projects</guid>
      <pubDate>Mon, 12 Jun 2023 06:01:40 GMT</pubDate>
    </item>
    <item>
      <title>Blazor Highlights from the Early .NET 8 Preview Releases</title>
      <link>https://www.telerik.com/blogs/blazor-highlights-early-net-8-preview-releases</link>
      <description>Server-side rendering and streaming rendering are among the big changes coming for Blazor in .NET 8, plus some smaller changes will make a big difference.</description>
      <author> ()</author>
      <guid>https://www.telerik.com/blogs/blazor-highlights-early-net-8-preview-releases</guid>
      <pubDate>Mon, 12 Jun 2023 06:01:39 GMT</pubDate>
    </item>
    <item>
      <title>Grounding LLMs</title>
      <link>https://techcommunity.microsoft.com/t5/fasttrack-for-azure/grounding-llms/ba-p/3843857</link>
      <description>What is Grounding? Grounding is the process of using large language models (LLMs) with information that is use-case specific, relevant, and not available as part of the LLM&amp;#39;s trained knowledge. It is crucial for ensuring the quality, accuracy, and relevance of the generated output. While LLMs come w...</description>
      <author> (https://techcommunity.microsoft.com/t5/user/viewprofilepage/user-id/1672843)</author>
      <guid>https://techcommunity.microsoft.com/t5/fasttrack-for-azure/grounding-llms/ba-p/3843857</guid>
      <pubDate>Mon, 12 Jun 2023 06:01:38 GMT</pubDate>
    </item>
    <item>
      <title>Released: Microsoft.Data.SqlClient 5.2 Preview 2</title>
      <link>https://techcommunity.microsoft.com/t5/sql-server-blog/released-microsoft-data-sqlclient-5-2-preview-2/ba-p/3843643</link>
      <description>Microsoft.Data.SqlClient 5.2 Preview 2 has been released. This release contains improvements and updates to the Microsoft.Data.SqlClient data provider for SQL Server. Our plan is to provide GA releases twice a year with two or three preview releases in between. This cadence should provide time for f...</description>
      <author> (https://techcommunity.microsoft.com/t5/user/viewprofilepage/user-id/528706)</author>
      <guid>https://techcommunity.microsoft.com/t5/sql-server-blog/released-microsoft-data-sqlclient-5-2-preview-2/ba-p/3843643</guid>
      <pubDate>Mon, 12 Jun 2023 06:01:38 GMT</pubDate>
    </item>
    <item>
      <title>GitHub Copilot Fundamentals Learning Path - Your New AI programming friend!</title>
      <link>https://techcommunity.microsoft.com/t5/educator-developer-blog/github-copilot-fundamentals-learning-path-your-new-ai/ba-p/3844000</link>
      <description>Hi! Ready to meet your new best friend? Say hello to GitHub Copilot, the AI pair programmer that&amp;#39;s about to change the way you code. It&amp;#39;s like having a super-smart friend who&amp;#39;s always ready to help. No matter the scenario, writing code, fixing bugs, or just trying to remember that one command you al...</description>
      <author> (https://techcommunity.microsoft.com/t5/user/viewprofilepage/user-id/14141)</author>
      <guid>https://techcommunity.microsoft.com/t5/educator-developer-blog/github-copilot-fundamentals-learning-path-your-new-ai/ba-p/3844000</guid>
      <pubDate>Mon, 12 Jun 2023 06:01:38 GMT</pubDate>
    </item>
    <item>
      <title>Debug any server application locally with Dev Tunnels!</title>
      <link>https://youtube.com/watch?v=nS5iPp2ve7k</link>
      <description>Visual Studio Dev Tunnels are great for connecting clients to your localhost, check this out!More details on Dev Tunnels? https://www.youtube.com/watch?v=azu...</description>
      <author> (Gerald Versluis
  
  
  
    Gerald Versluis
  






    •)</author>
      <guid>https://youtube.com/watch?v=nS5iPp2ve7k</guid>
      <pubDate>Mon, 12 Jun 2023 06:01:36 GMT</pubDate>
    </item>
    <item>
      <title>Azure Container Apps, Easy Auth and .NET authentication | johnnyreilly</title>
      <link>https://johnnyreilly.com/azure-container-apps-easy-auth-and-dotnet-authentication</link>
      <description>Azure Container Apps support Easy Auth. However, .NET applications run in ACAs do not recognise Easy Auth authentication. This post explains the issue and solves it.</description>
      <author> (https://johnnyreilly.com/about)</author>
      <guid>https://johnnyreilly.com/azure-container-apps-easy-auth-and-dotnet-authentication</guid>
      <pubDate>Mon, 12 Jun 2023 06:01:34 GMT</pubDate>
    </item>
    <item>
      <title>I Built the World&amp;#39;s Largest Translated Cuneiform Corpus using AI</title>
      <link>https://praeclarum.org/2023/06/09/cuneiform.html</link>
      <description>TL;DR I used a custom-trained Large Language Model (T5) to
create the world’s largest online corpus of translated cuneiform
texts. It’s called the AICC (AI Cuneiform Corpus) and contains
130,000 AI translated texts from the CDLI
and ORACC projects.

</description>
      <author> (https://praeclarum.org/about/)</author>
      <guid>https://praeclarum.org/2023/06/09/cuneiform.html</guid>
      <pubDate>Mon, 12 Jun 2023 06:01:33 GMT</pubDate>
    </item>
    <item>
      <title>About that dozen programmer must-haves</title>
      <link>https://jesseliberty.com/2023/06/11/about-that-dozen-programmer-must-haves/</link>
      <description>I wrote this blog post in September of last year, and looking at it today I realized that I don’t use a couple of these anymore:1) Resharper: the overhead was borderline too much and most of …</description>
      <author> (Posted on)</author>
      <guid>https://jesseliberty.com/2023/06/11/about-that-dozen-programmer-must-haves/</guid>
      <pubDate>Mon, 12 Jun 2023 05:03:54 GMT</pubDate>
    </item>
    <item>
      <title>Easy and Cheap AI for Developers, Reddit API Changes and Sherlocking</title>
      <link>https://www.codingblocks.net/podcast/easy-and-cheap-ai-for-developers-reddit-api-changes-and-sherlocking/</link>
      <description>June 11, 2023 By Allen Underwood Leave a Comment</description>
      <author> (About Allen Underwood)</author>
      <guid>https://www.codingblocks.net/podcast/easy-and-cheap-ai-for-developers-reddit-api-changes-and-sherlocking/</guid>
      <pubDate>Mon, 12 Jun 2023 01:03:25 GMT</pubDate>
    </item>
    <item>
      <title>What are the scenarios where &amp;quot;Rewrite it in Rust&amp;quot; didn&amp;#39;t meet your expectations or couldn&amp;#39;t be successfully implemented?</title>
      <link>https://old.reddit.com/r/rust/comments/1457x29/what_are_the_scenarios_where_rewrite_it_in_rust/</link>
      <description>Have you ever encountered a situation where *&amp;quot;Rewrite it in Rust&amp;quot;* couldn&amp;#39;t deliver the expected results? Share your experiences and limitations,...</description>
      <author> (yashpathack)</author>
      <guid>https://old.reddit.com/r/rust/comments/1457x29/what_are_the_scenarios_where_rewrite_it_in_rust/</guid>
      <pubDate>Sun, 11 Jun 2023 23:06:11 GMT</pubDate>
    </item>
    <item>
      <title>Make our IT simple again</title>
      <link>https://www.arsouyes.org/blog/2023/2023-06-10_Simplifions/</link>
      <description>Let’s speak frankly; we are a geek family and we love configuring
machines and networks (especially tbowan if you want to know
everything). Over time, and under the pretext of training and staying up
to date with thos technologies, we have built our little
infrastructure of which we take a little pride…</description>
      <author> (aryliin)</author>
      <guid>https://www.arsouyes.org/blog/2023/2023-06-10_Simplifions/</guid>
      <pubDate>Sun, 11 Jun 2023 21:03:59 GMT</pubDate>
    </item>
    <item>
      <title>Three.js Development in 2023</title>
      <link>https://brettkromkamp.com/posts/three-js-development-in-2023/</link>
      <description>After a period of hardly no development with three.js I have recently resumed developing three.js-based applications and the developer experience has been second to none.</description>
      <author> (— Written by Brett Kromkamp)</author>
      <guid>https://brettkromkamp.com/posts/three-js-development-in-2023/</guid>
      <pubDate>Sun, 11 Jun 2023 21:03:53 GMT</pubDate>
    </item>
    <item>
      <title>The artist trapped in a chat interface</title>
      <link>https://newsletter.pnote.eu/p/the-artist-trapped-in-a-chat-interface</link>
      <description>How I learned to stop worrying and love Midjourney &amp;#128171;</description>
      <author> (Przemek)</author>
      <guid>https://newsletter.pnote.eu/p/the-artist-trapped-in-a-chat-interface</guid>
      <pubDate>Sun, 11 Jun 2023 21:03:53 GMT</pubDate>
    </item>
    <item>
      <title>Phone upgraded to Debian 12 – Jonathan Carter</title>
      <link>https://jonathancarter.org/2023/06/09/phone-upgraded-to-debian-12/</link>
      <description>A long time ago, before the pandemic, I bought a Librem 5 phone from Purism. I also moved home since then, and sadly my phone was sleeping peacefully in a box in the garage since I moved.</description>
      <author> (by  jonathan  &amp;#183; 9 June 2023)</author>
      <guid>https://jonathancarter.org/2023/06/09/phone-upgraded-to-debian-12/</guid>
      <pubDate>Sun, 11 Jun 2023 21:03:53 GMT</pubDate>
    </item>
    <item>
      <title>Prompting Techniques That Squeeze the Best Out of Your LLM</title>
      <link>https://vaclavkosar.com/ml/Prompting-Techniques-That-Sqeeze-The-Best-Out-of-Your-LLM</link>
      <description>From the simplest to the most advanced, instruct your GPT for the best generation.</description>
      <author> (Vaclav Kosar)</author>
      <guid>https://vaclavkosar.com/ml/Prompting-Techniques-That-Sqeeze-The-Best-Out-of-Your-LLM</guid>
      <pubDate>Sun, 11 Jun 2023 21:03:52 GMT</pubDate>
    </item>
    <item>
      <title>Proper Documentation</title>
      <link>https://vadimkravcenko.com/shorts/proper-documentation/</link>
      <description>I’m a big fan of documentation. I think it’s my favorite boring thing to do after coding. It brings the business so much long-term value that every hour</description>
      <author> (https://www.facebook.com/vadim.kravcenko.dev)</author>
      <guid>https://vadimkravcenko.com/shorts/proper-documentation/</guid>
      <pubDate>Sun, 11 Jun 2023 21:03:51 GMT</pubDate>
    </item>
    <item>
      <title>Max Leiter</title>
      <link>https://maxleiter.com/blog/mobile-browsers-resizing-font</link>
      <description>My personal website</description>
      <author> ()</author>
      <guid>https://maxleiter.com/blog/mobile-browsers-resizing-font</guid>
      <pubDate>Sun, 11 Jun 2023 21:03:51 GMT</pubDate>
    </item>
    <item>
      <title>Abusing undocumented features to spoof PE section headers</title>
      <link>https://secret.club/2023/06/05/spoof-pe-sections.html</link>
      <description>Introduction Some time ago, I accidentally came across some interesting behaviour in PE files while debugging an unrelated project. I noticed that setting the SectionAlignment value in the NT header to a value lower than the page size (4096) resulted in significant differences in the way that the image is mapped into memory. Rather than following the usual procedure of parsing the section table to construct the image in memory, the loader appeared to map the entire file, including the headers, into memory with read-write-execute (RWX) permissions - the individual section headers were completely ignored. As a result of this behaviour, it is possible to create a PE executable without any sections, yet still capable of executing its own code. The code can even be self-modifying if necessary due to the write permissions that are present by default. One way in which this mode could potentially be abused would be to create a fake section table - on first inspection, this would appear to be a normal PE module containing read-write/read-only data sections, but when launched, the seemingly NX data becomes executable. While I am sure that this technique will have already been discovered (and potentially abused) in the past, I have been unable to find any documentation online describing it. MSDN does briefly mention that the SectionAlignment value can be less than the page size, but it doesn’t elaborate any further on the implications of this. Inside the Windows kernel A quick look in the kernel reveals what is happening. Within MiCreateImageFileMap, we can see the parsing of PE headers - notably, if the SectionAlignment value is less than 0x1000, an undocumented flag (0x200000) is set prior to mapping the image into memory: if(v29-&amp;gt;SectionAlignment &amp;lt; 0x1000) { if((SectionFlags &amp;amp; 0x80000) != 0) { v17 = 0xC000007B; MiLogCreateImageFileMapFailure(v36, v39, *(unsigned int *)(v29 + 64), DWORD1(v99)); ImageFailureReason = 55; goto LABEL_81; } if(!MiLegacyImageArchitecture((unsigned __int16)v99)) { v17 = 0xC000007B; ImageFailureReason = 56; goto LABEL_81; } SectionFlags |= 0x200000; } v40 = MiBuildImageControlArea(a3, v38, v29, (unsigned int)&amp;amp;v99, SectionFlags, (__int64)&amp;amp;FileSize, (__int64)&amp;amp;v93); If the aforementioned flag is set, MiBuildImageControlArea treats the entire file as one single section: if((SectionFlags &amp;amp; 0x200000) != 0) { SectionCount = 1; } else { SectionCount = a4-&amp;gt;NumberOfSections + 1; } v12 = MiAllocatePool(64, 8 * (7 * SectionCount + (((unsigned __int64)(unsigned int)MiFlags &amp;gt;&amp;gt; 13) &amp;amp; 1)) + 184, (SectionFlags &amp;amp; 0x200000) != 0 ? 0x61436D4D : 0x69436D4D); As a result, the raw image is mapped into memory with all PTEs assigned MM_EXECUTE_READWRITE protection. As mentioned previously, the IMAGE_SECTION_HEADER list is ignored, meaning a PE module using this mode can have a NumberOfSections value of 0. There are no obvious size restrictions on PE modules using this mode either - the loader will allocate memory based on the SizeOfImage field and copy the file contents accordingly. Any excess memory beyond the size of the file will remain blank. Demonstration #1 - Executable PE with no sections The simplest demonstration of this technique would be to create a generic “loader” for position-independent code. I have created the following sample headers by hand for testing: // (64-bit EXE headers) BYTE bHeaders64[328] = { 0x4D, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x64, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x22, 0x00, 0x0B, 0x02, 0x0E, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x60, 0x81, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (code goes here) }; BYTE bHeaders32[304] = { 0x4D, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x4C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x01, 0x0B, 0x01, 0x0E, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x40, 0x81, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (code goes here) }; These headers contain a SectionAlignment value of 0x200 (rather than the usual 0x1000), a SizeOfImage value of 0x100000 (1MB), a blank section table, and an entry-point positioned immediately after the headers. Aside from these values, there is nothing special about the remaining fields: (DOS Header) e_magic : 0x5A4D ... e_lfanew : 0x40 (NT Header) Signature : 0x4550 Machine : 0x8664 NumberOfSections : 0x0 TimeDateStamp : 0x0 PointerToSymbolTable : 0x0 NumberOfSymbols : 0x0 SizeOfOptionalHeader : 0xF0 Characteristics : 0x22 Magic : 0x20B MajorLinkerVersion : 0xE MinorLinkerVersion : 0x1D SizeOfCode : 0x0 SizeOfInitializedData : 0x0 SizeOfUninitializedData : 0x0 AddressOfEntryPoint : 0x148 BaseOfCode : 0x0 ImageBase : 0x140000000 SectionAlignment : 0x200 FileAlignment : 0x200 MajorOperatingSystemVersion : 0x6 MinorOperatingSystemVersion : 0x0 MajorImageVersion : 0x0 MinorImageVersion : 0x0 MajorSubsystemVersion : 0x6 MinorSubsystemVersion : 0x0 Win32VersionValue : 0x0 SizeOfImage : 0x100000 SizeOfHeaders : 0x148 CheckSum : 0x0 Subsystem : 0x2 DllCharacteristics : 0x8160 SizeOfStackReserve : 0x100000 SizeOfStackCommit : 0x1000 SizeOfHeapReserve : 0x100000 SizeOfHeapCommit : 0x1000 LoaderFlags : 0x0 NumberOfRvaAndSizes : 0x10 DataDirectory[0] : 0x0, 0x0 ... DataDirectory[15] : 0x0, 0x0 (Start of code) For demonstration purposes, we will be using some position-independent code that calls MessageBoxA. As the base headers lack an import table, this code must locate and load all dependencies manually - user32.dll in this case. This same payload can be used in both 32-bit and 64-bit environments: BYTE bMessageBox[939] = { 0x8B, 0xC4, 0x6A, 0x00, 0x2B, 0xC4, 0x59, 0x83, 0xF8, 0x08, 0x0F, 0x84, 0xA0, 0x01, 0x00, 0x00, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x3C, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x33, 0xD2, 0x53, 0x56, 0x57, 0x8B, 0x40, 0x0C, 0x33, 0xDB, 0x21, 0x5D, 0xF0, 0x21, 0x5D, 0xEC, 0x8B, 0x40, 0x1C, 0x8B, 0x00, 0x8B, 0x78, 0x08, 0x8B, 0x47, 0x3C, 0x8B, 0x44, 0x38, 0x78, 0x03, 0xC7, 0x8B, 0x48, 0x24, 0x03, 0xCF, 0x89, 0x4D, 0xE8, 0x8B, 0x48, 0x20, 0x03, 0xCF, 0x89, 0x4D, 0xE4, 0x8B, 0x48, 0x1C, 0x03, 0xCF, 0x89, 0x4D, 0xF4, 0x8B, 0x48, 0x14, 0x89, 0x4D, 0xFC, 0x85, 0xC9, 0x74, 0x5F, 0x8B, 0x70, 0x18, 0x8B, 0xC1, 0x89, 0x75, 0xF8, 0x33, 0xC9, 0x85, 0xF6, 0x74, 0x4C, 0x8B, 0x45, 0xE8, 0x0F, 0xB7, 0x04, 0x48, 0x3B, 0xC2, 0x74, 0x07, 0x41, 0x3B, 0xCE, 0x72, 0xF0, 0xEB, 0x37, 0x8B, 0x45, 0xE4, 0x8B, 0x0C, 0x88, 0x03, 0xCF, 0x74, 0x2D, 0x8A, 0x01, 0xBE, 0x05, 0x15, 0x00, 0x00, 0x84, 0xC0, 0x74, 0x1F, 0x6B, 0xF6, 0x21, 0x0F, 0xBE, 0xC0, 0x03, 0xF0, 0x41, 0x8A, 0x01, 0x84, 0xC0, 0x75, 0xF1, 0x81, 0xFE, 0xFB, 0xF0, 0xBF, 0x5F, 0x75, 0x74, 0x8B, 0x45, 0xF4, 0x8B, 0x1C, 0x90, 0x03, 0xDF, 0x8B, 0x75, 0xF8, 0x8B, 0x45, 0xFC, 0x42, 0x3B, 0xD0, 0x72, 0xA9, 0x8D, 0x45, 0xC4, 0xC7, 0x45, 0xC4, 0x75, 0x73, 0x65, 0x72, 0x50, 0x66, 0xC7, 0x45, 0xC8, 0x33, 0x32, 0xC6, 0x45, 0xCA, 0x00, 0xFF, 0xD3, 0x8B, 0xF8, 0x33, 0xD2, 0x8B, 0x4F, 0x3C, 0x8B, 0x4C, 0x39, 0x78, 0x03, 0xCF, 0x8B, 0x41, 0x20, 0x8B, 0x71, 0x24, 0x03, 0xC7, 0x8B, 0x59, 0x14, 0x03, 0xF7, 0x89, 0x45, 0xE4, 0x8B, 0x41, 0x1C, 0x03, 0xC7, 0x89, 0x75, 0xF8, 0x89, 0x45, 0xE8, 0x89, 0x5D, 0xFC, 0x85, 0xDB, 0x74, 0x7D, 0x8B, 0x59, 0x18, 0x8B, 0x45, 0xFC, 0x33, 0xC9, 0x85, 0xDB, 0x74, 0x6C, 0x0F, 0xB7, 0x04, 0x4E, 0x3B, 0xC2, 0x74, 0x22, 0x41, 0x3B, 0xCB, 0x72, 0xF3, 0xEB, 0x5A, 0x81, 0xFE, 0x6D, 0x07, 0xAF, 0x60, 0x8B, 0x75, 0xF8, 0x75, 0x8C, 0x8B, 0x45, 0xF4, 0x8B, 0x04, 0x90, 0x03, 0xC7, 0x89, 0x45, 0xEC, 0xE9, 0x7C, 0xFF, 0xFF, 0xFF, 0x8B, 0x45, 0xE4, 0x8B, 0x0C, 0x88, 0x03, 0xCF, 0x74, 0x35, 0x8A, 0x01, 0xBE, 0x05, 0x15, 0x00, 0x00, 0x84, 0xC0, 0x74, 0x27, 0x6B, 0xF6, 0x21, 0x0F, 0xBE, 0xC0, 0x03, 0xF0, 0x41, 0x8A, 0x01, 0x84, 0xC0, 0x75, 0xF1, 0x81, 0xFE, 0xB4, 0x14, 0x4F, 0x38, 0x8B, 0x75, 0xF8, 0x75, 0x10, 0x8B, 0x45, 0xE8, 0x8B, 0x04, 0x90, 0x03, 0xC7, 0x89, 0x45, 0xF0, 0xEB, 0x03, 0x8B, 0x75, 0xF8, 0x8B, 0x45, 0xFC, 0x42, 0x3B, 0xD0, 0x72, 0x89, 0x33, 0xC9, 0xC7, 0x45, 0xC4, 0x54, 0x65, 0x73, 0x74, 0x51, 0x8D, 0x45, 0xC4, 0x88, 0x4D, 0xC8, 0x50, 0x50, 0x51, 0xFF, 0x55, 0xF0, 0x6A, 0x7B, 0x6A, 0xFF, 0xFF, 0x55, 0xEC, 0x5F, 0x5E, 0x5B, 0xC9, 0xC3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x89, 0x7C, 0x24, 0x20, 0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x40, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x33, 0xFF, 0x45, 0x33, 0xFF, 0x45, 0x33, 0xE4, 0x45, 0x33, 0xC9, 0x48, 0x8B, 0x48, 0x18, 0x48, 0x8B, 0x41, 0x30, 0x48, 0x8B, 0x08, 0x48, 0x8B, 0x59, 0x10, 0x48, 0x63, 0x43, 0x3C, 0x8B, 0x8C, 0x18, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCB, 0x8B, 0x69, 0x24, 0x44, 0x8B, 0x71, 0x20, 0x48, 0x03, 0xEB, 0x44, 0x8B, 0x59, 0x1C, 0x4C, 0x03, 0xF3, 0x8B, 0x71, 0x14, 0x4C, 0x03, 0xDB, 0x85, 0xF6, 0x0F, 0x84, 0x80, 0x00, 0x00, 0x00, 0x44, 0x8B, 0x51, 0x18, 0x33, 0xC9, 0x45, 0x85, 0xD2, 0x74, 0x69, 0x48, 0x8B, 0xD5, 0x0F, 0x1F, 0x40, 0x00, 0x0F, 0xB7, 0x02, 0x41, 0x3B, 0xC1, 0x74, 0x0D, 0xFF, 0xC1, 0x48, 0x83, 0xC2, 0x02, 0x41, 0x3B, 0xCA, 0x72, 0xED, 0xEB, 0x4D, 0x45, 0x8B, 0x04, 0x8E, 0x4C, 0x03, 0xC3, 0x74, 0x44, 0x41, 0x0F, 0xB6, 0x00, 0x33, 0xD2, 0xB9, 0x05, 0x15, 0x00, 0x00, 0x84, 0xC0, 0x74, 0x35, 0x0F, 0x1F, 0x00, 0x6B, 0xC9, 0x21, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC0, 0x03, 0xC8, 0x42, 0x0F, 0xB6, 0x04, 0x02, 0x84, 0xC0, 0x75, 0xEC, 0x81, 0xF9, 0xFB, 0xF0, 0xBF, 0x5F, 0x75, 0x08, 0x41, 0x8B, 0x3B, 0x48, 0x03, 0xFB, 0xEB, 0x0E, 0x81, 0xF9, 0x6D, 0x07, 0xAF, 0x60, 0x75, 0x06, 0x45, 0x8B, 0x23, 0x4C, 0x03, 0xE3, 0x41, 0xFF, 0xC1, 0x49, 0x83, 0xC3, 0x04, 0x44, 0x3B, 0xCE, 0x72, 0x84, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0xC7, 0x44, 0x24, 0x20, 0x75, 0x73, 0x65, 0x72, 0x66, 0xC7, 0x44, 0x24, 0x24, 0x33, 0x32, 0x44, 0x88, 0x7C, 0x24, 0x26, 0xFF, 0xD7, 0x45, 0x33, 0xC9, 0x48, 0x8B, 0xD8, 0x48, 0x63, 0x48, 0x3C, 0x8B, 0x94, 0x01, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xD0, 0x8B, 0x7A, 0x24, 0x8B, 0x6A, 0x20, 0x48, 0x03, 0xF8, 0x44, 0x8B, 0x5A, 0x1C, 0x48, 0x03, 0xE8, 0x8B, 0x72, 0x14, 0x4C, 0x03, 0xD8, 0x85, 0xF6, 0x74, 0x77, 0x44, 0x8B, 0x52, 0x18, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x33, 0xC0, 0x45, 0x85, 0xD2, 0x74, 0x5B, 0x48, 0x8B, 0xD7, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x0F, 0xB7, 0x0A, 0x41, 0x3B, 0xC9, 0x74, 0x0D, 0xFF, 0xC0, 0x48, 0x83, 0xC2, 0x02, 0x41, 0x3B, 0xC2, 0x72, 0xED, 0xEB, 0x3D, 0x44, 0x8B, 0x44, 0x85, 0x00, 0x4C, 0x03, 0xC3, 0x74, 0x33, 0x41, 0x0F, 0xB6, 0x00, 0x33, 0xD2, 0xB9, 0x05, 0x15, 0x00, 0x00, 0x84, 0xC0, 0x74, 0x24, 0x66, 0x90, 0x6B, 0xC9, 0x21, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC0, 0x03, 0xC8, 0x42, 0x0F, 0xB6, 0x04, 0x02, 0x84, 0xC0, 0x75, 0xEC, 0x81, 0xF9, 0xB4, 0x14, 0x4F, 0x38, 0x75, 0x06, 0x45, 0x8B, 0x3B, 0x4C, 0x03, 0xFB, 0x41, 0xFF, 0xC1, 0x49, 0x83, 0xC3, 0x04, 0x44, 0x3B, 0xCE, 0x72, 0x92, 0x45, 0x33, 0xC9, 0xC7, 0x44, 0x24, 0x20, 0x54, 0x65, 0x73, 0x74, 0x4C, 0x8D, 0x44, 0x24, 0x20, 0xC6, 0x44, 0x24, 0x24, 0x00, 0x48, 0x8D, 0x54, 0x24, 0x20, 0x33, 0xC9, 0x41, 0xFF, 0xD7, 0xBA, 0x7B, 0x00, 0x00, 0x00, 0x48, 0xC7, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0xFF, 0xD4, 0x48, 0x8B, 0x5C, 0x24, 0x60, 0x48, 0x8B, 0x6C, 0x24, 0x68, 0x48, 0x8B, 0x74, 0x24, 0x70, 0x48, 0x8B, 0x7C, 0x24, 0x78, 0x48, 0x83, 0xC4, 0x40, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5C, 0xC3 }; As a side note, several readers have asked how I created this sample code (previously used in another project) which works correctly in both 32-bit and 64-bit modes. The answer is very simple: it begins by storing the original stack pointer value, pushes a value onto the stack, and compares the new stack pointer to the original value. If the difference is 8, the 64-bit code is executed - otherwise, the 32-bit code is executed. While there are certainly more efficient approaches to achieve this outcome, this method is sufficient for demonstration purposes: mov eax, esp ; store stack ptr push 0 ; push a value onto the stack sub eax, esp ; calculate difference pop ecx ; restore stack cmp eax, 8 ; check if the difference is 8 je 64bit_code 32bit_code: xxxx 64bit_code: xxxx By appending this payload to the original headers above, we can generate a valid and functional EXE file. The provided PE headers contain a hardcoded SizeOfImage value of 0x100000 which allows for a maximum payload size of almost 1MB, but this can be increased if necessary. Running this program will display our message box, despite the fact that the PE headers lack any executable sections, or any sections at all in this case: Demonstration #2 - Executable PE with spoofed sections Perhaps more interestingly, it is also possible to create a fake section table using this mode as mentioned earlier. I have created another EXE which follows a similar format to the previous samples, but also includes a single read-only section: The main payload has been stored within this read-only section and the entry-point has been updated to 0x1000. Under normal circumstances, you would expect the program to crash immediately with an access-violation exception due to attempting to execute read-only memory. However, this doesn’t occur here - the target memory region contains RWX permissions and the payload is executed successfully: Notes The sample EXE files can be downloaded here. The proof-of-concepts described above involve appending the payload to the end of the NT headers, but it is also possible to embed executable code within the headers themselves using this technique. The module will fail to load if the AddressOfEntryPoint value is less than the SizeOfHeaders value, but this can easily be bypassed since the SizeOfHeaders value is not strictly enforced. It can even be set to 0, allowing the entry-point to be positioned anywhere within the file. It is possible that this feature was initially designed to allow for very small images, enabling the headers, code, and data to fit within a single memory page. As memory protection is applied per-page, it makes sense to apply RWX to all PTEs when the virtual section size is lower than the page size - it would otherwise be impossible to manage protections correctly if multiple sections resided within a single page. I have tested these EXE files on various different versions of Windows from Vista to 10 with success in all cases. Unfortunately it has very little practical use in the real world as it won’t deceive any modern disassemblers - nonetheless, it remains an interesting concept.</description>
      <author> (x86matthew)</author>
      <guid>https://secret.club/2023/06/05/spoof-pe-sections.html</guid>
      <pubDate>Sun, 11 Jun 2023 21:03:51 GMT</pubDate>
    </item>
    <item>
      <title>The Risks of Staying Put</title>
      <link>https://robinrendle.com/notes/the-risks-of-staying-put/</link>
      <description>The website of Robin Rendle, a designer and writer from the UK.</description>
      <author> ()</author>
      <guid>https://robinrendle.com/notes/the-risks-of-staying-put/</guid>
      <pubDate>Sun, 11 Jun 2023 21:03:51 GMT</pubDate>
    </item>
    <item>
      <title>36 AK Expenses Tracker | Azure Cosmos DB Document Partial Update To Update Wallet Balance</title>
      <link>https://youtube.com/watch?v=YNTU0vne-_8</link>
      <description>Join our Discord Serverhttps://discord.gg/ds4Zh3HxVqSHOW YOUR SUPPORT FOR AK ACADEMY https://www.buymeacoffee.com/akacademy99Hey everyone, in this video, we ...</description>
      <author> (UpFlip
  
  
  
    UpFlip
  




  Verified



    •)</author>
      <guid>https://youtube.com/watch?v=YNTU0vne-_8</guid>
      <pubDate>Sun, 11 Jun 2023 20:02:21 GMT</pubDate>
    </item>
    <item>
      <title>r/programming should shut down from 12th to 14th June</title>
      <link>https://old.reddit.com/r/programming/comments/141oyj9/rprogramming_should_shut_down_from_12th_to_14th/</link>
      <description>Posted in r/programming by u/Tintin_Quarentino • 13,099 points and 531 comments</description>
      <author> (Tintin_Quarentino)</author>
      <guid>https://old.reddit.com/r/programming/comments/141oyj9/rprogramming_should_shut_down_from_12th_to_14th/</guid>
      <pubDate>Sun, 11 Jun 2023 18:04:39 GMT</pubDate>
    </item>
    <item>
      <title>Deploy Blazor WebAssembly to AWS Amplify: Super Fast Deployment in 2 Minutes!</title>
      <link>https://codewithmukesh.com/blog/deploy-blazor-webassembly-to-aws-amplify/</link>
      <description>In this article, we will learn to deploy Blazor WebAssembly to AWS Amplify along with CI/CD with GitHub Actions, providing you with a streamlined development</description>
      <author> (https://facebook.com/iammukeshm)</author>
      <guid>https://codewithmukesh.com/blog/deploy-blazor-webassembly-to-aws-amplify/</guid>
      <pubDate>Sun, 11 Jun 2023 17:06:50 GMT</pubDate>
    </item>
    <item>
      <title>Can you trust ChatGPT’s package recommendations?</title>
      <link>https://vulcan.io/blog/ai-hallucinations-package-risk</link>
      <description>ChatGPT can offer coding solutions, but its tendency for hallucination presents attackers with an opportunity. Here&amp;#39;s what we learned.</description>
      <author> (Bar Lanyado)</author>
      <guid>https://vulcan.io/blog/ai-hallucinations-package-risk</guid>
      <pubDate>Sun, 11 Jun 2023 17:06:46 GMT</pubDate>
    </item>
    <item>
      <title>SSC Protocol</title>
      <link>https://codeblog.jonskeet.uk/2023/06/11/ssc-protocol/</link>
      <description>I’m aware that I haven’t been writing as many blog posts as I’d hoped to about DigiMixer. I expect the next big post to be a comparison of the various protocols that DigiMixer sup…</description>
      <author> ()</author>
      <guid>https://codeblog.jonskeet.uk/2023/06/11/ssc-protocol/</guid>
      <pubDate>Sun, 11 Jun 2023 15:03:04 GMT</pubDate>
    </item>
  </channel>
</rss>