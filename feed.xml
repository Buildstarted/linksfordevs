<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>Immunity</title>
      <link>https://xkcd.com/2557/</link>
      <description></description>
      <author> (About)</author>
      <guid>https://xkcd.com/2557/</guid>
      <pubDate>Mon, 20 Dec 2021 20:02:01 GMT</pubDate>
    </item>
    <item>
      <title>Test tools for .NET and cross-platform apps</title>
      <link>https://devblogs.microsoft.com/visualstudio/vs22-test-tools-for-net-and-cross-platform-apps/</link>
      <description>Visual Studio 2022 brings better test tools to your everyday development with Show in Test Explorer, Remote Testing, Test audio cues, Playwright, and more!</description>
      <author> (Kendra Havens)</author>
      <guid>https://devblogs.microsoft.com/visualstudio/vs22-test-tools-for-net-and-cross-platform-apps/</guid>
      <pubDate>Mon, 20 Dec 2021 19:02:17 GMT</pubDate>
    </item>
    <item>
      <title>[Last Week in .NET #73] – Holiday Road Part Deux</title>
      <link>https://georgestocker.com/2021/12/20/last-week-in-net-73-holiday-road-part-deux/</link>
      <description>This is part two of 2021’s greatest clicks on Last Week in .NET. Today we’ll cover July-Present, and speaking of Presents… have you bought yours yet? Yea, that’s a Christmas…</description>
      <author> ()</author>
      <guid>https://georgestocker.com/2021/12/20/last-week-in-net-73-holiday-road-part-deux/</guid>
      <pubDate>Mon, 20 Dec 2021 19:02:17 GMT</pubDate>
    </item>
    <item>
      <title>Cancelling IAsyncEnumerable in C#</title>
      <link>https://jeremybytes.blogspot.com/2021/12/cancelling-iasyncenumerable-in-c.html</link>
      <description>   IAsyncEnumerable combines the power of IEnumerable (which lets us &amp;quot;foreach&amp;quot;   through items) with the joys of async code (that we can &amp;quot;aw...</description>
      <author> ()</author>
      <guid>https://jeremybytes.blogspot.com/2021/12/cancelling-iasyncenumerable-in-c.html</guid>
      <pubDate>Mon, 20 Dec 2021 19:02:17 GMT</pubDate>
    </item>
    <item>
      <title>The Download: .NET 6, VS Code, WinApp SDK, and XBox at 20</title>
      <link>https://www.youtube.com/watch?app=desktop&amp;v=wAOgAUvC9kY</link>
      <description>Welcome to The Download!  Christina&amp;#39;s back with a new take on an old concept, bringing you the latest developer news of the week, including:0:00 Intro01:28 A...</description>
      <author> (Microsoft Developer
  
  
  
    Microsoft Developer
  




  
    
    
  



    •)</author>
      <guid>https://www.youtube.com/watch?app=desktop&amp;v=wAOgAUvC9kY</guid>
      <pubDate>Mon, 20 Dec 2021 18:02:05 GMT</pubDate>
    </item>
    <item>
      <title>Windows UI Library (WinUI) - Windows apps</title>
      <link>https://docs.microsoft.com/en-us/windows/apps/winui/?WT.mc_id=onedevquestion-c9-winui</link>
      <description>WinUI Libraries for Windows app development.</description>
      <author> (Karl-Bridge-Microsoft)</author>
      <guid>https://docs.microsoft.com/en-us/windows/apps/winui/?WT.mc_id=onedevquestion-c9-winui</guid>
      <pubDate>Mon, 20 Dec 2021 17:03:00 GMT</pubDate>
    </item>
    <item>
      <title>HTTP Toolkit</title>
      <link>https://httptoolkit.tech/</link>
      <description>Beautiful, cross-platform &amp;amp; open-source tools for debugging, testing and building with HTTP(S), on Windows, Linux &amp;amp; Mac.</description>
      <author> ()</author>
      <guid>https://httptoolkit.tech/</guid>
      <pubDate>Mon, 20 Dec 2021 16:15:17 GMT</pubDate>
    </item>
    <item>
      <title>In 2021, the Internet went for TikTok, space and beyond</title>
      <link>https://blog.cloudflare.com/popular-domains-year-in-review-2021/</link>
      <description>Join us in our Year in Review 2021 focused on the most popular domains-websites.</description>
      <author> (Jo&amp;#227;o Tom&amp;#233;)</author>
      <guid>https://blog.cloudflare.com/popular-domains-year-in-review-2021/</guid>
      <pubDate>Mon, 20 Dec 2021 16:02:18 GMT</pubDate>
    </item>
    <item>
      <title>Supercharging your cloud applications with Orleans</title>
      <link>https://www.youtube.com/watch?app=desktop&amp;v=wYXSZ9VAQCM</link>
      <description>This session will show you how to build cloud native applications using Orleans. It does not require prior knowledge of Orleans or concepts such as actors. I...</description>
      <author> (dotNET
  
  
  
    dotNET
  






    •)</author>
      <guid>https://www.youtube.com/watch?app=desktop&amp;v=wYXSZ9VAQCM</guid>
      <pubDate>Mon, 20 Dec 2021 15:02:05 GMT</pubDate>
    </item>
    <item>
      <title>Getting Roslyn (C# compiler) and Language versions - G&amp;#233;rald Barr&amp;#233;</title>
      <link>https://www.meziantou.net/getting-roslyn-csharp-compiler-and-language-versions.htm</link>
      <description>In this post, I describe how to find the version of Roslyn and the language version currently in use in a project.</description>
      <author> (G&amp;#233;rald Barr&amp;#233;)</author>
      <guid>https://www.meziantou.net/getting-roslyn-csharp-compiler-and-language-versions.htm</guid>
      <pubDate>Mon, 20 Dec 2021 15:02:05 GMT</pubDate>
    </item>
    <item>
      <title>My Parents Collect Cans for a Living</title>
      <link>https://www.thenation.com/article/society/parents-collecting-cans-bottles/</link>
      <description>When people ask about my family now, I tell them not with embarrassment or shame but with pride.</description>
      <author> (https://www.thenation.com/authors)</author>
      <guid>https://www.thenation.com/article/society/parents-collecting-cans-bottles/</guid>
      <pubDate>Mon, 20 Dec 2021 15:02:04 GMT</pubDate>
    </item>
    <item>
      <title>GitHub - mendel5/alternative-front-ends: Overview of alternative open source front-ends for popular internet platforms (e.g. YouTube, Twitter, etc.)</title>
      <link>https://github.com/mendel5/alternative-front-ends</link>
      <description>Overview of alternative open source front-ends for popular internet platforms (e.g. YouTube, Twitter, etc.) - GitHub - mendel5/alternative-front-ends: Overview of alternative open source front-ends...</description>
      <author> (mendel5)</author>
      <guid>https://github.com/mendel5/alternative-front-ends</guid>
      <pubDate>Mon, 20 Dec 2021 15:02:04 GMT</pubDate>
    </item>
    <item>
      <title>How to create your own .NET CLI tools to make your life easier</title>
      <link>https://www.youtube.com/watch?v=JNDgcBDZPkU</link>
      <description>Check out my courses: https://nickchapsas.comBecome a Patreon and get source code access: https://www.patreon.com/nickchapsasHello everybody I&amp;#39;m Nick and in ...</description>
      <author> (Nick Chapsas
  
  
  
    Nick Chapsas
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=JNDgcBDZPkU</guid>
      <pubDate>Mon, 20 Dec 2021 13:02:07 GMT</pubDate>
    </item>
    <item>
      <title>Negative feature response: Protect the user from accidental collection deletion</title>
      <link>https://ayende.com/blog/195809-C/negative-feature-response-protect-the-user-from-accidental-collection-deletion?Key=4da9c1f5-b86c-4595-9481-7182947fbc56</link>
      <description>A RavenDB user has accidentally deleted a collection. They intended to do something else, probably, but&amp;amp;hellip;&amp;amp;nbsp; They have a backup, but as you can imag...</description>
      <author> ()</author>
      <guid>https://ayende.com/blog/195809-C/negative-feature-response-protect-the-user-from-accidental-collection-deletion?Key=4da9c1f5-b86c-4595-9481-7182947fbc56</guid>
      <pubDate>Mon, 20 Dec 2021 13:02:05 GMT</pubDate>
    </item>
    <item>
      <title>Against 3X Speed - David Perell</title>
      <link>https://perell.com/essay/against-3x-speed/</link>
      <description>It’s okay to not know everything. The world rewards people who develop expertise. When that expertise is unique, it’s developed through direct experience and deliberate reflection.</description>
      <author> ()</author>
      <guid>https://perell.com/essay/against-3x-speed/</guid>
      <pubDate>Mon, 20 Dec 2021 12:01:43 GMT</pubDate>
    </item>
    <item>
      <title>This is my Mum&amp;#39;s 80th birthday present.</title>
      <link>http://fourlightyears.blogspot.com/2021/12/this-is-my-mums-80th-birthday-present.html</link>
      <description> 20 Dec 2021 andrew.stuart@supercoders.com.au It&amp;#39;s a rotary phone from the 1970&amp;#39;s.  This is the sort of phone we had in the house when I was...</description>
      <author> ()</author>
      <guid>http://fourlightyears.blogspot.com/2021/12/this-is-my-mums-80th-birthday-present.html</guid>
      <pubDate>Mon, 20 Dec 2021 10:01:58 GMT</pubDate>
    </item>
    <item>
      <title>Third-Party DI Container And Autofac - Code Maze</title>
      <link>https://code-maze.com/using-autofac-dotnet/</link>
      <description>Autofac is a popular and flexible third-party dependency injection container for .NET application development.</description>
      <author> (()x)</author>
      <guid>https://code-maze.com/using-autofac-dotnet/</guid>
      <pubDate>Mon, 20 Dec 2021 09:02:33 GMT</pubDate>
    </item>
    <item>
      <title>286: is not null</title>
      <link>https://www.mergeconflict.fm/285</link>
      <description>More C# features coming at you! Ones that you totally need to know about!</description>
      <author> (soundbite.fm)</author>
      <guid>https://www.mergeconflict.fm/285</guid>
      <pubDate>Mon, 20 Dec 2021 09:02:30 GMT</pubDate>
    </item>
    <item>
      <title>Use calendar, mailbox settings and Teams presence in ASP.NET Core hosted Blazor WASM with Microsoft Graph</title>
      <link>https://damienbod.com/2021/12/20/use-calendar-mailbox-settings-and-teams-presence-in-asp-net-core-hosted-blazor-wasm-with-microsoft-graph/</link>
      <description>This article shows how to use Microsoft Graph with delegated permissions in a Blazor WASM ASP.NET Core hosted application. The application uses Microsoft.Identity.Web and the BFF architecture to au…</description>
      <author> (damienbod)</author>
      <guid>https://damienbod.com/2021/12/20/use-calendar-mailbox-settings-and-teams-presence-in-asp-net-core-hosted-blazor-wasm-with-microsoft-graph/</guid>
      <pubDate>Mon, 20 Dec 2021 09:02:29 GMT</pubDate>
    </item>
    <item>
      <title>.NET Advent Calendar - .NET Advent Calendar 2021, Day 18</title>
      <link>https://dotnet.christmas/2021/18</link>
      <description>One blog post every day until Christmas.</description>
      <author> (Dustin Moris Gorski)</author>
      <guid>https://dotnet.christmas/2021/18</guid>
      <pubDate>Mon, 20 Dec 2021 09:02:29 GMT</pubDate>
    </item>
    <item>
      <title>TypeScript for Pythonistas</title>
      <link>https://medium.com/@Pilot-EPD-Blog/typescript-for-pythonistas-f90bbb297f0a</link>
      <description>Authored by Allison Kaptur</description>
      <author> (https://medium.com/@Pilot-EPD-Blog)</author>
      <guid>https://medium.com/@Pilot-EPD-Blog/typescript-for-pythonistas-f90bbb297f0a</guid>
      <pubDate>Mon, 20 Dec 2021 06:02:25 GMT</pubDate>
    </item>
    <item>
      <title>Getting started with #DynamoDB in C#</title>
      <link>https://blog.dotnetframework.org/2021/12/14/getting-started-with-dynamodb-in-c/</link>
      <description>DynamoDB is a good way to get started with NoSQL databases, and being hosted in AWS, means that you don’t have to worry about servers or backups. Now, a few assumptions before starting. I&amp;amp;#82…</description>
      <author> (Infinite Loop Development Ltd)</author>
      <guid>https://blog.dotnetframework.org/2021/12/14/getting-started-with-dynamodb-in-c/</guid>
      <pubDate>Mon, 20 Dec 2021 06:02:21 GMT</pubDate>
    </item>
    <item>
      <title>How to Upgrade a Codebase from .NET Framework to .NET 6</title>
      <link>https://christianfindlay.com/2021/12/12/upgrade-to-net-6/</link>
      <description>
You&amp;#39;re probably here because your business has a legacy codebase, and you need to upgrade it. You&amp;#39;re not alone, and almost every business goes through a similar thing at some stage. This post is part guide and part food for thought. Here, the focus is on upgrading a back-end from ASP.NET to ASP .NET Core, but you will find this helpful if you need to upgrade any code from Framework to .NET 6. You may want to break your architecture up into Microservices, or you may want to consolidate microservices back into a single service. You may want to upgrade your WPF app to WPF on .NET 6. Whatever your goal is, the process for upgrading to .NET 6 is going to be more or less the same.



Your Codebase



You have a legacy system running on .NET Framework 4.x. It&amp;#39;s probably a bit of a mess with some .NET Framework libraries, some .NET Standard or .NET Core libraries scattered around. Perhaps you share some code with Xamarin or UWP apps. Some of your code may be ready to come along for the ride, and some may not. You will go through a process involving sorting through the projects and determining what to upgrade, abandon, or rewrite.



Refactor, Rewrite or Bifurcate?



You will need to look at each of your projects one by one and decide what to do with them. You may find that you can simply delete some old projects. But, you will need to decide what to do with important code.



Refactoring involves upgrading the existing code to work in the new environment under .NET 6. It will probably also target .NET Framework with&amp;#160;multi-targeting. This is the best-case scenario, and I&amp;#39;ll explain why shortly.



Rewriting involves rewriting the code from scratch. The new code probably won&amp;#39;t run on .NET Framework. It will only target .NET 6. This requires the most work.



Bifurcation means taking the old .NET Framework code, copying and pasting it into a new .NET 6 project, and getting it to run there. You should prefer refactoring to bifurcation, but you may not be able to do this in all scenarios. More on this soon.



The Roadmap



Are you going to upgrade all the code in the background and then cut across to .NET 6 when you finish the process? Or, can you upgrade each project in the legacy codebase in a way that allows you to keep maintaining the legacy codebase while also targeting .NET 6?



The latter involves some risk because the upgrade process could disrupt the legacy system, but the risk may well be worth it, and here is why...



Any code rewrites involve maintaining two sets of code: the legacy code and the new code. You will need to maintain both until you can delete the legacy code. If the legacy system is still running, you need to do bug fixes and potentially feature enhancements until you turn off the legacy system. If the code exists in two places, you need to apply the fixes and features to two codebases. Do not underestimate how much work this requires. Think about the maintenance of your current system. Is that onerous? Yes. Of course, it is. Now imagine doing that maintenance twice. You are doubling your workload. Not only do you have to fix the issue in the existing live system, but you also need to merge those changes into the new .NET 6 codebase. Nothing could be more frustrating and time-consuming for developers.



The good news is that .NET Framework code is mostly compatible with modern .NET Code. You can refactor at least part of the existing legacy system and take the benefits of those refactors into your new .NET 6 codebase. As mentioned, this adds a little risk to the legacy system, but it also means that improvements to your legacy system add value to your .NET 6 codebase. The key is multi-targeting. You can convert your existing .NET Framework projects to target newer formats such as .NET Standard or .NET 6. That code will run on .NET Framework in your legacy system and on .NET 6. It can also target platforms such as UWP or Xamarin.



So, your roadmap needs to include some multi-targeting. How much is up to you and your team, but the more you can multi-target, the less double maintenance you will require.



Changing the Data Store(s)



You may be breaking up your data store for Microservices. Or, you may be consolidating multiple data stores. Either way, you should probably do this before or after the technology upgrade. Changing data stores in the middle of an upgrade will be far more difficult. These are ultimately different processes and you shouldn&amp;#39;t confuse one with the other. Upgrading your code to .NET 6 will put you in a very good position to move to Microservices as the next step.



Step 1 - Understand Your Dependencies



You should take some time to survey your projects and how they depend on one another. If you have a tool to generate a dependency diagram, this will be very helpful. It will also be helpful to survey external NuGet packages and so on that, your projects depend on. Do you use&amp;#160;NuGet packages&amp;#160;that don&amp;#39;t exist in .NET 6?



NDepend is a Visual Studio tool that generates amazing Dependency Diagrams



Step 2 - Upgrade the Visual Studio Project (csproj) Format



Legacy codebases tend to use the old csproj format. This format is overly verbose and requires a lot of explicit definitions. The newer format (SDK Style) requires minimal explicit configuration and enables you to compile the code (target) for .NET Framework and .NET 6 or .NET Standard. You should upgrade as many of your .NET Framework projects as you can. At the very least, you will find maintaining the newer project format more manageable, and you will see less Git history for your projects. Focus on projects you think you will need in the new .NET 6 system, but it&amp;#39;s even better if you can upgrade all projects.



You can use the&amp;#160;.NET Upgrade Assistant&amp;#160;to help you. See&amp;#160;this section&amp;#160;on using the upgrade tool or&amp;#160;migrating by hand, along with some&amp;#160;preparation.



Start the upgrade process on the lowest level libraries first - i.e., the libraries that other libraries depend on and work your way up the dependency graph. Leave the highest level projects like Web API or UI code until last. They are likely to change the most and require the most thought.



A typical old style csproj



Step 3 - Multi-target .NET Framework and .NET Standard or .NET 6



Firstly, you should read through this&amp;#160;documentation&amp;#160;from Microsoft.



When your projects use the SDK Style project format, you can attempt to compile to .NET 6 or .NET Standard. See this&amp;#160;documentation&amp;#160;on multi-targeting. You should see this&amp;#160;chart&amp;#160;if you need to target Xamarin or UWP. There is some further reading&amp;#160;here. That might require you to target .NET Framework and .NET Standard 2.0 or 2.1 instead of .NET 6. If that&amp;#39;s the case, the library will still run fine on .NET 6. But, if you don&amp;#39;t need Xamarin or UWP, you can target .NET Framework and .NET 6.




https://gist.github.com/MelbourneDeveloper/8f3d8b882f3554dfaa2780e92262182a
This is a modern multi-targeting csproj file. It covers .NET 4.5, UWP, Xamarin up to .NET 6



Step 4 - Fix Code Issues



Targeting the newer .NET version such as .NET 6 will cause some compilation and dependency issues. Some .NET Framework libraries may not have versions&amp;#160;compatible&amp;#160;with .NET 6. You need to&amp;#160;fix all the code issues&amp;#160;that appear.&amp;#160;



If .NET 6 is missing a library that you use in .NET Framework, you will need to find an alternative or write the code yourself. The best thing is to find a more recent supported library and replace the existing code with code that uses the new library. Otherwise, you will need to use&amp;#160;#if&amp;#160;with different code paths for both targets.



You don&amp;#39;t have to fix all compilation issues straight away. You can leave some targets in a non-compilational state while gradually fixing up each project. The main thing you need to do is ensure that the .NET Framework version still compiles. This ensures you can still release versions of your legacy system. You will need to create a process for creating builds without the .NET 6 targets until that code compiles. One approach might be to remove all the .NET 6 targets until it compiles.



You can take this opportunity to refactor your existing code and add unit tests, and so on. Or, you can choose to avoid risky refactors. The latter is sensible because refactors can break the legacy system. You should be able to upgrade all your projects without changing too much of the original code. Where .NET 6 is incompatible with legacy code, you can use #if so that the old code stays exactly the same.



There are some tools that you have at your disposal to help you. You can use&amp;#160;partial classes&amp;#160;so that the majority of the class exists in one file and then two other versions for the .NET 6 and .NET Framework specific code. You&amp;#160;conditionally&amp;#160;include/exclude files based on the target. You can do the same for NuGet packages. You don&amp;#39;t have to keep the same dependency set for .NET Framework as you would with .NET 6.



Work through all the code (except for the highest level projects) until you don&amp;#39;t see any compilation issues.



Step 5 - High-Level Projects



By now, your low-level dependency projects should be compiling for .NET 6 or .NET Standard, but you still need to convert the highest level code. For Web API back-ends, you will need to convert those from ASP .NET to ASP .NET Core.&amp;#160;



If those projects have code that you can move to lower-level projects, you should do that. For example, you may have some DTO classes in your highest-level project. Most of those to a shared library so that the high-level .NET Framework and .NET 6 projects can access the shared code. These high-level projects should only include the specifics of the Web API. They should not contain logic. Web API projects should only include endpoint controllers, HTTP pipeline code, IoC composition, routing configuration, etc.&amp;#160;



You will probably need to maintain two of the highest-level projects. For example, you may keep an ASP.NET MVC app and an ASP .NET Core Web API app. That means you can compile and run the original Web API and the new one from the same solution. You will probably need to rewrite large chunks of the highest-level projects. But, these projects will share most of the same project dependencies, and you can share code files by adding&amp;#160;files as links. Try to minimize the amount of duplicate code.&amp;#160;



My experience tells me that you can share a lot of code between ASP .NET MVC Web Apis and ASP.NET Core Web Apis. You should probably keep the endpoints exactly the same between the two versions because this allows you to run the same code side by side.



Step 6 - Testing



You should already have unit tests and integration tests in your system. If you do, you should run them regularly to ensure that the new API works the same as the old API. If not, should add them where possible during the upgrade process. The good news is that ASP .NET Core has a good&amp;#160;integration testing&amp;#160;system, so you should implement this as early as possible in the upgrade process.



If you&amp;#39;ve been careful to keep the original .NET Framework code intact, you can now run both versions of the back-end side by side and theoretically run your front-end against the new back-end. Testing your front-end should be the final part of the process. You will find weird issues and this point and you will need to fix the code in an iterative process until the app behaves the same as the old version. You should also add more and more tests to make the codebase doesn&amp;#39;t go backwards during this process. The performance of .NET 6 is leagues ahead of .NET Framework so the whole process will be worth it.



Database Code



The code that you will probably find most difficult to upgrade will be database code. If you use Dapper, you probably won&amp;#39;t find much difference between .NET Framework and .NET 6. However, Entity Framework is very different to Entity Framework Core. Some EF code will compile for EF Core but have different results and execute different SQL. This is why testing is important, and you should create a set of database tests that ensure that new database access code running on .NET 6 does the same thing as the .NET Framework code.



Should We Do All This in a Separate Branch?



Inevitably you&amp;#39;re going to need to decide whether you upgrade and retarget the .NET Framework projects one by one, and amongst normal development, or if you&amp;#39;re going to branch for several months and then merge back. There are a variety of circumstances which will influence you here, but here is my two cents.



Upgrade and retarget as many projects as you can before you start working on a separate branch. This introduces some risk but you want to minimize the time you are working on code that is not running in production. If you are squirreling code away in a branch for a long period of time, it becomes less and less like the production code and you will have to deal with more and more merge conflicts.&amp;#160;



Tips



Keep filenames the same during the whole process. If you move files in to new folders etc. you will have a lot of difficulty with merging



Don&amp;#39;t repeat yourself. Look for ways to avoid copying and pasting code. There are many and .NET Framework is not that different from .NET 6 so you can usually find a way to share code between the two



Building up tests is your key to ensuring that both the old and new codebases continue to work. If you are worried about breaking something, it&amp;#39;s because you need more tests.



Don&amp;#39;t get sidetracked with refactoring. You will feel the urge to refactor but you probably shouldn&amp;#39;t unless you are confident that the old system has enough code coverage to stop you from breaking the system.



Wrap-Up



Upgrading a codebase involves the same software development principles that you&amp;#39;d apply to anything else. If you&amp;#39;re doing it well, you wil maximise the benefit of your changes to the legacy and new system. If you&amp;#39;re doing it poorly, you will duplicate every line of code in the system. Everything about the decision making process will involve tradeoffs around risk and the amount of work you need to do. That becomes a business decision, but you have to adjust and communicate as a team to pull this off. There is no recipe for success but any team that does not communicate, understand the decisions being made and make the best guesses about the path will surely face a lot of pain.







You will probably have a crossover period where you need to run the legacy code and the new code side by side, but ultimately, your reward will be deleting the .NET Framework specific code, and turning off the old back-end and seeing those performance benefits.
</description>
      <author> ()</author>
      <guid>https://christianfindlay.com/2021/12/12/upgrade-to-net-6/</guid>
      <pubDate>Mon, 20 Dec 2021 06:02:20 GMT</pubDate>
    </item>
    <item>
      <title>ASP.NET Core 6 – transparent WebSockets</title>
      <link>https://ingebrigtsen.blog/2021/12/17/asp-net-core-6-transparent-websockets/</link>
      <description>Lets face it; I’m a framework builder. In the sense that I build stuff for other developers to use. The goal when doing so is that the developer using what’s built should feel empowered…</description>
      <author> (Einar)</author>
      <guid>https://ingebrigtsen.blog/2021/12/17/asp-net-core-6-transparent-websockets/</guid>
      <pubDate>Mon, 20 Dec 2021 06:02:20 GMT</pubDate>
    </item>
    <item>
      <title>Azure Container Apps, Bicep and GitHub Actions | I CAN MAKE THIS WORK</title>
      <link>https://blog.johnnyreilly.com/2021/12/19/azure-container-apps-bicep-and-github-actions/</link>
      <description>Azure Container Apps are an exciting way to deploy containers to Azure. This post shows how to deploy the infrastructure for an Azure Container App to Azure using Bicep and GitHub Actions. The Azure Container App documentation features quickstarts for deploying your first container app using both the Azure Portal and the Azure CLI. These are great, but there&amp;#39;s a gap if you prefer to deploy using Bicep and you&amp;#39;d like to get your CI/CD setup right from the beginning. This post aims to fill that gap.</description>
      <author> (https://twitter.com/johnny_reilly)</author>
      <guid>https://blog.johnnyreilly.com/2021/12/19/azure-container-apps-bicep-and-github-actions/</guid>
      <pubDate>Mon, 20 Dec 2021 06:02:20 GMT</pubDate>
    </item>
    <item>
      <title>String Interpolation Trickery and Magic with C# 10 and .NET 6</title>
      <link>https://btburnett.com/csharp/2021/12/17/string-interpolation-trickery-and-magic-with-csharp-10-and-net-6</link>
      <description>This blog is one of The December 17th entries on the 2021 C# Advent Calendar. Thanks for having me again Matt!</description>
      <author> (Brant Burnett)</author>
      <guid>https://btburnett.com/csharp/2021/12/17/string-interpolation-trickery-and-magic-with-csharp-10-and-net-6</guid>
      <pubDate>Mon, 20 Dec 2021 06:02:20 GMT</pubDate>
    </item>
    <item>
      <title>Akka for Advent</title>
      <link>https://backwardsincompatibilities.wordpress.com/2021/12/13/akka-for-advent/</link>
      <description>I’ve been using Akka.Net quite a bit at work lately, so for this years F# advent calendar you’re getting a blog post about using Akka.Net and Akkling with F#. Before people start lookin…</description>
      <author> (December 13, 2021 &amp;#183;							by bhall &amp;#183;							in Uncategorized														&amp;#183; 2 Comments)</author>
      <guid>https://backwardsincompatibilities.wordpress.com/2021/12/13/akka-for-advent/</guid>
      <pubDate>Mon, 20 Dec 2021 06:02:20 GMT</pubDate>
    </item>
    <item>
      <title>PagerDuty’s Security Training for Engineers</title>
      <link>https://www.codingblocks.net/podcast/pagerdutys-security-training-for-engineers/</link>
      <description>We&amp;#39;re taking our time as we discuss PagerDuty&amp;#39;s Security Training presentations and what it means to &amp;quot;roll the pepper&amp;quot; while Michael is embarrassed in front of the whole Internet, Franklin Allen Underwood is on a full name basis, and don&amp;#39;t talk to Joe about corn.</description>
      <author> (About Michael Outlaw)</author>
      <guid>https://www.codingblocks.net/podcast/pagerdutys-security-training-for-engineers/</guid>
      <pubDate>Mon, 20 Dec 2021 03:02:27 GMT</pubDate>
    </item>
    <item>
      <title>Document your .NET code with DocFX and GitHub Actions</title>
      <link>https://blog.taranissoftware.com/document-your-net-code-with-docfx-and-github-actions</link>
      <description>In this article I show how to use XML doc comments, DocFX and GitHub Actions to automatically build and publish documentation for your .NET code.</description>
      <author> ()</author>
      <guid>https://blog.taranissoftware.com/document-your-net-code-with-docfx-and-github-actions</guid>
      <pubDate>Mon, 20 Dec 2021 03:02:26 GMT</pubDate>
    </item>
    <item>
      <title>The Big DevOps Misunderstanding</title>
      <link>https://wolfoliver.medium.com/the-big-devops-misunderstanding-8435a910a5fd</link>
      <description>When the term DevOps came up it was all about a simple idea:</description>
      <author> (https://wolfoliver.medium.com)</author>
      <guid>https://wolfoliver.medium.com/the-big-devops-misunderstanding-8435a910a5fd</guid>
      <pubDate>Mon, 20 Dec 2021 02:02:26 GMT</pubDate>
    </item>
    <item>
      <title>exa &amp;#183; a modern replacement for ls</title>
      <link>https://the.exa.website/</link>
      <description>No — exa has, in my opinion, much saner defaults than ls, so while the available command-line options are similar, they are not exactly the same. Most of the common options will work consistently, though. For example, exa prints human-readable file sizes by default, so the -h option no longer applies.</description>
      <author> (@cairnrefinery)</author>
      <guid>https://the.exa.website/</guid>
      <pubDate>Mon, 20 Dec 2021 01:02:06 GMT</pubDate>
    </item>
    <item>
      <title>Microsoft Visual Studio Offline Packages &amp;#183; Hossam Barakat</title>
      <link>https://www.hossambarakat.net/2020/06/24/fix-error-NU1101/</link>
      <description>I use Azure DevOps as my build pipelines for a lot of projects, I have faced the following error recently:</description>
      <author> ()</author>
      <guid>https://www.hossambarakat.net/2020/06/24/fix-error-NU1101/</guid>
      <pubDate>Mon, 20 Dec 2021 01:02:05 GMT</pubDate>
    </item>
    <item>
      <title>The bulldozer vs vetocracy political axis</title>
      <link>https://vitalik.eth.limo/general/2021/12/19/bullveto.html</link>
      <description>2021 Dec 19 
See all posts</description>
      <author> ()</author>
      <guid>https://vitalik.eth.limo/general/2021/12/19/bullveto.html</guid>
      <pubDate>Mon, 20 Dec 2021 00:02:29 GMT</pubDate>
    </item>
    <item>
      <title>Markus Captain Kaarlonen - Space Debris</title>
      <link>https://markuskaarlonen.com/space-debris</link>
      <description>Space Debris is an Amiga mod I composed back in 1991. This is a short story about how I made the song, and what it was like to make music on the Amiga. If you don&amp;#39;t know what &amp;quot;Amiga&amp;quot; or &amp;quot;mods&amp;quot; are, no worries, just read on!</description>
      <author> ()</author>
      <guid>https://markuskaarlonen.com/space-debris</guid>
      <pubDate>Mon, 20 Dec 2021 00:02:29 GMT</pubDate>
    </item>
    <item>
      <title>A Step-By-Step Startup Guide For Bootstrappers</title>
      <link>https://mihaisplace.blog/2021/12/18/a-step-by-step-startup-guide-for-bootstrappers/</link>
      <description>After reading various books, essays, and blog posts on what it takes to build a startup I&amp;#39;ve decided to create a step-by-step guide for it that is all-encompassing. Note that this content is heavily influenced by Lean Startup thinking and Running Lean by Ash Maurya, which in my opinion are the best books on succeeding with startup projects as a bootstrapper. A bootstrapper is someone who builds quickly themselves or with a small team and takes as little capital as they can in the early stages. I realize that there is some bias here as there are many other philosophies to building a startup in regards to investors, hard-tech, research projects, or geographical location. I believe that US-based tech founders who don&amp;#39;t mind being technical, and funding their startup without taking too much initial capital will deeply resonate with this guide. For everyone else, I&amp;#39;m sure there is something for you here as well, though one or two of the steps may not apply to you or be relevant.</description>
      <author> ()</author>
      <guid>https://mihaisplace.blog/2021/12/18/a-step-by-step-startup-guide-for-bootstrappers/</guid>
      <pubDate>Mon, 20 Dec 2021 00:02:29 GMT</pubDate>
    </item>
    <item>
      <title>A mental model for decentralization</title>
      <link>https://jacobobryant.com/p/mental-model-decentralization/</link>
      <description>How much decentralization do we need? If there&amp;#39;s too little, then software will stagnate from lack of competition; if there&amp;#39;s too much, then it&amp;#39;ll stagnate from lack of coordination.</description>
      <author> ()</author>
      <guid>https://jacobobryant.com/p/mental-model-decentralization/</guid>
      <pubDate>Mon, 20 Dec 2021 00:02:29 GMT</pubDate>
    </item>
    <item>
      <title>COLODEBUG: a simple way to improve bash script debugging</title>
      <link>https://johannes.truschnigg.info/writing/2021-12_colodebug/</link>
      <description>In this article, I will show you an easy-to-use, simple, and non-disruptive way to extend a GNU bash script by a few lines that can help make sense of its execution flow at runtime a fair bit easier. Using this method will also allow you to effortlessly add a “verbose” execution mode to scripts you create or extend. It also improves the usefulness of set -x aka xtrace mode. The method is compatible with zsh, and maybe also other advanced Bourne-style shells.</description>
      <author> ()</author>
      <guid>https://johannes.truschnigg.info/writing/2021-12_colodebug/</guid>
      <pubDate>Mon, 20 Dec 2021 00:02:28 GMT</pubDate>
    </item>
    <item>
      <title>My Favorite Board Games and How I Play Them</title>
      <link>https://www.jimwestergren.com/favorite-board-games</link>
      <description>&amp;quot;If we did all the things we are capable of, we would literally astound ourselves.&amp;quot; - Thomas A. Edison</description>
      <author> (full about page)</author>
      <guid>https://www.jimwestergren.com/favorite-board-games</guid>
      <pubDate>Mon, 20 Dec 2021 00:02:28 GMT</pubDate>
    </item>
    <item>
      <title>I retired so I can focus on my open source project | Adama Language</title>
      <link>http://www.adama-lang.org/blog/retirement-going-all-in/</link>
      <description>Adama is about to get a whole lot of love, and I intend to talk strategy today. As a side project, I could wander the desert for a while without much progress. It was easy to forgive as there was other shit distracting me, and my role as  principal engineer was already hard enough.</description>
      <author> ()</author>
      <guid>http://www.adama-lang.org/blog/retirement-going-all-in/</guid>
      <pubDate>Mon, 20 Dec 2021 00:02:28 GMT</pubDate>
    </item>
    <item>
      <title>The Non-Productive Programmer (NPP)</title>
      <link>https://gerlacdt.github.io/posts/nonproductive-programmer/</link>
      <description>We all know them: programmers with long term experience stuck on a low-level of our craft not corresponding to their quantity of experience. Great programmers are creative workers and problem-solvers and one of their most important traits is: never stop learning &amp;amp;ndash; but getting stuck in its own comfort zone and becoming reluctant to change is deeply wired into human nature (Humans are hard-wired to follow the path of least resistance).</description>
      <author> (Daniel Gerlach)</author>
      <guid>https://gerlacdt.github.io/posts/nonproductive-programmer/</guid>
      <pubDate>Mon, 20 Dec 2021 00:02:28 GMT</pubDate>
    </item>
  </channel>
</rss>