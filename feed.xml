<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>Under Deconstruction: The State of Shopify’s Monolith</title>
      <link>https://engineering.shopify.com/blogs/engineering/shopify-monolith</link>
      <description>Ruby on Rails is a great framework for rapidly building beautiful web applications that users and developers love. But if an application is successful, there’s usually continued investment, resulting in additional features and increased overall system complexity.
Shopify’s core monolith has over 2.8 million lines of Ruby code and 500,000 commits. Rails doesn’t provide patterns or tooling for managing the inherent complexity and adding features in a structured, well-bounded way.
That’s why, over three years ago, Shopify founded a team to investigate how to make our Rails monoliths more modular. The goal was to help us scale towards ever increasing system capabilities and complexity by creating smaller, independent units of code we called components. The vision went like this:

We can more easily onboard new developers to just the parts immediately relevant to them, instead of the whole monolith.
Instead of running the test suite on the whole application, we can run it on the smaller subset of components affected by a change, making the test suite faster and more stable.
Instead of worrying about the impact on parts of the system we know less well, we can change a component freely as long as we’re keeping its existing contracts intact, cutting down on feature implementation time.

In summary, developers should feel like they are working on a much smaller app than they actually are.
It’s been 18 months since we last shared our efforts to make our Rails monoliths more modular. I’ve been working on this modularity effort for the last two and a half years, currently on a team called Architecture Patterns. I’ll lay out the current state of my team’s work, and some things we’d do differently if we started fresh right now.
The Status Quo
We generally stand by the original ideas as described in Deconstructing the Monolith, but almost all of the details have changed.  We make consistent progress, but it's important to note that making changes at this scale requires a significant shift in thinking for a critical mass of contributors, and that takes time.
While we’re far from finished, we already reap the benefits of our work. The added constraints on how we write our code trigger deep software design discussions throughout the organization. We see a mindset shift across our developers with a stronger focus on modular design. When making a change, developers are now more aware of the consequences on the design and quality of the monolith as a whole. That means instead of degrading the design of existing code, new feature implementations now more often improve it. Parts of the codebase that received heavy refactoring in recent years are now easier to understand because their relationship with the rest of the system is clearer.
We automatically triage exceptions to components, enabling teams to act on them without having to dig through the sometimes noisy exception stream for the whole monolith. And with each component explicitly owned by a team, whole-codebase chores like Rails upgrades are easily distributed and collaboratively solved. Shopify is running its main monolith on the newest, unreleased revisions of Rails. The clearly defined ownership for areas of the codebase is one of the factors enabling us to do that.
What We Learned so Far
Our main monolith is one of the oldest, largest Rails codebases on the planet, under continuous development since at least 2006, with hundreds of developers currently adding features.
A refactor on this scale needs to be approached completely differently from smaller efforts. We learned that all large scale changes start

with understanding and influencing developer behavior
at the grassroots
with a holistic perspective on architecture 
with careful application of tooling
with being aware of the tradeoffs involved

Understand Developer Behaviour
A single centralized team can’t make change happen by working against the momentum of hundreds of developers adding features.
Also, it can’t anticipate all the edge cases and have context on all domains of the application. A single team can make simple change happen on a large scale, or complex change on a small scale. To modularize a large monolith though, we need to make complex change happen on a large scale. Even if a centralized team could make it happen, the design would degrade once the team switches its focus to something else. 
That’s why making a fundamental architecture change to a system that’s being actively worked on is in large part a people problem. We need to change the behavior of the average developer on the codebase. We need to all iteratively evolve the system towards the envisioned future together. The developers are an integral part of the system.
Dr. B.J. Fogg, founder of the Behavior Design Lab at Stanford University, developed a model for thinking about behaviors that matches our experiences. The model suggests that for a behavior to occur, three things need to be in place: Ability, Motivation, and Prompt.
Fogg Behaviour Model by  BJ Fogg, PHD
In a nutshell, prompts are necessary for a desired behavior to happen, but they're ineffective unless there's enough motivation and ability. Exceptionally high motivation can, within reason, compensate for low ability and vice versa.
Automated tooling and targeted manual code reviews provide prompts. That’s the easy part. Creating ability and motivation to make positive change is harder. Especially when that goes against common Ruby on Rails community practices and requires a view of the system that’s much larger than the area that most individual developers are working on. Spreading an understanding of what we’re aiming for, and why, is critical.
For example, we invested quite a bit of time and energy into developing patterns to ensure some consistency in how component boundary interfaces are designed. Again and again we pondered: How should components call each other? We then pushed developers to use these patterns everywhere. In hindsight, this strategy didn’t increase developer ability or motivation. It didn’t solve the problems actually holding them back, and it didn’t explain the reasons or long term goals well enough. Pushing for consistency added rules, which always add some friction, because they have to be learned, remembered, and followed. It didn’t make any hard problem significantly easier to solve. In some cases, the patterns were helpful. In other cases, they lead developers to redefine their problem to fit the solution we provided, which degraded the overall state of the monolith.
Today, we’re still providing some general suggestions on interface consistency, but we have a lot less hard rules. We’re focusing on finding the areas where developers are hungry to make positive change, but don’t end up doing it because it’s too hard. Often, making our code more modular is hard because legacy code and tooling are based on assumptions that no longer hold true. One of the most problematic outdated assumptions is that all Active Record models are OK to access everywhere, when in this new componentized world we want to restrict their usage to the component that owns them. We can help developers overcome this problem.
So in the words of Dr. Fogg, these days we’re looking for areas where the prompt is easy, the motivation is present, and we just have to amp up the ability to make things happen.
Foster the Grassroots
As I mentioned, we, as a centralized team, can’t make this change happen by ourselves. So, we work to create a grassroots movement among the developers at Shopify. We aim to increase the number of people that have ability, motivation and prompt to move the system a tiny step further in the right direction.
We give internal talks, write documentation, share wins, embed in other teams, and pair with people all over the company. Embedding and pairing make sure we’re solving the problems that product developers are most struggling with in practice, avoiding what’s often called Ivory Tower Syndrome where the solutions don’t match the problems. It also lets us gain context on different areas of the codebase and the business while helping motivated people achieve goals that align with ours.
As an example, we have a group called the Architecture Guild. The guild has a slack channel for software architecture discussions and bi-weekly meetups. It’s an open forum, and a way to grow more architecture conscious mindsets while encouraging architectural thinking. The Architecture Patterns team provides some content that we think is useful, but we encourage other people to share their thoughts, and most of the contributions come from other teams. Currently, the Architecture Guild has ~400 members and 54 documented meetups with meeting notes and recordings that are shared with all developers at Shopify.
The Architecture Guild grew organically out of the first Componentization team at Shopify after the first year of Componentization. If I were to start a similar effort again today, I’d establish a forum like this from the beginning to get as many people on board with the change as early as possible. It’s also generally a great vehicle to spread software design knowledge that’s siloed in specific teams to other parts of the company.
Other methods we use to create fertile ground for ambitious architecture projects are

the Developer Handbook, an internal online resource documenting how we develop software at Shopify.
Developer Talks, our internal weekly livestreamed and recorded talks about software development at Shopify.

Build Holistic Architecture
Some properties of software are so closely related that they need to be approached in pairs. By working on one property and ignoring its “partner property,” you could end up degrading the system.
Balance Encapsulation With A Simple Dependency Graph
We started out by focusing our work on building a clean public interface around each component to hide the internals. The expectation was that this would allow reasoning about and understanding the behavior of a component in isolation. Changing internals of a component wouldn’t break other components—as long as the interface stays stable.
It’s not that straightforward though. The public interface is what other components depend on; if a lot of components depend on it, it’s hard to change. The interface needs to be designed with those dependencies in mind, and the more components depend on it, the more abstract it needs to be. It’s hard to change because it’s used everywhere, and it will have to change often if it contains knowledge about concrete parts of the business logic.
When we started analyzing the graph of dependencies between components, it was very dense, to the point that every component depended on over half of all the other components. We also had lots of circular dependencies.
Circular Dependancies
Circular dependencies are situations where for example component A depends on component B but component B also depends on component A. But circular dependencies don’t have to be direct, the cycles can be longer than two. For example, A depends on B depends on C depends on A.
These properties of the dependency graph mean that the components can’t be reasoned about, or evolved, separately. Changes to any component in a cycle can break all other components in the cycle. Changes to a component that has almost all other components depend on can break almost all other components. So these changes require a lot of context. A dense, cyclical dependency graph undermines the whole idea of Componentization—it blocks us from making the system feel smaller.
When we ignored the dependency graph, in large parts of the codebase the public interface turned out to just be an added layer of indirection in the existing control flows. This made it harder to refactor these control flows because it added additional pieces that needed to be changed. It also didn’t make it a lot easier to reason about parts of the system in isolation.
 The simplest possible way to introduce a public interface to a private implementation
The diagram shows that the simplest possible way to introduce a public interface could just mean that a previously problematic design is leaked into a separate interface class, making the underlying design problem harder to fix by spreading it into more files.
Discussions about the desirable direction of a dependency often surface these underlying design problems. We routinely discover objects with too many responsibilities and missing abstractions this way.
Perhaps not surprisingly, one of the central entities of the Shopify system is the Shop and so almost everything depends on the Shop class. That means that if we want to avoid circular dependencies, the Shop class can depend on almost nothing. 
Luckily, there are proven tools we can use to straighten out the dependency graph. We can make arrows point in different directions, by either moving responsibilities into the component that depends on them or applying inversion of control. Inversion of control means to invert a dependency in such a way that control flow and source code dependency are opposed. This can be done for example through a publish/subscribe mechanism like ActiveSupport::Notifications.
This strategy of eliminating circular dependencies naturally guides us towards removing concrete implementation from classes like Shop, moving it towards a mostly empty container holding only the identity of a shop and some abstract concepts.
If we apply the aforementioned techniques while building out the public interfaces, the result is therefore much more useful. The simplified graph allows us to reason about parts of the system in isolation, and it even lays out a path towards testing parts of the system in isolation.
Dependencies diagram between Platform, Supporting, and Frontend components
If determining the desired direction of all the dependencies on a component ever feels overwhelming, we think about the components grouped into layers. This allows us to prioritize and focus on cleaning up dependencies across layers first. The diagram above sketches out an example. Here, we have platform components, Platform and Shop Identity, that purely provide functionality to other components. Supporting components, like Merchandising and Inventory, depend on the platform components but also provide functionality to others and often serve their own external APIs. Frontend components, like Online Store, are primarily externally facing. The dependencies crossing the dotted lines can be prioritized and cleaned up first, before we look at dependencies within a layer, for example between Merchandising and Inventory.
Balance Loose Coupling With High Cohesion
Tight coupling with low cohesion and loose coupling with high cohesion
Meaningful boundaries like those we want around components require loose coupling and high cohesion. A good approximation for this is Change Locality: The degree to which code that changes together lives together.
At first, we solely focused on decoupling components from each other. This felt good because it was an easy, visible change, but it still left us with cohesive parts of the codebase that spanned across component boundaries. In some cases, we reinforced a broken state. The consequence is that often small changes to the functionality of the system still meant changes in code across multiple components, for which the developers involved needed to know and understand all of those components.
Change Locality is a sign of both low coupling and high cohesion and makes evolving the code easier. The codebase feels smaller, which is one of our stated goals. And Change Locality can also be made visible. For example, we are working on automation analyzing all pull requests on our codebase for which components they touch. The number of components touched should go down over time.
An interesting side note here is that different kinds of cohesion exist. We found that where our legacy code respects cohesion, it’s mostly informational cohesion—grouping code that operates on the same data. This arises from a design process that starts with database tables (very common in the Rails community). Change Locality can be hindered by that. To produce software that is easy to maintain, it makes more sense to focus on functional cohesion—grouping code that performs a task together. That’s also much closer to how we usually think about our system. 
Our focus on functional cohesion is already showing benefits by making our business logic, the heart of our software, easier to understand.
Create a SOLID foundation
There are ideas in software design that apply in a very similar way on different levels of abstraction—coupling and cohesion, for example. We started out applying these ideas on the level of components. But most of what applies to components, which are really large groups of classes, also applies on the level of individual classes and even methods.
On a class level, the most relevant software design ideas are commonly summarized as the SOLID principles. On a component level, the same ideas are called “package principles.” Here’s a SOLID refresher from Wikipedia:
Single-responsibility principle
A class should only have a single responsibility, that is, only changes to one part of the software's specification should be able to affect the specification of the class.
Open–closed principle
Software entities should be open for extension, but closed for modification.
Liskov substitution principle
Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.
Interface segregation principle
Many client-specific interfaces are better than one general-purpose interface.
Dependency inversion principle
Depend upon abstractions, not concretions.
The package principles express similar concerns on a different level, for example (source):
Common Closure Principle
Classes that change together are packaged together.
Stable Dependencies Principle
Depend in the direction of stability.
Stable Abstractions Principle
Abstractness increases with stability.
We found that it’s very hard to apply the principles on a component level if the code doesn’t follow the equivalent principles on a class and method level. Well designed classes enable well designed components. Also, people familiar with applying the SOLID principles on a class level can easily scale these ideas up to the component level.
So if you’re having trouble establishing components that have strong boundaries, it may make sense to take a step back and make sure your organization gets better at software design on a scale of methods and classes first.
This is again mostly a matter of changing people’s behavior that requires motivation and ability. Motivation and ability can be increased by spreading awareness of the problems and approaches to solving them.
In the Ruby world, Sandi Metz is great at teaching these concepts. I recommend her books, and we’re lucky enough to have her teach workshops at Shopify repeatedly. She really gets people excited about software design.
Apply Tooling Deliberately
To accelerate our progress towards the modular monolith, we’ve made a few major changes to our tooling based on our experience so far.
Use Rails Engines
While we started out with a lot of custom code, our components evolved to look more and more like Rails Engines. We’re doubling down on engines going forward. They are the one modularity mechanism that comes with Rails out of the box. They have the familiar looks and features of Rails applications, but other than apps, we can run multiple engines in the same process. And should we make the decision to extract a component from the monolith, an engine is easily transformed into a standalone application.
Engines don’t fit the use case perfectly though. Some of the roughest edges are related to libraries and tooling assuming a Rails application structure, not the slightly different structure of an engine. Others relate to the fact that each engine can (and probably should) specify its own external gem dependencies, and we need a predictable way to unify them into one set of gems for the host application. Thankfully, there are quite a few resources out there from other projects encountering similar problems. Our own explorations have yielded promising results with multiple production applications currently using engines for modularity, and we’re using engines everywhere going forward.
Define and Enforce Contracts
Strong boundaries require explicit contracts. Contracts in code and documentation allow developers to use a component without reading its implementation, making the system feel smaller.
Initially, we built a hash schema validation library called Component::Schema based on dry-schema. It served us well for a while, but we ran into problems keeping up with breaking changes and runtime performance for checking more complex contracts.
In 2019, Stripe released their static Ruby type checker, Sorbet. Shopify was involved in its development before that release and has a team contributing to Sorbet, as we are using it heavily. Now it’s our go-to tool for expressing input and output contracts on component boundaries. Configured correctly, it has barely any runtime performance impact, it’s more stable, and it provides advanced features like interfaces.
This is what an entrypoint into a component looks like using Component::Schema:



And this is what that entrypoint looks like today, using Sorbet:



Perform Static Dependency Analysis
As Kirsten laid out in the original blog post on Componentization at Shopify, we initially built a call graph analysis tool we called Wedge. It logged all method calls during test suite execution on CI to detect calls between components.
We found the results produced were often not useful. Call graph logging produces a lot of data, so it’s hard to separate the signal from the noise. Sometimes it’s not even clear which component a call is from or to. Consider a method defined in component A which is inherited by a class in component B. If this method is making a call to component C, which component is the call coming from? Also, because this analysis depended on the full test suite with added instrumentation, it took over an hour to run, which doesn’t make for a useful feedback cycle.
So, we developed a new tool called Packwerk to analyze static constant references. For example, the line Shop.first, contains a static reference to Shop and a method call to a method on that class that’s called first. Packwerk only analyzes the static constant reference to Shop. There’s less ambiguity in static references, and because they’re always explicitly introduced by developers, highlighting them is more actionable. Packwerk runs a full analysis on our largest codebase in a few minutes, so we’re able to integrate it with our Pull Request workflow. This allows us to reject changes that break the dependency graph or component encapsulation before they get merged into our main branch.
We’re planning to make Packwerk open source soon. Stay tuned!
Decide to Prioritize Ownership or Boundaries
There are two major ways to partition an existing monolith and create components from a big ball of mud. In my experience, all large architecture changes end up in an incomplete state. Maybe that’s a pessimistic view, but my experience tells me that the temporary incomplete state will at least last longer than you expect. So choose an approach based on which intermediary state is most useful for your specific situation.
One option is to draw lines through the monolith based on some vision of the future and strengthen those lines over time into full fledged boundaries. The other option is to spin off parts of it into tiny units with strong boundaries and then transition responsibilities over iteratively, growing the components over time.
For our main monolith, we took the first approach; our vision was guided by the ideas of Domain Driven Design. We defined components as implementations of subdomains of the domain of commerce, and moved the files into corresponding folders. The main advantage is that even though we’re not finished building out the boundaries, responsibilities are roughly grouped together, and every file has a stewardship team assigned. The disadvantage is that almost no component has a complete, strong boundary yet, because with the components containing large amounts of legacy code, it’s a huge amount of work to establish these. This vision of the future approach is good if well-defined ownership and a clearly visible partition of the app are most important for you—which they were for us because of the huge number of people working on the codebase.
On other large apps within Shopify, we’ve tried out the second approach. The advantage is that large parts of the codebase are in isolated and clean components. This creates good examples for people to work towards. The disadvantage of this approach is that we still have a considerable sized ball of mud within the app that has no structure whatsoever. This spin-off approach is good if clean boundaries are the priority for you.
What We’re Building Right Now
While feature development on the monolith is going on as fast as ever, many developers are making things more modular at the same time. We see an increase of people in a position to do this, and the number of good examples around the codebase is expanding.
We currently have 37 components in our main monolith, each with public entrypoints covering large parts of its responsibilities. Packwerk is used on about a third of the components to restrict their dependencies and protect the privacy of their internal implementation. We’re working on making Packwerk enticing enough that all components will adopt it.
Through increased adoption we’re progressively enforcing properties of the dependency graph. Total acyclicity is the long term goal, but the more edges we can remove from the graph in the short term the easier the system will be to reason about.
We have a few other monolithic apps going through similar processes of componentization right now; some with the goal of splitting into separate services long term, some aiming for the modular monolith. We are very deliberate about when to split functionality out into separate services, and we only do it for good reasons. That’s because splitting a single monolithic application into a distributed system of services increases the overall complexity considerably.
For example, we split out storefront rendering because it’s a read-only use case with very high throughput and it makes sense for us to scale and distribute it separately from the interface that our merchants use to manage their stores. Credit card vaulting is a separate service because it processes sensitive data that shouldn’t flow through other parts of the system.
In addition, we’re preparing to have all new Rails applications at Shopify componentized by default. The idea is to generate multiple separately tested engines out of the box when creating a Rails app, removing the top level app folder and setting up developers for a modular future from the start.
At the same time, we’re looking into some of the patterns necessary to unblock further adoption of Packwerk. First and foremost that means making the dependency graph easy to clean up. We want to encourage inversion of control and more generally dependency inversion, which will probably lead us to use a publish/subscribe mechanism instead of straightforward method calls in many cases.
The second big blocker is efficiently querying data across components without coupling them too tightly. The most interesting problems in this area are

Our GraphQL API exposes a partially circular graph to external consumers while we’d like the implementation in the components to be acyclic.
Our GraphQL query execution and ElasticSearch reindexing currently heavily rely on Active Record features, which defeats the “public interface, private implementation” idea.

The long term vision is to have separate, isolated test suites for most of the components of our main monolith.
Last But Not Least
I want to give a shout out to Josh Abernathy, Bryana Knight, Matt Todd, Matthew Clark, Mike Chlipala and Jakob Class at Github. This blog post is based on, and indirectly the result of a conversation I had with them. Thank you!
Anita Clarke, Edward Ocampo-Gooding, Gannon McGibbon, Jason Gedge, Martin LaRochelle, and Keyfer Mathewson contributed super valuable feedback on this article. Thank you BJ Fogg for the behavior model and use of your image.
If you’re interested in the kinds of challenges I described, you should join me at Shopify!
Further Reading

Kelly Sutton’s blog post How to Break Apart a Rails Monolith

The Modular Monolith: Rails Architecture | by Dan Manges
Rails conf talk: Between monoliths and microservices - by Vladimir Dementyev

Book: Component-Based Rails Applications 

Sorbet, static type checker for Ruby 
Collection of resources about modular Rails applications
Fogg Behavior Model


Definitions


Stable Abstractions Principle 

Indirection 

Coupling and cohesion

Informational and functional cohesion

SOLID 
Package principles
Rails Engines
</description>
      <author> (Philip Müller)</author>
      <guid>https://engineering.shopify.com/blogs/engineering/shopify-monolith</guid>
      <pubDate>Fri, 18 Sep 2020 03:04:17 GMT</pubDate>
    </item>
    <item>
      <title>DivineOmega/laravel-password-exposed-validation-rule</title>
      <link>https://github.com/DivineOmega/laravel-password-exposed-validation-rule</link>
      <description>🔒 Laravel validation rule that checks if a password has been exposed in a data breach. - DivineOmega/laravel-password-exposed-validation-rule</description>
      <author> (DivineOmega)</author>
      <guid>https://github.com/DivineOmega/laravel-password-exposed-validation-rule</guid>
      <pubDate>Fri, 18 Sep 2020 03:04:14 GMT</pubDate>
    </item>
    <item>
      <title>Xamarin.Forms Code Snippets</title>
      <link>https://channel9.msdn.com/Shows/XamarinShow/XamarinForms-Code-Snippets</link>
      <description>This week, James is joined by Damien Doumer, Microsoft MVP, who shows off some of his favorite code snippets for Xamarin.Forms and how you can create your own. Show Links: Blog - 6 Xamarin.Forms Code </description>
      <author> (by James Montemagno)</author>
      <guid>https://channel9.msdn.com/Shows/XamarinShow/XamarinForms-Code-Snippets</guid>
      <pubDate>Fri, 18 Sep 2020 03:04:10 GMT</pubDate>
    </item>
    <item>
      <title>22687 - (pgp) [meta] OpenPGP support</title>
      <link>https://bugzilla.mozilla.org/show_bug.cgi?id=22687</link>
      <description>RESOLVED (kaie) in MailNews Core - Security: OpenPGP. Last updated 2020-09-17.</description>
      <author> (Damon Gallaty)</author>
      <guid>https://bugzilla.mozilla.org/show_bug.cgi?id=22687</guid>
      <pubDate>Fri, 18 Sep 2020 02:04:16 GMT</pubDate>
    </item>
    <item>
      <title>Windows Sysinternals - Windows Sysinternals</title>
      <link>https://docs.microsoft.com/en-us/sysinternals/</link>
      <description>Library, learning resources, downloads, support, and community. Evaluate and find out how to install, deploy, and maintain Windows with Sysinternals utilities.</description>
      <author> (markruss)</author>
      <guid>https://docs.microsoft.com/en-us/sysinternals/</guid>
      <pubDate>Fri, 18 Sep 2020 02:04:09 GMT</pubDate>
    </item>
    <item>
      <title>.NET on Microsoft Learn</title>
      <link>https://docs.microsoft.com/en-us/learn/dotnet/</link>
      <description>Learn how to build apps across multiple platforms with programming languages like C#, F#, and Visual Basic. Supported on Windows, Linux, and macOS, get started developing your next project with .NET today.</description>
      <author> (dastaffo)</author>
      <guid>https://docs.microsoft.com/en-us/learn/dotnet/</guid>
      <pubDate>Fri, 18 Sep 2020 01:04:06 GMT</pubDate>
    </item>
    <item>
      <title>What the heck is source code, environments, and versioning for non technical people</title>
      <link>http://mikemainguy.blogspot.com/2020/09/what-heck-is-source-code-environments.html</link>
      <description>Had an interesting conversation today and thought I'd share some insight to business people dealing with technical folks  The crux of the qu...</description>
      <author> ()</author>
      <guid>http://mikemainguy.blogspot.com/2020/09/what-heck-is-source-code-environments.html</guid>
      <pubDate>Thu, 17 Sep 2020 23:04:39 GMT</pubDate>
    </item>
    <item>
      <title>The broken Internet | ungleich.ch</title>
      <link>https://ungleich.ch/u/blog/the-broken-internet/</link>
      <description>Affordable VM hosting in Glarus, Switzerland, operated by 100% hydropower. Devuan, debian, freebsd, ubuntu, centos. Our tech stack is fully open source.</description>
      <author> (ungleich glarus ag)</author>
      <guid>https://ungleich.ch/u/blog/the-broken-internet/</guid>
      <pubDate>Thu, 17 Sep 2020 23:04:36 GMT</pubDate>
    </item>
    <item>
      <title>The stages of a side project</title>
      <link>https://jarv.org/posts/side-projects/</link>
      <description>One experience of mine, though it has roughly mapped to previous side projects:
 Wow this thing that has no business model is a cool idea, I wonder if anyone has done it before? This is fun, let’s spend an evening hacking on it Wow this is taking way more time than I thought it would … Can I do this without spending any money? Let’s use AWS free tier to get this going OK let’s ship this thing, wow it’s getting a lot of attention!</description>
      <author> (jarv)</author>
      <guid>https://jarv.org/posts/side-projects/</guid>
      <pubDate>Thu, 17 Sep 2020 23:04:29 GMT</pubDate>
    </item>
    <item>
      <title>Aurora Database | Bin Wang</title>
      <link>https://www.binwang.me/2020-09-16-Aurora-Database.html</link>
      <description>Posted on 16 Sep 2020, tagged Auroradistributed systemdatabase2PC</description>
      <author> ()</author>
      <guid>https://www.binwang.me/2020-09-16-Aurora-Database.html</guid>
      <pubDate>Thu, 17 Sep 2020 23:04:26 GMT</pubDate>
    </item>
    <item>
      <title>9 Year Homelab history in pictures</title>
      <link>https://blog.networkprofile.org/9-year-homelab-history-in-pictures/</link>
      <description>Since 2012 I have been interested in servers and networking, and started running them at home. Here is a history of changes over the years I don't have full explanations of everything, but ill try to mention things as I go. You will have to excuse the poor image quality</description>
      <author> (SpookyGhost)</author>
      <guid>https://blog.networkprofile.org/9-year-homelab-history-in-pictures/</guid>
      <pubDate>Thu, 17 Sep 2020 23:04:24 GMT</pubDate>
    </item>
    <item>
      <title>Escargotic Commotion</title>
      <link>https://benjamincongdon.me/blog/2020/09/16/Escargotic-Commotion/</link>
      <description>The Internet of Snails™</description>
      <author> ()</author>
      <guid>https://benjamincongdon.me/blog/2020/09/16/Escargotic-Commotion/</guid>
      <pubDate>Thu, 17 Sep 2020 23:04:21 GMT</pubDate>
    </item>
    <item>
      <title>Taking Notes on Our Feelings</title>
      <link>https://tiffanymatthe.com/affective-notes/</link>
      <description>No one is ever in tip-top shape for every single second of their lives. Everyone has a few bad days. These lows are sometimes essential…</description>
      <author> ()</author>
      <guid>https://tiffanymatthe.com/affective-notes/</guid>
      <pubDate>Thu, 17 Sep 2020 23:04:18 GMT</pubDate>
    </item>
    <item>
      <title>A new way to learn about technology with Disco's Saron Yitbarek | Hanselminutes with Scott Hanselman</title>
      <link>https://hanselminutes.simplecast.com/episodes/a-new-way-to-learn-about-technology-with-discos-saron-yitbarek-RFqmPcEI</link>
      <description>CodeNewbie founder Saron Yitbarek is now producing beautifully designed, 
easy-to-digest audio courses! Is it an audiobook? They're not webinars or labs. Is Disco the future of technology learning?</description>
      <author> ()</author>
      <guid>https://hanselminutes.simplecast.com/episodes/a-new-way-to-learn-about-technology-with-discos-saron-yitbarek-RFqmPcEI</guid>
      <pubDate>Thu, 17 Sep 2020 23:04:15 GMT</pubDate>
    </item>
    <item>
      <title>Deduplicating Decklists</title>
      <link>http://justinjaffray.com/deduplicating-decklists/</link>
      <description>17 Sep 2020</description>
      <author> ()</author>
      <guid>http://justinjaffray.com/deduplicating-decklists/</guid>
      <pubDate>Thu, 17 Sep 2020 23:04:12 GMT</pubDate>
    </item>
    <item>
      <title>Ashley Janelle Why You're Not Landing that UX Role [w/ASL Interpreting]</title>
      <link>https://www.youtube.com/watch?v=0kFRrzf49-4</link>
      <description>As a UX Coach, the question I am asked the most is "How do I actually land that UX role?". While the question is broad, I've identified a few areas where aspiring UX Designers really struggle getting their foot in the door at companies of their choice. In my talk, attendees will walk away being able to not only identify their key problem areas, but have action items around overcoming those obstacles to land their dream role.
---
As a seasoned User Experience and User Interface Designer, Ashley Janelle focuses on designing customer centered experiences that target her users everyday challenges. At Caterpillar Inc., Ashley taps into user needs while designing solutions that allow them to save time, money, and increase their productivity.

As a UX coach and course creator, she’s developed an online course, “Learn UX Online in 16 Weeks” to help aspiring UX designers go from beginner to experienced UX Designers to land jobs at top companies. Using her UX expertise and passion for working with people, Ashley’s not only helped others land their dream roles, but build the confidence to become successful UX Designers.


https://www.ashleyjanelle.com</description>
      <author> (JuneteenthConf)</author>
      <guid>https://www.youtube.com/watch?v=0kFRrzf49-4</guid>
      <pubDate>Thu, 17 Sep 2020 22:04:07 GMT</pubDate>
    </item>
    <item>
      <title>An introduction to Data Oriented Design with Rust</title>
      <link>https://jamesmcm.github.io/blog/2020/07/25/intro-dod/</link>
      <description>An introduction to Data Oriented Design with Rust An introduction to Data Oriented Design with Rust In the post we will investigate the main …</description>
      <author> (James McMurray)</author>
      <guid>https://jamesmcm.github.io/blog/2020/07/25/intro-dod/</guid>
      <pubDate>Thu, 17 Sep 2020 22:04:06 GMT</pubDate>
    </item>
    <item>
      <title>How to Shut Off Public Connectivity to Azure SQL Database</title>
      <link>https://channel9.msdn.com/Shows/Data-Exposed/How-to-Shut-Off-Public-Connectivity-to-Azure-SQL-Database</link>
      <description>In this episode with Rohit Nayak, we will cover the Deny Public Network Access setting for SQL Database. Customers can use this setting to block all public access via firewall rules and exclusively re</description>
      <author> (by Marisa Brasile)</author>
      <guid>https://channel9.msdn.com/Shows/Data-Exposed/How-to-Shut-Off-Public-Connectivity-to-Azure-SQL-Database</guid>
      <pubDate>Thu, 17 Sep 2020 21:04:27 GMT</pubDate>
    </item>
    <item>
      <title>PowerToys: Utilities to customize Windows 10</title>
      <link>https://channel9.msdn.com/Shows/Tabs-vs-Spaces/PowerToys-Utilities-to-customize-Windows-10</link>
      <description>Learn about Microsoft PowerToys, a set of utilities for power users to tune and streamline your Windows 10 experience for greater productivity.  Clint Rutkas will show you the current PowerToy utiliti</description>
      <author> (by Matt Wojo)</author>
      <guid>https://channel9.msdn.com/Shows/Tabs-vs-Spaces/PowerToys-Utilities-to-customize-Windows-10</guid>
      <pubDate>Thu, 17 Sep 2020 21:04:24 GMT</pubDate>
    </item>
    <item>
      <title>Let's Encrypt's New Root and Intermediate Certificates</title>
      <link>https://letsencrypt.org/2020/09/17/new-root-and-intermediates.html</link>
      <description>On Thursday, September 3rd, 2020, Let’s Encrypt issued six new certificates: one root, four intermediates, and one cross-sign. These new certificates are part of our larger plan to improve privacy on the web, by making ECDSA end-entity certificates widely available, and by making certificates smaller.
Given that we issue 1.5 million certificates every day, what makes these ones special? Why did we issue them? How did we issue them? Let’s answer these questions, and in the process take a tour of how Certificate Authorities think and work.</description>
      <author> ()</author>
      <guid>https://letsencrypt.org/2020/09/17/new-root-and-intermediates.html</guid>
      <pubDate>Thu, 17 Sep 2020 21:04:21 GMT</pubDate>
    </item>
    <item>
      <title>Visual Studio Code's C++ Extension Hits v1.0 General Availability -- Visual Studio Magazine</title>
      <link>https://visualstudiomagazine.com/articles/2020/09/17/vscode-cpp.aspx</link>
      <description>Microsoft announced the first generally available release of the C++ extension for Visual Studio Code, graduating to version 1.0 after debuting way back in April 2016,</description>
      <author> (By David Ramel09/17/2020)</author>
      <guid>https://visualstudiomagazine.com/articles/2020/09/17/vscode-cpp.aspx</guid>
      <pubDate>Thu, 17 Sep 2020 21:04:19 GMT</pubDate>
    </item>
    <item>
      <title>Becoming a Director of Program Management with .NET’s Scott Hunter</title>
      <link>https://channel9.msdn.com/Shows/Careers-Behind-the-Code/Becoming-a-Director-of-Program-Management-with-NETs-Scott-Hunter</link>
      <description>Today’s episode features Scott Hunter who is the PM director for the .NET team. We chat about the challenges that come with growing your scope, applying the lessons learned in startups and consulting </description>
      <author> (by pattynguyen)</author>
      <guid>https://channel9.msdn.com/Shows/Careers-Behind-the-Code/Becoming-a-Director-of-Program-Management-with-NETs-Scott-Hunter</guid>
      <pubDate>Thu, 17 Sep 2020 21:04:14 GMT</pubDate>
    </item>
    <item>
      <title>On .NET Live - .NET Core Code Coverage with Coverlet</title>
      <link>https://www.youtube.com/watch?v=K9XSl3xMilE</link>
      <description>Coverlet is a cross platform code coverage framework for .NET. In this session, we'll have the creator of coverlet Toni Solarin-Sodara join us on On .NET Live to talk about how we can use the framework in our .NET applications today.

Featuring: Toni Solarin-Sodara (@tonerdo)

#dotnet #codecoverage #coverlet</description>
      <author> (dotNET)</author>
      <guid>https://www.youtube.com/watch?v=K9XSl3xMilE</guid>
      <pubDate>Thu, 17 Sep 2020 21:04:11 GMT</pubDate>
    </item>
    <item>
      <title>Document</title>
      <link>https://theworstwebsiteinthe.world/</link>
      <description>Enter your information to continue.</description>
      <author> ()</author>
      <guid>https://theworstwebsiteinthe.world/</guid>
      <pubDate>Thu, 17 Sep 2020 19:04:20 GMT</pubDate>
    </item>
    <item>
      <title>CQRS and MediatR in ASP.NET Core - Code Maze</title>
      <link>https://code-maze.com/cqrs-mediatr-in-aspnet-core/</link>
      <description>How to use the MediatR NuGet library in ASP.NET Core, and working with the CQRS and Mediator architectural patterns.</description>
      <author> ()</author>
      <guid>https://code-maze.com/cqrs-mediatr-in-aspnet-core/</guid>
      <pubDate>Thu, 17 Sep 2020 19:04:18 GMT</pubDate>
    </item>
    <item>
      <title>C++ Leads Visual Studio 2019 v16.8 Preview 3 Improvements -- Visual Studio Magazine</title>
      <link>https://visualstudiomagazine.com/articles/2020/09/17/vs2019-16-8-preview-3.aspx</link>
      <description>The third preview of Visual Studio 2019 v16.8 shows the usual assortment of improvements touching upon productivity for Git, the Roslyn .NET compiler platform, and especially C++.</description>
      <author> (By David Ramel09/17/2020)</author>
      <guid>https://visualstudiomagazine.com/articles/2020/09/17/vs2019-16-8-preview-3.aspx</guid>
      <pubDate>Thu, 17 Sep 2020 19:04:11 GMT</pubDate>
    </item>
    <item>
      <title>The Countdown Show</title>
      <link>https://www.youtube.com/watch?v=gNC-xi0BHzU</link>
      <description>Join @GraceMacjones @shanselman @taraw and Kendra Smith for the 3rd episode of The Countdown Show to #MSIgnite. They will discuss opportunities for learning and connecting during #MSIgnite next week and how to get the most out of your virtual experience.</description>
      <author> (Microsoft Developer)</author>
      <guid>https://www.youtube.com/watch?v=gNC-xi0BHzU</guid>
      <pubDate>Thu, 17 Sep 2020 18:04:05 GMT</pubDate>
    </item>
    <item>
      <title>Cloudflare and the Wayback Machine, joining forces for a more reliable Web - Internet Archive Blogs</title>
      <link>http://blog.archive.org/2020/09/17/internet-archive-partners-with-cloudflare-to-help-make-the-web-more-useful-and-reliable/</link>
      <description>Cloudflare now populating and using the Internet Archive’s Wayback Machine in its content distribution network application Cloudflare and the Internet Archive are now working together to help make the web more reliable. Websites that enable Cloudflare’s Always Online service will now have their content automatically archived, and if by chance the original host is not […]</description>
      <author> ()</author>
      <guid>http://blog.archive.org/2020/09/17/internet-archive-partners-with-cloudflare-to-help-make-the-web-more-useful-and-reliable/</guid>
      <pubDate>Thu, 17 Sep 2020 18:04:04 GMT</pubDate>
    </item>
    <item>
      <title>Debug Your .NET Core Apps in WSL 2 with Visual Studio | .NET Blog</title>
      <link>https://devblogs.microsoft.com/dotnet/debug-your-net-core-apps-in-wsl-2-with-visual-studio/</link>
      <description>The .NET Core Debugging with WSL 2 – Preview extension lets run and debug your .NET Core apps in WSL 2 from Visual Studio.</description>
      <author> (Nathan Carlson Principal Software Engineer, Cloud Native Tools Follow)</author>
      <guid>https://devblogs.microsoft.com/dotnet/debug-your-net-core-apps-in-wsl-2-with-visual-studio/</guid>
      <pubDate>Thu, 17 Sep 2020 18:04:02 GMT</pubDate>
    </item>
    <item>
      <title>.NET Tooling Community Standup - Sept 17th 2020 - Analysis Levels in .NET 5: Find latent bugs</title>
      <link>https://www.youtube.com/watch?v=oTavmpy78Q0</link>
      <description>Jon published an excellent post on the new analysis levels we are introducing in .NET 5. We'll also talk about the new warnings and errors in .NET 5 preview that help you find common mistakes early! https://devblogs.microsoft.com/dotnet/automatically-find-latent-bugs-in-your-code-with-net-5

Community Links: https://www.theurlist.com/dotnet-community-standup-tooling-9-17-2020

Featuring: Jonathon Marolf (@JonathonMarolf)</description>
      <author> (.NET Foundation)</author>
      <guid>https://www.youtube.com/watch?v=oTavmpy78Q0</guid>
      <pubDate>Thu, 17 Sep 2020 17:03:56 GMT</pubDate>
    </item>
    <item>
      <title>Germany will violate 3 international agreements with the Unitary Patent, says FFII</title>
      <link>https://ffii.org/open-letter-to-the-bundesrat-on-the-unitary-patent-tomorrow-germany-will-be-asked-to-violate-multiple-international-agreements/</link>
      <description>Germany set to vote on the Unitary Patent Court (UPC), a proposal that would kill jobs and innovation in software. Open Letter to the Bundesrat: “Germany will violate 3 international agreements with the Unitary Patent” Dear Members of the Bundesrat, Tomorrow Friday 17 September 2020, the Bundesrat will be asked to ratify the Unitary Patent […]</description>
      <author> (By  Benjamin HENRION | 8 hours ago)</author>
      <guid>https://ffii.org/open-letter-to-the-bundesrat-on-the-unitary-patent-tomorrow-germany-will-be-asked-to-violate-multiple-international-agreements/</guid>
      <pubDate>Thu, 17 Sep 2020 17:03:55 GMT</pubDate>
    </item>
    <item>
      <title>Why We Don't Like Our Underground House</title>
      <link>https://dengarden.com/misc/The-Pitfalls-of-an-Underground-House</link>
      <description>We had wanted an underground house for years, and finally, we found the perfect one. Or did we? We learned the hard way what realtors and ads don't tell you.</description>
      <author> (MizBejabbers)</author>
      <guid>https://dengarden.com/misc/The-Pitfalls-of-an-Underground-House</guid>
      <pubDate>Thu, 17 Sep 2020 16:04:03 GMT</pubDate>
    </item>
    <item>
      <title>Privacy-focused search engine DuckDuckGo is growing fast</title>
      <link>https://www.bleepingcomputer.com/news/technology/privacy-focused-search-engine-duckduckgo-is-growing-fast/</link>
      <description>DuckDuckGo, the privacy-focused search engine, announced that August 2020 ended in over 2 billion total searches via its search platform.</description>
      <author> (Mayank Parmar)</author>
      <guid>https://www.bleepingcomputer.com/news/technology/privacy-focused-search-engine-duckduckgo-is-growing-fast/</guid>
      <pubDate>Thu, 17 Sep 2020 16:04:00 GMT</pubDate>
    </item>
    <item>
      <title>Episode 346 - Autonomous Systems</title>
      <link>http://azpodcast.azurewebsites.net/post/Episode-346-Autonomous-Systems</link>
      <description>The Azure Podcast</description>
      <author> (Cynthia Kreng)</author>
      <guid>http://azpodcast.azurewebsites.net/post/Episode-346-Autonomous-Systems</guid>
      <pubDate>Thu, 17 Sep 2020 15:04:04 GMT</pubDate>
    </item>
    <item>
      <title>The C++/WinRT "capture" function helps you interoperate with the COM ABI world | The Old New Thing</title>
      <link>https://devblogs.microsoft.com/oldnewthing/20200917-00/?p=104230</link>
      <description>C++/WinRT is a freestanding library that is not dependent upon any Windows operating system header files. You are welcome to stay completely in the C++/WinRT world, but it’s not uncommon to have to interact with objects outside that world from time to time.</description>
      <author> (Raymond Chen  Follow)</author>
      <guid>https://devblogs.microsoft.com/oldnewthing/20200917-00/?p=104230</guid>
      <pubDate>Thu, 17 Sep 2020 15:04:02 GMT</pubDate>
    </item>
    <item>
      <title>Dear Programmers, You Are Not F****** Special</title>
      <link>https://exceptionnotfound.net/dear-programmers-youre-not-special/</link>
      <description>We're not f****** special, so why do we keep acting like we are?!</description>
      <author> (https://www.facebook.com/exceptionnotfnd/)</author>
      <guid>https://exceptionnotfound.net/dear-programmers-youre-not-special/</guid>
      <pubDate>Thu, 17 Sep 2020 15:03:59 GMT</pubDate>
    </item>
    <item>
      <title>RavenDB in Action Workshop in NDC Conference</title>
      <link>https://ayende.com/blog/191906-A/ravendb-in-action-workshop-in-ndc-conference?Key=f6a59edc-ecfc-4381-993a-a72debe77c4b</link>
      <description>On October 26, I’ll be giving a two days workshop on RavenDB 5.0 as part of the NDC Conference.In the workshop, I’m going to talk about using RavenDB from sc...</description>
      <author> ()</author>
      <guid>https://ayende.com/blog/191906-A/ravendb-in-action-workshop-in-ndc-conference?Key=f6a59edc-ecfc-4381-993a-a72debe77c4b</guid>
      <pubDate>Thu, 17 Sep 2020 15:03:55 GMT</pubDate>
    </item>
    <item>
      <title>ASP.NET App Migration Webinar | Microsoft Azure</title>
      <link>https://info.microsoft.com/ww-landing-migrate-your-asp-net-apps-to-the-cloud-to-save-time-and-costs.html</link>
      <description>Join this webinar to learn how to free up time to build your apps and lower costs by migrating your ASP.NET applications to Azure.</description>
      <author> ()</author>
      <guid>https://info.microsoft.com/ww-landing-migrate-your-asp-net-apps-to-the-cloud-to-save-time-and-costs.html</guid>
      <pubDate>Thu, 17 Sep 2020 14:04:02 GMT</pubDate>
    </item>
    <item>
      <title>GitHub CLI 1.0 is now available - The GitHub Blog</title>
      <link>https://github.blog/2020-09-17-github-cli-1-0-is-now-available/</link>
      <description>GitHub CLI brings GitHub to your terminal. It reduces context switching, helps you focus, and enables you to more easily script and create your own workflows. Earlier this year, we announced the beta of GitHub</description>
      <author> ()</author>
      <guid>https://github.blog/2020-09-17-github-cli-1-0-is-now-available/</guid>
      <pubDate>Thu, 17 Sep 2020 14:03:58 GMT</pubDate>
    </item>
    <item>
      <title>Diversity in Tech With Pariss Chandler</title>
      <link>https://www.youtube.com/watch?v=vQVRkJ15yxY</link>
      <description>Let's be real about Diversity in Tech and specifically what it's like to be black in tech. Pariss Chandler joins to talk about what it's like to be black in tech and her initiatives to help more black people lead successful careers in tech.

Black Tech Pipeline - https://blacktechpipeline.com/
_____________________________________________

Newsletter 🗞
Interested in exclusive content and discounts? 🤯 Sign up for the newsletter!
https://www.jamesqquick.com
_____________________________________________

Connect with me 😀
Live streams on Twitch - https://twitch.tv/jamesqquick
Follow me on Twitter - https://www.twitter.com/jamesqquick
Join the 💬 Discord Server 💬 - https://discord.gg/vM2bagU
_____________________________________________

COURSES  💻
Learn how to build Fullstack apps with React and Serverless Functions - https://www.jamesqquick.com/courses/react-and-serverless-fullstack-developmnent
Learn everything you need to know about Visual Studio Code - https://www.udemy.com/learn-visual-studio-code/
Build a Quiz App  - https://www.udemy.com/build-a-quiz-app-with-html-css-and-javascript/</description>
      <author> (James Q Quick)</author>
      <guid>https://www.youtube.com/watch?v=vQVRkJ15yxY</guid>
      <pubDate>Thu, 17 Sep 2020 14:03:56 GMT</pubDate>
    </item>
    <item>
      <title>Philipp is annoyed</title>
      <link>https://annoying.technology/posts/e82ff3bde8b225e6/</link>
      <description>I’m using the iOS Bedtime feature for years now. With yesterday’s iOS 14 update the feature got moved from the Clock app to the Health app. Unfortunately the migration is done by disabling your existing alarm and showing a button to open the Health app to set it up again.
I woke up late and well rested today.</description>
      <author> ()</author>
      <guid>https://annoying.technology/posts/e82ff3bde8b225e6/</guid>
      <pubDate>Thu, 17 Sep 2020 14:03:55 GMT</pubDate>
    </item>
    <item>
      <title>Dew Drop – September 17, 2020 (#3277)</title>
      <link>https://www.alvinashcraft.com/2020/09/17/dew-drop-september-17-2020-3277/</link>
      <description>About Me</description>
      <author> (Alvin A.)</author>
      <guid>https://www.alvinashcraft.com/2020/09/17/dew-drop-september-17-2020-3277/</guid>
      <pubDate>Thu, 17 Sep 2020 13:03:57 GMT</pubDate>
    </item>
    <item>
      <title>Retrieving Images from the Clipboard and WPF Image Control Woes</title>
      <link>https://weblog.west-wind.com/posts/2020/Sep/16/Retrieving-Images-from-the-Clipboard-and-WPF-Image-Control-Woes</link>
      <description>Retrieving images from the clipboard with WPF seems so simple, but once you get into it you'll find that there are lots of problems with reliable image retrieval that works for all images. In this post I talk about the different issues you're likely to run into and one hacky  but flexible solution to better image support by selectively sniffing image formats and using different clipboard retrievals based on the image format.</description>
      <author> (https://facebook.com/rickstrahl)</author>
      <guid>https://weblog.west-wind.com/posts/2020/Sep/16/Retrieving-Images-from-the-Clipboard-and-WPF-Image-Control-Woes</guid>
      <pubDate>Thu, 17 Sep 2020 11:03:54 GMT</pubDate>
    </item>
    <item>
      <title>.NET Framework September 2020 Cumulative Update Preview Update | .NET Blog</title>
      <link>https://devblogs.microsoft.com/dotnet/net-framework-september-2020-cumulative-update-preview-update/</link>
      <description>Today, we are releasing the September 2020 Cumulative Update Preview Updates for .NET Framework. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Disabled resuse of AppPathModifier in ASP.Net control output. HttpCookie objects in the ASP.Net request context will be created with configured defaults for cookie flags instead instead of .Net.NET-style primitive defaults to match the behavior of `new HttpCookie(name)`.</description>
      <author> (Tara Overfield Software Engineer II , .NET Servicing)</author>
      <guid>https://devblogs.microsoft.com/dotnet/net-framework-september-2020-cumulative-update-preview-update/</guid>
      <pubDate>Thu, 17 Sep 2020 09:03:55 GMT</pubDate>
    </item>
    <item>
      <title>Padlocks, Phishing and Privacy; The Value Proposition of a VPN</title>
      <link>https://www.troyhunt.com/padlocks-phishing-and-privacy-the-value-proposition-of-a-vpn/</link>
      <description>I want a "secure by default" internet with all the things encrypted all the time such that people can move freely between networks without ever needing to care about who manages them or what they're doing with them. I'm a massive proponent of Let's Encrypt's and Cloudflare's missions to secure</description>
      <author> (https://www.facebook.com/troyahunt)</author>
      <guid>https://www.troyhunt.com/padlocks-phishing-and-privacy-the-value-proposition-of-a-vpn/</guid>
      <pubDate>Thu, 17 Sep 2020 09:03:52 GMT</pubDate>
    </item>
    <item>
      <title>What&amp;#39;s New in Telerik UI for Blazor</title>
      <link>https://www.telerik.com/support/whats-new/blazor-ui</link>
      <description>Check out what’s new in Telerik UI for Blazor – our newest Blazor controls, functionalities and bug fixes.</description>
      <author> ()</author>
      <guid>https://www.telerik.com/support/whats-new/blazor-ui</guid>
      <pubDate>Thu, 17 Sep 2020 08:03:53 GMT</pubDate>
    </item>
    <item>
      <title>Herding Code 242: The COVID Cabin Fever</title>
      <link>https://herdingcode.com/herding-code-242-the-covid-cabin-fever/</link>
      <description>Does time still exist? Maybe! The Kevin, Rob, and Jon chat about some of the top concerns of our current time: Sourdough breadWordpress and PHPNo Code developmentKnock knock jokes Download / Listen: Herding Code 242: The COVID Cabin Fever Links: https://github.com/nushell/nushellhttps://jeffsternber</description>
      <author> ()</author>
      <guid>https://herdingcode.com/herding-code-242-the-covid-cabin-fever/</guid>
      <pubDate>Thu, 17 Sep 2020 07:04:14 GMT</pubDate>
    </item>
    <item>
      <title></title>
      <link>https://encrypto.de/papers/HWSDS21.pdf</link>
      <description />
      <author> ()</author>
      <guid>https://encrypto.de/papers/HWSDS21.pdf</guid>
      <pubDate>Thu, 17 Sep 2020 07:04:11 GMT</pubDate>
    </item>
    <item>
      <title>Microsoft Releases .NET 5.0 RC 1 </title>
      <link>https://www.infoq.com/news/2020/09/ms-releases-dotnet-5-rc1/</link>
      <description>Earlier this week, Microsoft released .NET 5.0 RC1, the first "go live" release of .NET 5 before its official debut in November. .NET 5 is a unified platform for the .NET ecosystem, wrapping together all of its components into one cross-platform package. The new release includes many improvements from .NET Core 3, including new language versions (C# 9 and F# 5) and support for Windows ARM64.</description>
      <author> (Arthur Casals
                
            
        Follow)</author>
      <guid>https://www.infoq.com/news/2020/09/ms-releases-dotnet-5-rc1/</guid>
      <pubDate>Thu, 17 Sep 2020 07:04:08 GMT</pubDate>
    </item>
    <item>
      <title>.NET App Developer Links - 2020-09-17</title>
      <link>https://links.danrigby.com/2020/09/app-developer-links-2020-09-17/</link>
      <description>The latest news and resources for .NET app developers.</description>
      <author> ()</author>
      <guid>https://links.danrigby.com/2020/09/app-developer-links-2020-09-17/</guid>
      <pubDate>Thu, 17 Sep 2020 07:04:03 GMT</pubDate>
    </item>
    <item>
      <title>Azure + Spring Boot = Serverless - Q&amp;A with Julien Dubois </title>
      <link>https://www.infoq.com/articles/azure-spring-boot-serverles-dubois/</link>
      <description>Microsoft seems to prove over and over again its focus on cloud and the Java ecosystem is the new normal. Even though Java is amongst the supported languages for Azure functions for some time now, Julien Dubois experimented with Spring Boot and Azure to see what this combination means for Azure serverless computing. InfoQ reached out to him to explore further his experience on this topic.</description>
      <author> (Olimpiu Pop)</author>
      <guid>https://www.infoq.com/articles/azure-spring-boot-serverles-dubois/</guid>
      <pubDate>Thu, 17 Sep 2020 07:04:01 GMT</pubDate>
    </item>
    <item>
      <title>Microsoft announces new Project OneFuzz framework, an open source developer tool to find and fix bugs at scale - Microsoft Security</title>
      <link>https://www.microsoft.com/security/blog/2020/09/15/microsoft-onefuzz-framework-open-source-developer-tool-fix-bugs/</link>
      <description>We're excited to release a new tool called OneFuzz, an extensible fuzz testing framework for Azure.</description>
      <author> (Justin Campbell
					Principal Security Software Engineering Lead, Microsoft Security)</author>
      <guid>https://www.microsoft.com/security/blog/2020/09/15/microsoft-onefuzz-framework-open-source-developer-tool-fix-bugs/</guid>
      <pubDate>Thu, 17 Sep 2020 06:04:21 GMT</pubDate>
    </item>
    <item>
      <title>What is the cloud? Explained</title>
      <link>https://www.hanselman.com/blog/WhatIsTheCloudExplained.aspx</link>
      <description>I'm continuing my 'Computer Stuff They Didn't Teach You' series on YouTube. Please subscribe! I've set a personal goal ...</description>
      <author> (Scott Hanselman)</author>
      <guid>https://www.hanselman.com/blog/WhatIsTheCloudExplained.aspx</guid>
      <pubDate>Thu, 17 Sep 2020 06:04:17 GMT</pubDate>
    </item>
    <item>
      <title>Using OpenAPI with .NET Core - Red Hat Developer</title>
      <link>https://developers.redhat.com/blog/2020/09/16/using-openapi-with-net-core/</link>
      <description>Learn how to use OpenAPI to describe the APIs provided by an ASP.NET Core service, then use the API description to generate a strongly-typed client.</description>
      <author> (By Tom Deseyn September 16, 2020September 14, 2020)</author>
      <guid>https://developers.redhat.com/blog/2020/09/16/using-openapi-with-net-core/</guid>
      <pubDate>Thu, 17 Sep 2020 06:04:14 GMT</pubDate>
    </item>
    <item>
      <title>Building an AWS DevOps Pipeline for Databases - Redgate Software</title>
      <link>https://www.red-gate.com/blog/building-an-aws-devops-pipeline-for-databases</link>
      <description>The first time you try to automate a database deployment using any of the available flow control tools, all the moving parts makes the task look insanely</description>
      <author> (Red Gate Software Ltd)</author>
      <guid>https://www.red-gate.com/blog/building-an-aws-devops-pipeline-for-databases</guid>
      <pubDate>Thu, 17 Sep 2020 06:04:10 GMT</pubDate>
    </item>
    <item>
      <title>Running 16-bit applications on Windows 10 64-bit</title>
      <link>https://techcommunity.microsoft.com/t5/windows-dev-appconsult/running-16-bit-applications-on-windows-10-64-bit/ba-p/1671418</link>
      <description>  I wrote this post as a proof of concept and as a best effort to make a 16-bit application run on Windows 10 64-bit.   It will be demonstrated how to use a third-part open source framework called otya128 – winevdm, how to use MSIX, UWP Execution Alias and Packaging Support Framework.      Please no...</description>
      <author> (https://techcommunity.microsoft.com/t5/user/viewprofilepage/user-id/258734)</author>
      <guid>https://techcommunity.microsoft.com/t5/windows-dev-appconsult/running-16-bit-applications-on-windows-10-64-bit/ba-p/1671418</guid>
      <pubDate>Thu, 17 Sep 2020 06:04:02 GMT</pubDate>
    </item>
    <item>
      <title>MYSTERY MEMORY LEAK: WHERE DID MY MEMORY GO?!</title>
      <link>https://techcommunity.microsoft.com/t5/ask-the-performance-team/mystery-memory-leak-where-did-my-memory-go/ba-p/1675369</link>
      <description>Hello,   My name is Jeffrey Worline, and I am a Senior Support Escalation Engineer on the Windows Performance Team at Microsoft. This blog addresses how to troubleshoot unaccounted memory usage or leak to include identifying and data collection.   If you already determined the process consuming memo...</description>
      <author> (https://techcommunity.microsoft.com/t5/user/viewprofilepage/user-id/517159)</author>
      <guid>https://techcommunity.microsoft.com/t5/ask-the-performance-team/mystery-memory-leak-where-did-my-memory-go/ba-p/1675369</guid>
      <pubDate>Thu, 17 Sep 2020 06:03:58 GMT</pubDate>
    </item>
    <item>
      <title>Melbourne is not a city in revolt. The truth is far more incredible (and far more boring)</title>
      <link>https://theshot.net.au/general-news/melbourne-is-not-a-city-in-revolt-the-truth-is-far-more-incredible-and-far-more-boring/</link>
      <description>No one needs to sensationalise what life is really like here.</description>
      <author> ()</author>
      <guid>https://theshot.net.au/general-news/melbourne-is-not-a-city-in-revolt-the-truth-is-far-more-incredible-and-far-more-boring/</guid>
      <pubDate>Thu, 17 Sep 2020 05:04:00 GMT</pubDate>
    </item>
    <item>
      <title>.NET Rocks! vNext</title>
      <link>https://www.dotnetrocks.com/default.aspx?ShowNum=1705</link>
      <description>.NET Rocks! is a weekly talk show for anyone interested in programming on the Microsoft .NET platform. The shows range from introductory information to hardcore geekiness.</description>
      <author> ()</author>
      <guid>https://www.dotnetrocks.com/default.aspx?ShowNum=1705</guid>
      <pubDate>Thu, 17 Sep 2020 05:03:56 GMT</pubDate>
    </item>
    <item>
      <title>iOS 14 is available today</title>
      <link>https://www.apple.com/newsroom/2020/09/ios-14-is-available-today/</link>
      <description>iOS 14 reimagines the iPhone experience, delivering a major update to the Home Screen, widgets, and App Clips.</description>
      <author> ()</author>
      <guid>https://www.apple.com/newsroom/2020/09/ios-14-is-available-today/</guid>
      <pubDate>Thu, 17 Sep 2020 04:03:55 GMT</pubDate>
    </item>
  </channel>
</rss>