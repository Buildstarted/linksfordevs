<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>Who BLEW Up the Nordstream 2 Pipeline? (w/ Aaron Mate)</title>
      <link>https://youtube.com/watch?v=jCQmVFqU4Gs</link>
      <description>This week, I spoke with The Grayzone &amp;amp; Useful Idiot&amp;#39;s Aaron Mate about who blew up the Nordstream 2 pipeline, the threat of nuclear war, and what western med...</description>
      <author> (Democracy Now!
  
  
  
    Democracy Now!
  





    •)</author>
      <guid>https://youtube.com/watch?v=jCQmVFqU4Gs</guid>
      <pubDate>Sat, 08 Oct 2022 23:05:04 GMT</pubDate>
    </item>
    <item>
      <title>Privacy as Product</title>
      <link>https://berjon.com/privacy-as-product/</link>
      <description>The way in which most businesses approach privacy issues is far from ideal and more often than not self-defeating. Compliance with data regulations has imposed itself as the central part of the work when privacy really is a product concern: as aspect you work on to make your product better and increase your revenue. How can we fix this?</description>
      <author> (Robin Berjon)</author>
      <guid>https://berjon.com/privacy-as-product/</guid>
      <pubDate>Sat, 08 Oct 2022 23:05:02 GMT</pubDate>
    </item>
    <item>
      <title>Teach Yourself Programming in Ten Years</title>
      <link>http://norvig.com/21-days.html</link>
      <description>Why is everyone in such a rush?

Walk into any bookstore, and you&amp;#39;ll see how to Teach Yourself Java
in 24 Hours alongside endless variations offering to teach C,
SQL, Ruby, Algorithms, and so on in a few days or hours.  
The Amazon advanced search for [title: teach,
yourself, hours, since: 2000 and found 512 such books. Of the top ten, nine are programming books (the other is about bookkeeping). Similar results come from replacing &amp;quot;teach yourself&amp;quot; with &amp;quot;learn&amp;quot; or &amp;quot;hours&amp;quot; with &amp;quot;days.&amp;quot;
 

The conclusion is that either people are in a big rush to learn
about programming, or that programming is somehow fabulously easier to
learn than anything else.  
Felleisen et al.
give a nod to this trend in their book How to Design Programs, when they say
&amp;quot;Bad programming is easy. Idiots can learn it in 21 days,
even if they are dummies.&amp;quot; The Abtruse Goose comic also had their take.

Let&amp;#39;s analyze what a title like Teach Yourself C++ in 24 Hours
could mean:


Teach Yourself: In 24 hours you won&amp;#39;t have time to write several
significant programs, and learn from your successes and failures with
them.  You won&amp;#39;t have time to work with an experienced programmer and
understand what it is like to live in a C++ environment.  In short, you
won&amp;#39;t have time to learn much.  So the book can only be talking about a
superficial familiarity, not a deep understanding. As Alexander Pope said,
a little learning is a dangerous thing.C++: In 24 hours you might be able to learn some of the syntax of
C++ (if you already know another language), but you couldn&amp;#39;t
learn much about how to use the language.  In short, if you were, say, a
Basic programmer, you could learn to write programs in the style of
Basic using C++ syntax, but you couldn&amp;#39;t learn what C++ is
actually good (and bad) for.  So what&amp;#39;s the point?  Alan
Perlis once said: &amp;quot;A language that doesn&amp;#39;t affect the way you
think about programming, is not worth knowing&amp;quot;.  One possible point is
that you have to learn a tiny bit of C++ (or more likely, something
like JavaScript or Processing) because you need to interface with an
existing tool to accomplish a specific task. But then you&amp;#39;re not
learning how to program; you&amp;#39;re learning to accomplish that task.in 24 Hours: Unfortunately, this is not enough, as the next
section shows.


Teach Yourself Programming in Ten Years

Researchers (Bloom
(1985), Bryan &amp;amp; Harter (1899), Hayes
(1989), Simmon &amp;amp; Chase (1973)) have shown it
takes about ten years to develop expertise in any of a wide variety of
areas, including chess playing, music composition, telegraph
operation, painting, piano playing, swimming, tennis, and research in
neuropsychology and topology.  The key is deliberative
practice: not just doing it again and again, but challenging yourself
with a task that is just beyond your current ability, trying it,
analyzing your performance while and after doing it, and correcting
any mistakes.  Then repeat.  And repeat again.  There appear to be no
real shortcuts: even Mozart, who was a musical prodigy at age 4, took
13 more years before he began to produce world-class music.  In
another genre, the Beatles seemed to burst onto the scene with a
string of #1 hits and an appearance on the Ed Sullivan show in 1964.
But they had been playing small clubs in Liverpool and Hamburg since
1957, and while they had mass appeal early on, their first great
critical success, Sgt. Peppers, was released in 1967. 

Malcolm
Gladwell has popularized the idea, although he concentrates on 10,000 hours, not 10 years.
Henri Cartier-Bresson (1908-2004) had another metric: &amp;quot;Your first 10,000 photographs are your  worst.&amp;quot; (He didn&amp;#39;t
anticipate that with digital cameras, some people can reach that mark in a week.)
True expertise may take a lifetime:
Samuel Johnson (1709-1784) said &amp;quot;Excellence in any department can be
attained only by the labor of a lifetime; it is not to be purchased at
a lesser price.&amp;quot;  And Chaucer (1340-1400) complained &amp;quot;the lyf so short, the craft
so long to lerne.&amp;quot; Hippocrates (c. 400BC) is known for the excerpt &amp;quot;ars longa,
vita brevis&amp;quot;, which is part of the longer quotation &amp;quot;Ars longa, vita
brevis, occasio praeceps, experimentum periculosum, iudicium
difficile&amp;quot;, which in English renders as &amp;quot;Life is short, [the] craft
long, opportunity fleeting, experiment treacherous, judgment
difficult.&amp;quot;  

Of course, no single number can be the final answer: it doesn&amp;#39;t seem reasonable
to assume that all skills (e.g., programming, chess playing, checkers playing, and music playing)
could all require exactly the same amount of time to master, nor that all people
will take exactly the same amount of time. As 
Prof. 
K. Anders Ericsson puts it, &amp;quot;In most domains it&amp;#39;s remarkable how much time even the most
talented individuals need in order to reach the highest levels of performance. The 10,000 hour number just gives you a sense that we&amp;#39;re talking years of 10 to 20 hours a week which those who some people would argue are the most innately talented individuals still need to get to the highest level.&amp;quot;

So You Want to be a Programmer

Here&amp;#39;s my recipe for programming success:


 Get interested in programming, and do some because it is fun.  Make sure
that it keeps being enough fun so that you will be willing to put in your ten years/10,000 hours. Program.  The best kind of learning is learning
by doing.  To put it more technically, &amp;quot;the maximal level of
performance for individuals in a given domain is not attained
automatically as a function of extended experience, but the level of
performance can be increased even by highly experienced individuals as
a result of deliberate efforts to improve.&amp;quot; (p. 366)
and &amp;quot;the most effective learning requires a well-defined task with an
appropriate difficulty level for the particular individual,
informative feedback, and opportunities for repetition and corrections
of errors.&amp;quot; (p. 20-21)  The book 
Cognition in Practice: Mind, Mathematics, and Culture in Everyday
Life is an interesting 
reference for this viewpoint. Talk with other programmers; read other programs.  This is more important
than any book or training course. If you want, put in four years at a college (or more at a
graduate school).  This will give you access to some jobs that require
credentials, and it will give you a deeper understanding of the field,
but if you don&amp;#39;t enjoy school, you can (with some dedication) get
similar experience on your own or on the job. In any case, book learning alone won&amp;#39;t
be enough. &amp;quot;Computer science education cannot make anybody an expert
programmer any more than studying brushes and pigment can make
somebody an expert painter&amp;quot; says Eric Raymond, author of The New
Hacker&amp;#39;s Dictionary. One of the best programmers I ever hired had
only a High School degree; he&amp;#39;s produced a lot of great software, has his own news group, and made enough in stock options to buy his own nightclub. Work on projects with other programmers. Be the best programmer
on some projects; be the worst on some others.  When you&amp;#39;re the best,
you get to test your abilities to lead a project, and to inspire
others with your vision.  When you&amp;#39;re the worst, you learn what the
masters do, and you learn what they don&amp;#39;t like to do (because they
make you do it for them). Work on projects after other programmers. 
Understand a program written by someone else. See what it takes to
understand and fix it when the original programmers are not
around. Think about how to design your programs to make it easier for
those who will maintain them after you. Learn at least a half dozen programming languages.  Include one
language that emphasizes class abstractions (like Java or C++), one that
emphasizes functional abstraction (like Lisp or ML or Haskell), one
that supports syntactic abstraction (like Lisp), one
that supports declarative specifications (like Prolog or C++
templates), and
one that emphasizes parallelism (like Clojure or Go).   Remember that there is a &amp;quot;computer&amp;quot; in &amp;quot;computer science&amp;quot;. Know
how long it takes your computer to execute an instruction, fetch a
word from memory (with and without a cache miss), read consecutive words from disk, and seek to a new location on disk. (Answers here.)  Get involved in a language
standardization effort.  It could be the ANSI C++ committee, or it
could be deciding if your local coding style will have 2 or 4 space
indentation levels.  Either way, you learn about what other people
like in a language, how deeply they feel so, and perhaps even a little
about why they feel so. Have the good sense to get off the language standardization effort as
quickly as possible.


With all that in mind, its questionable how far you can get just by
book learning.  Before my first child was born, I read all the How
To books, and still felt like a clueless novice.  30 Months later,
when my second child was due, did I go back to the books for a
refresher? No.  Instead, I relied on my personal experience, which
turned out to be far more useful  and reassuring
to me than the thousands of pages written
by experts.

Fred Brooks, in his essay No Silver Bullet 
identified a three-part plan for finding great
software designers:


   Systematically identify top designers as early as possible.Assign a career mentor to be responsible for the development of the prospect and carefully keep a career file.Provide opportunities for growing designers to interact and stimulate each other.

This assumes that some people already have the qualities necessary for
being a great designer; the job is to properly coax them along.  Alan
Perlis put it more succinctly: &amp;quot;Everyone can be taught to sculpt:
Michelangelo would have had to be taught how not to. So it is with the
great programmers&amp;quot;.  Perlis is saying that the greats have some
internal quality that transcends their training.  But where does the
quality come from?  Is it innate?  Or do they develop it through
diligence?  As Auguste Gusteau (the fictional chef in
Ratatouille) puts it, &amp;quot;anyone can cook, but only the fearless
can be great.&amp;quot;  I think of it more as willingness to devote a large
portion of one&amp;#39;s life to deliberative practice.  But maybe
fearless is a way to summarize that. Or, as Gusteau&amp;#39;s critic,
Anton Ego, says: &amp;quot;Not everyone can become a great artist, but a great
artist can come from anywhere.&amp;quot;


So go ahead and buy that Java/Ruby/Javascript/PHP book; you&amp;#39;ll
probably get some use out of it.  But you won&amp;#39;t change your life, or
your real overall expertise as a programmer in 24 hours or 21 days.  
How about working hard to continually improve over 24 months?
Well, now you&amp;#39;re starting to get somewhere...

References


Bloom, Benjamin (ed.) Developing Talent in Young People, Ballantine, 1985.


Brooks, Fred, No Silver Bullets, IEEE Computer, vol. 20, no. 4, 1987, p. 10-19.


Bryan, W.L. &amp;amp; Harter, N. &amp;quot;Studies on the telegraphic language:
The acquisition of a hierarchy of habits. Psychology Review,
1899, 8, 345-375

Hayes, John R., Complete Problem Solver Lawrence Erlbaum, 1989.


Chase, William G. &amp;amp; Simon, Herbert A.  
&amp;quot;Perception in Chess&amp;quot;
Cognitive Psychology, 1973, 4, 55-81.

Lave, Jean, Cognition in Practice: Mind, Mathematics, and Culture in Everyday
Life, Cambridge University Press, 1988.


Answers

Approximate timing for various operations on a typical PC:

execute typical instruction 1/1,000,000,000 sec = 1 nanosec
fetch from L1 cache memory 0.5 nanosec
branch misprediction 5 nanosec
fetch from L2 cache memory 7 nanosec
Mutex lock/unlock 25 nanosec
fetch from main memory 100 nanosec 
send 2K bytes over 1Gbps network 20,000 nanosec
read 1MB sequentially from memory 250,000 nanosec
fetch from new disk location (seek) 8,000,000 nanosec
read 1MB sequentially from disk 20,000,000 nanosec
send packet US to Europe and back 150 milliseconds = 150,000,000 nanosec

 


Appendix: Language Choice

Several people have asked what programming language they should learn first.
There is no one answer, but consider these points:



Use your friends. When asked &amp;quot;what operating system should
I use, Windows, Unix, or Mac?&amp;quot;, my answer is usually: &amp;quot;use whatever
your friends use.&amp;quot;  The advantage you get from learning from your
friends will offset any intrinsic difference between OS, or
between programming languages.  Also consider your future friends:
the community of programmers that you will be a part of if you
continue.  Does your chosen language have a large growing community
or a small dying one?  Are there books, web sites, and online forums
to get answers from?  Do you like the people in those forums?

Keep it simple.  Programming languages such as C++
and Java are designed for professional development by large teams of
experienced programmers who are concerned about the run-time efficiency of
their code.
As a result, these languages have complicated parts designed for these circumstances.
You&amp;#39;re concerned with learning to program.  You don&amp;#39;t need that complication.
You want a language that was designed to be easy to learn and remember by a
single new programmer.

Play. Which way would you rather learn to play the piano: the
normal, interactive way, in which you hear each note as soon as you hit a key,
or &amp;quot;batch&amp;quot; mode, in which you only hear the notes after you finish a whole song?
Clearly, interactive mode makes learning easier for the piano, and also for 
programming. Insist on a language with an interactive mode and use it.



Given these criteria, my recommendations for a first programming
language would be Python or
Scheme.  
Another choice is Javascript, not because it is perfectly well-designed for beginners,
but because there are so many online tutorials for it, such as 
Khan Academy&amp;#39;s tutorial.
But your
circumstances may vary, and there are other good choices. If your
age is a single-digit, you might prefer
Alice or Squeak 
or Blockly (older learners might also enjoy these). The important
thing is that you choose and get started.



Appendix: Books and Other Resources


Several people have asked what books and web pages they should learn
from.  I repeat that &amp;quot;book learning alone won&amp;#39;t be enough&amp;quot; but I can
recommend the following:


 Scheme: Structure and
Interpretation of Computer Programs (Abelson &amp;amp; Sussman) is
probably the best introduction to computer science, and it does
teach programming as a way of understanding the computer science. 
You can see online videos of lectures on this book, as well as the complete text online. The book is
challenging and will weed out some people who perhaps could be
successful with another approach.  

 Scheme:
How to
Design Programs (Felleisen et al.) is one of the best books
on how to actually design programs in an elegant and functional way.

 Python: 
Python Programming:
An Intro to CS (Zelle) is a good introduction using Python.  

 Python: Several
online tutorials
 are available at Python.org.

 Oz: Concepts,
Techniques, and Models of Computer Programming (Van Roy &amp;amp; Haridi)
is seen by some as the modern-day successor to Abelson &amp;amp; Sussman.
It is a tour through the big ideas of programming, covering a wider
range than Abelson &amp;amp; Sussman while being perhaps easier to read and
follow.  It uses a language, Oz, that is not widely known but serves as
a basis for learning other languages.

&amp;lt;



Notes
T. Capey points out that the Complete
  Problem Solver page on Amazon now has the &amp;quot;Teach Yourself
  Bengali in 21 days&amp;quot; and &amp;quot;Teach Yourself Grammar and Style&amp;quot; books under the
  &amp;quot;Customers who shopped for this item also shopped for these items&amp;quot;
  section.  I guess that a large portion of the people who look at that
  book are coming from this page.
Thanks to Ross Cohen for help with Hippocrates.



&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;

Translations
Thanks to the
following authors,
translations of 
this page are
available in:


Arabic(Mohamed A. Yahya)



Bulgarian(Boyko Bantchev)


Chinese (Xiaogang Guo)




Croatian
(Tvrtko Bedekovic)



Esperanto
 (Federico Gobbo)



French (Etienne Beauchesne)




German (Stefan Ram)



Hebrew 
(Eric McCain)



Hindi
(Vikash Tiwari)



Hungarian
(Marton Mestyan)



Indonesian
(Tridjito Santoso)



Italian
(Fabio Z. Tessitore)



Japanese (yomoyomo)



Korean 
(John Hwang)



Persian(Mehdi Asgari)


Polish(Kuba Nowak)



Portuguese(Augusto Radtke)



Romanian(Ştefan Lazăr)



Russian(Konstantin Ptitsyn)


Serbian(Lazar Kovacevic)



Spanish (Carlos Rueda)



Slovak
(Jan Waclawek)



Turkish (&amp;#199;ağıl Uluşahin)




Ukranian
(Oleksii Molchanovskyi)</description>
      <author> ()</author>
      <guid>http://norvig.com/21-days.html</guid>
      <pubDate>Sat, 08 Oct 2022 23:05:02 GMT</pubDate>
    </item>
    <item>
      <title>This YouTube video contains its own ID</title>
      <link>https://varun.ch/video-id</link>
      <description>← Back to varun.ch</description>
      <author> ()</author>
      <guid>https://varun.ch/video-id</guid>
      <pubDate>Sat, 08 Oct 2022 23:05:02 GMT</pubDate>
    </item>
    <item>
      <title>There are three types of meetings.</title>
      <link>https://camdaigle.com/posts/three-types-of-meetings/</link>
      <description>I have a system – a survival mechanism, really – for classifying, planning, and executing meetings in a way that helps keep me sane at work.</description>
      <author> ()</author>
      <guid>https://camdaigle.com/posts/three-types-of-meetings/</guid>
      <pubDate>Sat, 08 Oct 2022 23:05:01 GMT</pubDate>
    </item>
    <item>
      <title>A marble changed my perception22 May, 2022</title>
      <link>https://ycsakalli.com/writings/perceptionist-marble</link>
      <description>In my city, winter is generally colder than in any other city around us because it surrounded by mountains which creates isolated weather, and causes drastically low humidity. Without water, air can’t smoothen the temperature, the consequence of that weather is too hot in summer and too cold in the winter.</description>
      <author> ()</author>
      <guid>https://ycsakalli.com/writings/perceptionist-marble</guid>
      <pubDate>Sat, 08 Oct 2022 23:05:01 GMT</pubDate>
    </item>
    <item>
      <title>Why is it hard to learn another programming language?</title>
      <link>https://austinhenley.com/blog/learnanotherpl.html</link>
      <description>Even the most experienced programmers face difficulties learning a new language. A recent study looked into the reasons why!</description>
      <author> (Austin Z. Henley)</author>
      <guid>https://austinhenley.com/blog/learnanotherpl.html</guid>
      <pubDate>Sat, 08 Oct 2022 23:05:01 GMT</pubDate>
    </item>
    <item>
      <title>List of governmental design systems</title>
      <link>https://yasha.solutions/posts/list-of-government-design-systems/</link>
      <description>Wait, what’s a design system A Design System is like a reusable library of components, visuals and principles.
Through composition, the system can scale to offer a path for to create a coherent UX for designers and developers of digital products and services.
The construction of a Design system offers many advantages. This solution makes it possible in particular to facilitate the work of the teams and to reduce the “design debt” and the “technical debt”.</description>
      <author> (YS)</author>
      <guid>https://yasha.solutions/posts/list-of-government-design-systems/</guid>
      <pubDate>Sat, 08 Oct 2022 23:05:01 GMT</pubDate>
    </item>
    <item>
      <title>What Happened to You, Scott? (or, Openness vs. Conviction)</title>
      <link>https://scottscheper.com/letter/43/</link>
      <description>The Website of Scott P. Scheper of San Diego, California.</description>
      <author> ()</author>
      <guid>https://scottscheper.com/letter/43/</guid>
      <pubDate>Sat, 08 Oct 2022 23:05:01 GMT</pubDate>
    </item>
    <item>
      <title>How does the key exchange in HTTPS work?</title>
      <link>https://steven-giesel.com/blogPost/f90d8190-7fd9-452a-b16f-7c2c973b07aa</link>
      <description>In this small blog post we will have a look at how HTTPS works. Well, we will look how the cryptographic part works a bit more in detail.
The focus is on the Diffie Hellman Key algorithm, an asymmetric key exchange.
</description>
      <author> ()</author>
      <guid>https://steven-giesel.com/blogPost/f90d8190-7fd9-452a-b16f-7c2c973b07aa</guid>
      <pubDate>Sat, 08 Oct 2022 21:03:40 GMT</pubDate>
    </item>
    <item>
      <title>Smaller debug info with constructor type homing</title>
      <link>https://blog.llvm.org/posts/2021-04-05-constructor-homing-for-debug-info/</link>
      <description>Constructor type homing for debug info Background Class type information is a large contributor to debug info size. Clang already has a few optimizations to reduce the size of class type information based on the assumption that debug info can be spread out over multiple compilation units.</description>
      <author> (Amy Huang)</author>
      <guid>https://blog.llvm.org/posts/2021-04-05-constructor-homing-for-debug-info/</guid>
      <pubDate>Sat, 08 Oct 2022 20:08:56 GMT</pubDate>
    </item>
    <item>
      <title>Hard Mode Rust</title>
      <link>https://matklad.github.io/2022/10/06/hard-mode-rust.html</link>
      <description>This post is a case study of writing a Rust application using only minimal, artificially constrained API (eg, no dynamic memory allocation).It assumes a fair...</description>
      <author> ()</author>
      <guid>https://matklad.github.io/2022/10/06/hard-mode-rust.html</guid>
      <pubDate>Sat, 08 Oct 2022 12:04:11 GMT</pubDate>
    </item>
    <item>
      <title>Threshold ECDSA in Excessive Detail</title>
      <link>https://cronokirby.substack.com/p/threshold-ecdsa-in-excessive-detail</link>
      <description>Listen now (78 min) | In which I talk about ECDSA, and various ways of thresholdizing it.</description>
      <author> (cronokirby)</author>
      <guid>https://cronokirby.substack.com/p/threshold-ecdsa-in-excessive-detail</guid>
      <pubDate>Sat, 08 Oct 2022 08:03:56 GMT</pubDate>
    </item>
    <item>
      <title>CK&amp;#39;s Cold Dive</title>
      <link>https://cronokirby.substack.com/embed/podcast/threshold-ecdsa-in-excessive-detail?autoplay=1</link>
      <description>Musings about technology, cryptography, and whatever else is on my mind. Click to read CK&amp;#39;s Cold Dive, by cronokirby, a Substack publication. Launched 2 months ago.</description>
      <author> (cronokirby)</author>
      <guid>https://cronokirby.substack.com/embed/podcast/threshold-ecdsa-in-excessive-detail?autoplay=1</guid>
      <pubDate>Sat, 08 Oct 2022 08:03:55 GMT</pubDate>
    </item>
    <item>
      <title>RAID: Bigger, Better, Faster Storage - How, What, and Why?</title>
      <link>https://youtube.com/watch?v=VeM3pYIwvIA</link>
      <description>What is RAID and how does it work?  Why would you use RAID and what are the benefits in terms of performance and reliablity?  Dave Explains mirroring, stripi...</description>
      <author> (Dave&amp;#39;s Garage
  
  
  
    Dave&amp;#39;s Garage
  





    •)</author>
      <guid>https://youtube.com/watch?v=VeM3pYIwvIA</guid>
      <pubDate>Sat, 08 Oct 2022 05:03:17 GMT</pubDate>
    </item>
    <item>
      <title>Rendering Doom With Emojis - CrociDBlog</title>
      <link>https://crocidb.com/post/rendering-doom-with-emojis/</link>
      <description>It seems that creating a doom port, or hacking doom in general, is a common place for programmers. If you search for “doom port” on github, it’s inspiring how diverse projects you can find. The fact that the source code for the game is completely open and self-contained (meaning it doesn’t require dependencies) contributes a lot for this.</description>
      <author> (Bruno Croci)</author>
      <guid>https://crocidb.com/post/rendering-doom-with-emojis/</guid>
      <pubDate>Sat, 08 Oct 2022 05:03:16 GMT</pubDate>
    </item>
  </channel>
</rss>