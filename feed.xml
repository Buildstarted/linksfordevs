<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>Debugging memory corruption: who the hell writes “2” into my stack?! | Unity Blog</title>
      <link>https://blog.unity.com/technology/debugging-memory-corruption-who-the-hell-writes-2-into-my-stack-2</link>
      <description>Several weeks ago we received a bug report from a customer that said their game was crashing when using IL2CPP scripting backend. QA verified the bug and assigned it to me for fixing. The project was quite big (although far from the largest ones); it took 40 minutes to build on my machine. The instructions on the bug report said: “Play the game for 5-10 minutes until it crashes”. Sure enough, after following instructions, I observed a crash. I fired up WinDbg ready to nail it down. Unfortunately, the stack trace was bogus:
0:049&amp;amp;gt; k
# Child-SP RetAddr Call Site
00 00000022`e25feb10 00000000`00000010 0x00007ffa`00000102
0:050&amp;amp;gt; u 0x00007ffa`00000102 L10
00007ffa`00000102 ?? ???
^ Memory access error in &amp;#39;u 0x00007ffa`00000102 l10&amp;#39;
Clearly, it tried executing an invalid memory address. Although the stacktrace had been corrupted, I was hoping that only a part of the whole stack got corrupted and that I should be able to reconstruct it if I look at memory contents past the stack pointer register. Surely enough, that gave me an idea where to look next:
0:049&amp;amp;gt; dps @rsp L200
...............
00000022`e25febd8 00007ffa`b1fdc65c ucrtbased!heap_alloc_dbg+0x1c [d:\th\minkernel\crts\ucrt\src\appcrt\heap\debug_heap.cpp @ 447]
00000022`e25febe0 00000000`00000004
00000022`e25febe8 00000022`00000001
00000022`e25febf0 00000022`00000000
00000022`e25febf8 00000000`00000000
00000022`e25fec00 00000022`e25fec30
00000022`e25fec08 00007ffa`99b3d3ab UnityPlayer!std::_Vector_alloc&amp;amp;lt;std::_Vec_base_types&amp;amp;lt;il2cpp::os::PollRequest,std::allocator&amp;amp;lt;il2cpp::os::PollRequest&amp;amp;gt; &amp;amp;gt; &amp;amp;gt;::_Get_data+0x2b [ c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector @ 642]
00000022`e25fec10 00000022`e25ff458
00000022`e25fec18 cccccccc`cccccccc
00000022`e25fec20 cccccccc`cccccccc
00000022`e25fec28 00007ffa`b1fdf54c ucrtbased!_calloc_dbg+0x6c [d:\th\minkernel\crts\ucrt\src\appcrt\heap\debug_heap.cpp @ 511]
00000022`e25fec30 00000000`00000010
00000022`e25fec38 00007ffa`00000001
...............
00000022`e25fec58 00000000`00000010
00000022`e25fec60 00000022`e25feca0
00000022`e25fec68 00007ffa`b1fdb69e ucrtbased!calloc+0x2e [d:\th\minkernel\crts\ucrt\src\appcrt\heap\calloc.cpp @ 25]
00000022`e25fec70 00000000`00000001
00000022`e25fec78 00000000`00000010
00000022`e25fec80 cccccccc`00000001
00000022`e25fec88 00000000`00000000
00000022`e25fec90 00000022`00000000
00000022`e25fec98 cccccccc`cccccccc
00000022`e25feca0 00000022`e25ff3f0
00000022`e25feca8 00007ffa`99b3b646 UnityPlayer!il2cpp::os::SocketImpl::Poll+0x66 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\win32\socketimpl.cpp @ 1429]
00000022`e25fecb0 00000000`00000001
00000022`e25fecb8 00000000`00000010
...............
00000022`e25ff3f0 00000022`e25ff420
00000022`e25ff3f8 00007ffa`99c1caf4 UnityPlayer!il2cpp::os::Socket::Poll+0x44 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\socket.cpp @ 324]
00000022`e25ff400 00000022`e25ff458
00000022`e25ff408 cccccccc`ffffffff
00000022`e25ff410 00000022`e25ff5b4
00000022`e25ff418 00000022`e25ff594
00000022`e25ff420 00000022`e25ff7e0
00000022`e25ff428 00007ffa`99b585f8 UnityPlayer!il2cpp::vm::SocketPollingThread::RunLoop+0x268 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\vm\threadpool.cpp @ 452]
00000022`e25ff430 00000022`e25ff458
00000022`e25ff438 00000000`ffffffff
...............
00000022`e25ff7d8 00000022`e25ff6b8
00000022`e25ff7e0 00000022`e25ff870
00000022`e25ff7e8 00007ffa`99b58d2c UnityPlayer!il2cpp::vm::SocketPollingThreadEntryPoint+0xec [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\vm\threadpool.cpp @ 524]
00000022`e25ff7f0 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread
00000022`e25ff7f8 00007ffa`99b57700 UnityPlayer!il2cpp::vm::FreeThreadHandle [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\vm\threadpool.cpp @ 488]
00000022`e25ff800 00000000`0000106c
00000022`e25ff808 cccccccc`cccccccc
00000022`e25ff810 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread
00000022`e25ff818 000001c4`1705f5c0
00000022`e25ff820 cccccccc`0000106c
...............
00000022`e25ff860 00005eaa`e9a6af86
00000022`e25ff868 cccccccc`cccccccc
00000022`e25ff870 00000022`e25ff8d0
00000022`e25ff878 00007ffa`99c63b52 UnityPlayer!il2cpp::os::Thread::RunWrapper+0xd2 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\thread.cpp @ 106]
00000022`e25ff880 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread
00000022`e25ff888 00000000`00000018
00000022`e25ff890 cccccccc`cccccccc
...............
00000022`e25ff8a8 000001c4`15508c90
00000022`e25ff8b0 cccccccc`00000002
00000022`e25ff8b8 00007ffa`99b58c40 UnityPlayer!il2cpp::vm::SocketPollingThreadEntryPoint [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\vm\threadpool.cpp @ 494]
00000022`e25ff8c0 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread
00000022`e25ff8c8 000001c4`155a5890
00000022`e25ff8d0 00000022`e25ff920
00000022`e25ff8d8 00007ffa`99c19a14 UnityPlayer!il2cpp::os::ThreadStartWrapper+0x54 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\win32\threadimpl.cpp @ 31]
00000022`e25ff8e0 000001c4`155a5890
...............
00000022`e25ff900 cccccccc`cccccccc
00000022`e25ff908 00007ffa`99c63a80 UnityPlayer!il2cpp::os::Thread::RunWrapper [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\thread.cpp @ 80]
00000022`e25ff910 000001c4`155a5890
...............
00000022`e25ff940 000001c4`1e0801b0
00000022`e25ff948 00007ffa`e6858102 KERNEL32!BaseThreadInitThunk+0x22
00000022`e25ff950 000001c4`1e0801b0
00000022`e25ff958 00000000`00000000
00000022`e25ff960 00000000`00000000
00000022`e25ff968 00000000`00000000
00000022`e25ff970 00007ffa`99c199c0 UnityPlayer!il2cpp::os::ThreadStartWrapper [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\win32\threadimpl.cpp @ 26]
00000022`e25ff978 00007ffa`e926c5b4 ntdll!RtlUserThreadStart+0x34
00000022`e25ff980 00007ffa`e68580e0 KERNEL32!BaseThreadInitThunk
Here’s a rough reconstructed stacktrace:
00000022`e25febd8 00007ffa`b1fdc65c ucrtbased!heap_alloc_dbg+0x1c [...\appcrt\heap\debug_heap.cpp @ 447]
00000022`e25fec28 00007ffa`b1fdf54c ucrtbased!_calloc_dbg+0x6c [...\appcrt\heap\debug_heap.cpp @ 511]
00000022`e25fec68 00007ffa`b1fdb69e ucrtbased!calloc+0x2e [...\appcrt\heap\calloc.cpp @ 25]
00000022`e25feca8 00007ffa`99b3b646 UnityPlayer!il2cpp::os::SocketImpl::Poll+0x66 [...\libil2cpp\os\win32\socketimpl.cpp @ 1429]
00000022`e25ff3f8 00007ffa`99c1caf4 UnityPlayer!il2cpp::os::Socket::Poll+0x44 [...\libil2cpp\os\socket.cpp @ 324]
00000022`e25ff428 00007ffa`99b585f8 UnityPlayer!il2cpp::vm::SocketPollingThread::RunLoop+0x268 [...\libil2cpp\vm\threadpool.cpp @ 452]
00000022`e25ff7e8 00007ffa`99b58d2c UnityPlayer!il2cpp::vm::SocketPollingThreadEntryPoint+0xec [...\libil2cpp\vm\threadpool.cpp @ 524]
00000022`e25ff878 00007ffa`99c63b52 UnityPlayer!il2cpp::os::Thread::RunWrapper+0xd2 [...\libil2cpp\os\thread.cpp @ 106]
00000022`e25ff8d8 00007ffa`99c19a14 UnityPlayer!il2cpp::os::ThreadStartWrapper+0x54 [...\libil2cpp\os\win32\threadimpl.cpp @ 31]
00000022`e25ff948 00007ffa`e6858102 KERNEL32!BaseThreadInitThunk+0x22
00000022`e25ff978 00007ffa`e926c5b4 ntdll!RtlUserThreadStart+0x34
Alright, so now I knew which thread was crashing: it was the IL2CPP runtime socket polling thread. Its responsibility is tell other threads when their sockets are ready to send or receive data. It goes like this: there’s a FIFO queue that socket poll requests get put in by other threads, the socket polling thread then dequeues these requests one by one, calls select() function and when select() returns a result, it queues a callback that was in the original request to the thread pool. So somebody is corrupting the stack badly. In order to narrow the search, I decided to put “stack sentinels” on most stack frames in that thread. Here’s how my stack sentinel was defined:</description>
      <author> ()</author>
      <guid>https://blog.unity.com/technology/debugging-memory-corruption-who-the-hell-writes-2-into-my-stack-2</guid>
      <pubDate>Sun, 14 Nov 2021 14:02:44 GMT</pubDate>
    </item>
    <item>
      <title>Welcome to Full Stack Week</title>
      <link>https://blog.cloudflare.com/full-stack-week-2021/</link>
      <description>This week, as we do in our Innovation Weeks, we’ll make a series of announcements to help paint a vision for how we see the future of compute, and giving our developers the tools they need to build their next application on our network.</description>
      <author> (Rita Kozlov)</author>
      <guid>https://blog.cloudflare.com/full-stack-week-2021/</guid>
      <pubDate>Sun, 14 Nov 2021 14:02:43 GMT</pubDate>
    </item>
    <item>
      <title>C# 10 new feature CallerArgumentExpression, argument check and more</title>
      <link>https://weblogs.asp.net/dixin/c-10-new-feature-callerargumentexpression-argument-check-and-more</link>
      <description>The CallerArgumentExpression has been discussed for years, it was supposed to a part of C# 8.0 but got delayed. Finally this month it is delivered along with C# 10 and .NET 6.&amp;amp;#160;&amp;amp;#8230;</description>
      <author> ()</author>
      <guid>https://weblogs.asp.net/dixin/c-10-new-feature-callerargumentexpression-argument-check-and-more</guid>
      <pubDate>Sun, 14 Nov 2021 11:01:57 GMT</pubDate>
    </item>
    <item>
      <title>Change-making problem - Wikipedia</title>
      <link>https://en.m.wikipedia.org/wiki/Change-making_problem</link>
      <description>The change-making problem addresses the question of finding the minimum number of coins (of certain denominations) that add up to a given amount of money. It is a special case of the integer knapsack problem, and has applications wider than just currency.</description>
      <author> ()</author>
      <guid>https://en.m.wikipedia.org/wiki/Change-making_problem</guid>
      <pubDate>Sun, 14 Nov 2021 09:02:23 GMT</pubDate>
    </item>
    <item>
      <title>Windows 10 and 11 minimal setup for HDR video playback and streaming</title>
      <link>https://weblogs.asp.net/dixin/windows-10-and-11-minimal-setup-for-hdr-video-playback-and-streaming</link>
      <description>On last Black Friday, I purchased a 50-inch 4K HDR10 smart TV with only $150. I use it as monitor for my computer. I didn’t find a walk through tutorial for the whole HDR (High Dynamic Range) setup,&amp;amp;#160;&amp;amp;#8230;</description>
      <author> ()</author>
      <guid>https://weblogs.asp.net/dixin/windows-10-and-11-minimal-setup-for-hdr-video-playback-and-streaming</guid>
      <pubDate>Sun, 14 Nov 2021 07:02:56 GMT</pubDate>
    </item>
    <item>
      <title>Alexandre N&amp;#233;d&amp;#233;lec - Week 45, 2021 - Tips I learned this week</title>
      <link>https://www.techwatching.dev/posts/w45-2021-tips-learned-this-week</link>
      <description>Since a colleague showed me the Vue Devtools extension, it has been a game-changer for me to work on Vue.js projects. It is very useful!</description>
      <author> ()</author>
      <guid>https://www.techwatching.dev/posts/w45-2021-tips-learned-this-week</guid>
      <pubDate>Sun, 14 Nov 2021 03:01:58 GMT</pubDate>
    </item>
    <item>
      <title>About - Project Euler</title>
      <link>https://projecteuler.net/</link>
      <description>A website dedicated to the fascinating world of mathematics and programming</description>
      <author> (Colin Hughes)</author>
      <guid>https://projecteuler.net/</guid>
      <pubDate>Sun, 14 Nov 2021 03:01:57 GMT</pubDate>
    </item>
    <item>
      <title>Reverse-engineering the Yamaha DX7 synthesizer&amp;#39;s sound chip from die photos</title>
      <link>https://www.righto.com/2021/11/reverse-engineering-yamaha-dx7.html</link>
      <description>  The Yamaha DX7 digital synthesizer was released in 1983 and became &amp;quot;one of the most important advances in the history of modern popular mu...</description>
      <author> ()</author>
      <guid>https://www.righto.com/2021/11/reverse-engineering-yamaha-dx7.html</guid>
      <pubDate>Sat, 13 Nov 2021 23:02:27 GMT</pubDate>
    </item>
    <item>
      <title>restic &amp;#183; Backups done right!</title>
      <link>https://restic.net/</link>
      <description>Restic is a modern backup program that can back up your files:</description>
      <author> ()</author>
      <guid>https://restic.net/</guid>
      <pubDate>Sat, 13 Nov 2021 20:02:23 GMT</pubDate>
    </item>
    <item>
      <title>Why asynchronous Rust doesn&amp;#39;t work</title>
      <link>https://eta.st/2021/03/08/async-rust-2.html</link>
      <description>In 2017, I said that “asynchronous Rust programming is a disaster and a mess”. In 2021a lot more of the Rust ecosystem has become asynchronous – such that it...</description>
      <author> ()</author>
      <guid>https://eta.st/2021/03/08/async-rust-2.html</guid>
      <pubDate>Sat, 13 Nov 2021 20:02:21 GMT</pubDate>
    </item>
    <item>
      <title>Dolphin Progress Report: September and October 2021</title>
      <link>https://dolphin-emu.org/blog/2021/11/13/dolphin-progress-report-september-and-october-2021/</link>
      <description>It&amp;#39;s the beginning of the month and time for another Dolphin Progress Report! ...That line doesn&amp;#39;t exactly work when it&amp;#39;s midway through the month, huh? This Progress Report ended up being a very technically challenging report to write with several huge rabbit holes that go through the history of Dolphin…</description>
      <author> ()</author>
      <guid>https://dolphin-emu.org/blog/2021/11/13/dolphin-progress-report-september-and-october-2021/</guid>
      <pubDate>Sat, 13 Nov 2021 19:02:02 GMT</pubDate>
    </item>
    <item>
      <title>myNewsWrap – SAP and Microsoft (Episode 60)</title>
      <link>https://www.youtube.com/watch?v=NwwQt8mCKmA</link>
      <description>My podcast about news from the SAP and Microsoft universe.Details see: https://github.com/lechnerc77/myNewsWrapFeedback etc. welcome via issues in that repo0...</description>
      <author> (Christian Lechner
  
  
  
    Christian Lechner
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=NwwQt8mCKmA</guid>
      <pubDate>Sat, 13 Nov 2021 18:02:22 GMT</pubDate>
    </item>
    <item>
      <title>Higher Maths for Beginners : Ya. B. Zeldovich, I. M. Yaglom : Free Download, Borrow, and Streaming : Internet Archive</title>
      <link>https://archive.org/details/ZeldovichYaglomHigherMathematics</link>
      <description>This book is a joint attempt of a physicist and a mathematician to write an entirely new type of book for future scientists and engineers. … The purpose of...</description>
      <author> ()</author>
      <guid>https://archive.org/details/ZeldovichYaglomHigherMathematics</guid>
      <pubDate>Sat, 13 Nov 2021 18:02:20 GMT</pubDate>
    </item>
    <item>
      <title>myNewsWrap/episode060.md at main &amp;#183; lechnerc77/myNewsWrap</title>
      <link>https://github.com/lechnerc77/myNewsWrap/blob/main/episodes/episode060.md</link>
      <description>Repo for my video podcast about news from the SAP and Microsoft universe - myNewsWrap/episode060.md at main &amp;#183; lechnerc77/myNewsWrap</description>
      <author> (lechnerc77)</author>
      <guid>https://github.com/lechnerc77/myNewsWrap/blob/main/episodes/episode060.md</guid>
      <pubDate>Sat, 13 Nov 2021 18:02:20 GMT</pubDate>
    </item>
    <item>
      <title>Debit cards as financial infrastructure</title>
      <link>https://bam.kalzumeus.com/archive/debit-cards-are-hidden-financial-infrastructure/</link>
      <description>Debit cards are a core piece of financial infrastructure and drive much of the innovation happening in fintech.</description>
      <author> (Author)</author>
      <guid>https://bam.kalzumeus.com/archive/debit-cards-are-hidden-financial-infrastructure/</guid>
      <pubDate>Sat, 13 Nov 2021 18:02:19 GMT</pubDate>
    </item>
    <item>
      <title>Email From FBI Looks Odd</title>
      <link>https://old.reddit.com/r/sysadmin/comments/qsun7o/email_from_fbi_looks_odd/</link>
      <description>Yeah, this is terrifying to receive. Email from FBI supposedly just came through: eims @ic.fbi.gov Our intelligence monitoring indicates...</description>
      <author> (DymoPoly)</author>
      <guid>https://old.reddit.com/r/sysadmin/comments/qsun7o/email_from_fbi_looks_odd/</guid>
      <pubDate>Sat, 13 Nov 2021 15:02:08 GMT</pubDate>
    </item>
    <item>
      <title>Cloudflare blocks an almost 2 Tbps multi-vector DDoS attack</title>
      <link>https://blog.cloudflare.com/cloudflare-blocks-an-almost-2-tbps-multi-vector-ddos-attack/</link>
      <description>Earlier this week, Cloudflare automatically detected and mitigated a DDoS attack that peaked just below 2 Tbps — the largest we’ve seen to date.</description>
      <author> (Omer Yoachimik)</author>
      <guid>https://blog.cloudflare.com/cloudflare-blocks-an-almost-2-tbps-multi-vector-ddos-attack/</guid>
      <pubDate>Sat, 13 Nov 2021 15:02:06 GMT</pubDate>
    </item>
  </channel>
</rss>