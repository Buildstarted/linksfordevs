<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>GitHub Plagued by 4.5 Million Fake Stars Problem Misleading Users</title>
      <link>https://cyberinsider.com/github-plagued-by-4-5-million-fake-stars-problem-misleading-users/</link>
      <description>GitHub faces a growing issue of fake star campaigns, which artificially inflate repository popularity metrics and introduce risks to users.</description>
      <author> ()</author>
      <guid>https://cyberinsider.com/github-plagued-by-4-5-million-fake-stars-problem-misleading-users/</guid>
      <pubDate>Thu, 19 Dec 2024 19:01:47 GMT</pubDate>
    </item>
    <item>
      <title>Managing Complexity in Modern Software Systems</title>
      <link>https://youtube.com/watch?v=spkpxteJKu8</link>
      <description>Congratulations on becoming a developer for Plant-Based Pizza!

I&amp;#39;m James Eastham, here to guide you through a modern approach to software architecture and systems design, emphasizing simplicity, evolvability, and portability.

You&amp;#39;ll learn about essential vs. accidental complexity, the core components of modern software systems, and how to minimize complexity.

Watch as we explore the evolution from a monolithic application to a microservices architecture, including caching, messaging, orchestration, and observability integration.

00:00 Welcome to Plant-Based Pizza
00:59 Understanding Essential and Accidental Complexity
02:02 Building Blocks of Modern Software Systems
02:25 Synchronous and Asynchronous Processes
04:28 Minimizing Accidental Complexity
05:26 Evolution of Plant-Based Pizza&amp;#39;s Architecture
07:26 Transition to Microservices
08:05 Core Components of Modern Software Architecture
10:52 Conclusion and Next Steps

PlantBasedPizza Codebase: https://github.com/jeastham1993/PlantBasedPizza

Web: https://jameseastham.co.uk
LinkedIn: https://www.linkedin.com/in/james-eastham/
Bluesky: https://bsky.app/profile/jameseastham.co.uk</description>
      <author> (James Eastham)</author>
      <guid>https://youtube.com/watch?v=spkpxteJKu8</guid>
      <pubDate>Thu, 19 Dec 2024 18:01:41 GMT</pubDate>
    </item>
    <item>
      <title>What&amp;#39;s next: the Fluent UI Blazor library v5</title>
      <link>https://baaijte.net/blog/microsoft-fluentui-aspnetcore.components-5/</link>
      <description>If you&amp;#39;re curious on what we are doing for the next major version of the library, read on...</description>
      <author> ()</author>
      <guid>https://baaijte.net/blog/microsoft-fluentui-aspnetcore.components-5/</guid>
      <pubDate>Thu, 19 Dec 2024 16:01:50 GMT</pubDate>
    </item>
    <item>
      <title>Interactive C# WebDev</title>
      <link>https://youtube.com/watch?v=LEJnHFPNh8U</link>
      <description>Turn your videos into live streams with https://restream.io

Fritz is working on an open source application that YOU can get the source code to and follow along.  Check out SharpSite https://github.com/FritzAndFriends/SharpSite</description>
      <author> (Fritz&amp;#39;s Tech Tips and Chatter)</author>
      <guid>https://youtube.com/watch?v=LEJnHFPNh8U</guid>
      <pubDate>Thu, 19 Dec 2024 16:01:46 GMT</pubDate>
    </item>
    <item>
      <title>fish-shell 4.0b1, now in Rust</title>
      <link>https://fishshell.com/blog/fish-4b/</link>
      <description>A smart and user-friendly command line shell</description>
      <author> ()</author>
      <guid>https://fishshell.com/blog/fish-4b/</guid>
      <pubDate>Thu, 19 Dec 2024 15:01:09 GMT</pubDate>
    </item>
    <item>
      <title>What Did Ada Lovelace&amp;#39;s Program Actually Do?</title>
      <link>https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html</link>
      <description>In 1843, Ada Lovelace published the first nontrivial program. How did it work?
</description>
      <author> ()</author>
      <guid>https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html</guid>
      <pubDate>Thu, 19 Dec 2024 09:01:35 GMT</pubDate>
    </item>
    <item>
      <title>Factory Design Pattern in C#</title>
      <link>https://youtube.com/watch?v=urvoINv_94Q</link>
      <description>Unlock the power of the Factory Design Pattern in C# with this comprehensive tutorial! Learn how to implement flexible object creation and enhance your software architecture. Perfect for C# developers looking to master design patterns and improve code maintainability. In this video, you&amp;#39;ll discover: 

• The core concepts of the Factory Design Pattern
• Step-by-step implementation in C# with real-world examples
• How to create objects without exposing the creation logic
• Best practices for using Factory Pattern in your projects 

Whether you&amp;#39;re a beginner or an experienced developer, this guide will help you leverage the Factory Pattern to build more robust and scalable C# applications. Boost your skills in object-oriented programming, design patterns, and C# development.

Key Benefits of the Factory Pattern:
• Encapsulation: It hides the complexities of object creation from the client code
• Flexibility: Allows for easy addition of new product types without modifying existing code
• Improved maintainability: Centralizes object creation logic, making it easier to manage and update

Enhance your C# programming skills and learn how to create more flexible and maintainable code with the Factory Design Pattern. Perfect for developers looking to level up their software design expertise. Don&amp;#39;t miss out on this opportunity to master a crucial design pattern in C#. Watch now and take your coding skills to the next level!

Linkedin: https://www.linkedin.com/in/remigiusz-zalewski

#csharp #dotnet #aspnetcore #programming</description>
      <author> (Remigiusz Zalewski)</author>
      <guid>https://youtube.com/watch?v=urvoINv_94Q</guid>
      <pubDate>Thu, 19 Dec 2024 07:01:51 GMT</pubDate>
    </item>
    <item>
      <title>GitHub - pwr-Solaar/Solaar: Linux device manager for Logitech devices</title>
      <link>https://github.com/pwr-Solaar/Solaar</link>
      <description>Linux device manager for Logitech devices. Contribute to pwr-Solaar/Solaar development by creating an account on GitHub.</description>
      <author> ()</author>
      <guid>https://github.com/pwr-Solaar/Solaar</guid>
      <pubDate>Thu, 19 Dec 2024 03:01:58 GMT</pubDate>
    </item>
    <item>
      <title>Go&amp;#39;s Weird Little Iterators &amp;#183; mcyoung</title>
      <link>https://mcyoung.xyz/2024/12/16/rangefuncs/</link>
      <description>A second post on Go silliness (Miguel, aren’t you a C++ programmer?): in 1.23, Go finally added custom iterators. Now, back when I was at Google and involved in the Go compiler as “the annoying Rust guy who gets lunch with us”, there were proposals suggesting adding something like this, implemented as either an interface or a func:</description>
      <author> ()</author>
      <guid>https://mcyoung.xyz/2024/12/16/rangefuncs/</guid>
      <pubDate>Thu, 19 Dec 2024 02:01:55 GMT</pubDate>
    </item>
    <item>
      <title>Failing Randomly: Linux Seccomp and Kernel Hacking</title>
      <link>https://mejedi.dev/posts/failing-randomly-linux-seccomp/</link>
      <description>Seccomp filters system calls with cBPF code. One can blacklist certain system call numbers or even make a decision based on call arguments. Both Docker and Chromium use seccomp to protect host from malicious or misbehaving programs.
With seccomp we can make a syscall fail consistently. We can’t make a syscall fail with a certain probability though. How hard could it be to extend seccomp for a complete kernel newbie?</description>
      <author> ()</author>
      <guid>https://mejedi.dev/posts/failing-randomly-linux-seccomp/</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:08 GMT</pubDate>
    </item>
    <item>
      <title>Neovim: Tips and tricks for OCaml&amp;#39;s LSP server</title>
      <link>https://moritzhamann.com/blog/2024-12-18-ocamllsp-in-neovim.html</link>
      <description>How to ensure ocamllsp uses up to date build information</description>
      <author> ()</author>
      <guid>https://moritzhamann.com/blog/2024-12-18-ocamllsp-in-neovim.html</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:06 GMT</pubDate>
    </item>
    <item>
      <title>A new era of aerial combat. – Tochnyi.info</title>
      <link>https://tochnyi.info/2024/11/fpv-interceptors-2024/</link>
      <description>In a first for modern warfare, the Ukrainian Defense Forces have been using FPV drones to intercept Russian surveillance drones and other UAVs. In recent months, a variety of published sources have included video evidence showing the considerable success Ukraine has had in doing so. This article examines aggregated open-source data on interceptions of Russian “fixed-wing” drones.</description>
      <author> ()</author>
      <guid>https://tochnyi.info/2024/11/fpv-interceptors-2024/</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:06 GMT</pubDate>
    </item>
    <item>
      <title>Efficient German Language Learning: Is Anki the Answer?</title>
      <link>https://www.argpar.se/posts/misc/efficient-german-language-learning-is-anki-the-answer</link>
      <description>My quest to master German vocabulary. Follow me on how I&amp;#39;m leveraging Anki to overcome years of procrastination.</description>
      <author> (https://www.facebook.com/jonathan.sundqvist)</author>
      <guid>https://www.argpar.se/posts/misc/efficient-german-language-learning-is-anki-the-answer</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:04 GMT</pubDate>
    </item>
    <item>
      <title>Notes on ray casting | nielssp.dk</title>
      <link>https://nielssp.dk/2024/11/notes-on-raycasting</link>
      <description>The website and blog of a 31 year old software developer</description>
      <author> ()</author>
      <guid>https://nielssp.dk/2024/11/notes-on-raycasting</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:04 GMT</pubDate>
    </item>
    <item>
      <title>How to Make LLMs Shut Up</title>
      <link>https://www.greptile.com/blog/make-llms-shut-up</link>
      <description>Everything that went wrong trying to make our LLMs say less.</description>
      <author> (Daksh Gupta)</author>
      <guid>https://www.greptile.com/blog/make-llms-shut-up</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:04 GMT</pubDate>
    </item>
    <item>
      <title>No, You can’t bet on everything (and that’s okay)</title>
      <link>https://rnikhil.com/2024/12/18/prediction-market-crypto</link>
      <description>Prediction markets, despite their theoretical promise and success in sports ($330B US betting volume) and elections ($40B in 2024), are unlikely to become mainstream for all future events due to fundamental demand and liquidity constraints. The core issue isn’t regulation or technology - it’s that none of the three key market participants find prediction markets appealing: gamblers want quick resolutions (42% of 2020 election volume traded in final week), long-term investors prefer growing wealth in traditional assets, and market makers can’t operate without consistent retail flow (there is no demand for betting on topics except elections and sports).</description>
      <author> ()</author>
      <guid>https://rnikhil.com/2024/12/18/prediction-market-crypto</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:04 GMT</pubDate>
    </item>
    <item>
      <title>Lies, damned lies, and Impact Hero (refoorest, allcolibri)</title>
      <link>https://palant.info/2024/10/01/lies-damned-lies-and-impact-hero-refoorest-allcolibri/</link>
      <description>I found 17 extensions using the Impact Hero SDK in Chrome Web Store. These mislead users about their functionality, enable it without real consent, then lie about its ecological impact. And there is more shady stuff going on.</description>
      <author> ()</author>
      <guid>https://palant.info/2024/10/01/lies-damned-lies-and-impact-hero-refoorest-allcolibri/</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:03 GMT</pubDate>
    </item>
    <item>
      <title>Seeing the World Through Your Field</title>
      <link>https://www.sebastianmellen.com/post/2024/seeing-the-world-through-your-field/</link>
      <description>Something funny happens if you work in a particular field long enough, which is that you start to see everything that happens through the lens of the field you work in.
For example, my current company (Cerebrum) operates in the background screening space. So I’ve started to see everything through the lens of background checks.
 Economic news is about companies, and news about companies is really news about the people in those companies, which is really news about who those people are hiring, which is really news about the background screening industry.</description>
      <author> ()</author>
      <guid>https://www.sebastianmellen.com/post/2024/seeing-the-world-through-your-field/</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:03 GMT</pubDate>
    </item>
    <item>
      <title>How I Made My SIMD Code 1700x Faster Without Writing Any Intrinsics</title>
      <link>https://bhavana.io/bridging-the-cpu-gpu-divide-experimenting-with-ispc-and-compute-shaders/</link>
      <description>Background

This is the story of a project to add an efficient CPU backend for a shader language that is meant to compile down to GPU programs. Allow me to set the scene with a few prerequisite pieces of technology to become acquainted with:


The Forge Framework

The Forge is</description>
      <author> ()</author>
      <guid>https://bhavana.io/bridging-the-cpu-gpu-divide-experimenting-with-ispc-and-compute-shaders/</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:03 GMT</pubDate>
    </item>
    <item>
      <title>How concurrecy works: A visual guide</title>
      <link>https://wyounas.github.io/concurrency/2024/12/12/how-concurrency-works-a-visual-guide/</link>
      <description>Welcome to Waqas&amp;#39; blog</description>
      <author> ()</author>
      <guid>https://wyounas.github.io/concurrency/2024/12/12/how-concurrency-works-a-visual-guide/</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:03 GMT</pubDate>
    </item>
    <item>
      <title>Yet Another List of Random Opinions on Writing Readable Code and Other Rants | Blog</title>
      <link>https://www.lucavall.in/blog/yet-another-list-of-random-opinions-on-writing-readable-code-and-other-rants</link>
      <description>After more than a decade of writing software, I&amp;#39;ve read lots of opinions on how to write good software. Everyone loves to throw around rules and principles, so I&amp;#39;ll do it too.</description>
      <author> (Luca Cavallin)</author>
      <guid>https://www.lucavall.in/blog/yet-another-list-of-random-opinions-on-writing-readable-code-and-other-rants</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:03 GMT</pubDate>
    </item>
    <item>
      <title>Building blogmate.io: Recursive Phoenix Components</title>
      <link>https://davidbishai.com/elixir/phoenix/2024/12/14/recursive-phoenix-components.html</link>
      <description>This post is part of a series on building blogmate.io, a rich comment system for static blogs and sites. If you have a static blog, or are thinking of starting one, please go check it out and spread the word!</description>
      <author> ()</author>
      <guid>https://davidbishai.com/elixir/phoenix/2024/12/14/recursive-phoenix-components.html</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:03 GMT</pubDate>
    </item>
    <item>
      <title>Penny Game Debrief</title>
      <link>https://zarar.dev/penny-game-debrief/</link>
      <description>

This is a debrief of the popular  which demonstrates flow. The questions a facilitator can ask during a debrief are varied. Some examples are below:




...</description>
      <author> ()</author>
      <guid>https://zarar.dev/penny-game-debrief/</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:03 GMT</pubDate>
    </item>
    <item>
      <title>Optimizing Ruby’s JSON, Part 2</title>
      <link>https://byroot.github.io/ruby/json/2024/12/18/optimizing-ruby-json-part-2.html</link>
      <description>In the previous post, I covered my motivations for improving ruby/json’s performance, and detailed the first 4 notable optimizations applied to speed up JSON generation.</description>
      <author> ()</author>
      <guid>https://byroot.github.io/ruby/json/2024/12/18/optimizing-ruby-json-part-2.html</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:02 GMT</pubDate>
    </item>
    <item>
      <title>Building A Simple Filesystem Backed Cache With Golang</title>
      <link>https://mzfit.app/blog/2024/12/07/building_a_filesystem_backed_cache_with_golang/</link>
      <description>Don&amp;#39;t write software that&amp;#39;s too gross</description>
      <author> ()</author>
      <guid>https://mzfit.app/blog/2024/12/07/building_a_filesystem_backed_cache_with_golang/</guid>
      <pubDate>Thu, 19 Dec 2024 01:02:01 GMT</pubDate>
    </item>
    <item>
      <title>1-800-ChatGPT - Calling and Messaging ChatGPT with your phone | OpenAI Help Center</title>
      <link>https://help.openai.com/en/articles/10193193-1-800-chatgpt-calling-and-messaging-chatgpt-with-your-phone</link>
      <description></description>
      <author> ()</author>
      <guid>https://help.openai.com/en/articles/10193193-1-800-chatgpt-calling-and-messaging-chatgpt-with-your-phone</guid>
      <pubDate>Wed, 18 Dec 2024 23:02:19 GMT</pubDate>
    </item>
    <item>
      <title>Everything we shipped in 2024</title>
      <link>https://platform.uno/blog/everything-we-shipped-in-2024/</link>
      <description>Pixel-Perfect Multi-Platform Applications with C# and WinUI for Windows, WebAssembly, iOS, macOS, Android and Linux</description>
      <author> ()</author>
      <guid>https://platform.uno/blog/everything-we-shipped-in-2024/</guid>
      <pubDate>Wed, 18 Dec 2024 21:01:59 GMT</pubDate>
    </item>
    <item>
      <title>Announcing a free GitHub Copilot for VS Code</title>
      <link>https://code.visualstudio.com/blogs/2024/12/18/free-github-copilot</link>
      <description>Announcing a free plan for GitHub Copilot in Visual Studio Code.</description>
      <author> ()</author>
      <guid>https://code.visualstudio.com/blogs/2024/12/18/free-github-copilot</guid>
      <pubDate>Wed, 18 Dec 2024 21:01:57 GMT</pubDate>
    </item>
    <item>
      <title>What&amp;#39;s new for the Microsoft Fluent UI Blazor library 4.11</title>
      <link>https://baaijte.net/blog/microsoft-fluentui-aspnetcore.components-4.11/</link>
      <description>Just before the end of year holiday period, we are bringing you a new version. Before you start upgrading, please go through the post here and the notes on the site first because we had to make some breaking changes. Read on to learn more...</description>
      <author> ()</author>
      <guid>https://baaijte.net/blog/microsoft-fluentui-aspnetcore.components-4.11/</guid>
      <pubDate>Wed, 18 Dec 2024 21:01:56 GMT</pubDate>
    </item>
  </channel>
</rss>