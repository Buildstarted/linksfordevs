<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>Liberating Wi-Fi on the ESP32</title>
      <link>https://media.ccc.de/v/38c3-liberating-wi-fi-on-the-esp32</link>
      <description>Reverse engineering the Wi-Fi peripheral of the ESP32 to build an open source Wi-Fi stack.

During the 38c3, there are probably multipl...</description>
      <author> ()</author>
      <guid>https://media.ccc.de/v/38c3-liberating-wi-fi-on-the-esp32</guid>
      <pubDate>Sat, 28 Dec 2024 15:01:42 GMT</pubDate>
    </item>
    <item>
      <title>Debugging memory corruption: Who wrote ‘2’ into my stack?!</title>
      <link>https://unity.com/blog/engine-platform/debugging-memory-debugging-memory-corruption-who-wrote-2-into-my-stack-who-the-hell</link>
      <description>Several weeks ago we received a bug report from a customer that said their game was crashing when using IL2CPP scripting backend. QA verified the bug and assigned it to me for fixing. The project was quite big (although far from the largest ones); it took 40 minutes to build on my machine. The instructions on the bug report said: “Play the game for 5-10 minutes until it crashes”. Sure enough, after following instructions, I observed a crash. I fired up WinDbg ready to nail it down. Unfortunately, the stack trace was bogus:
0:049&amp;amp;gt; k
# Child-SP RetAddr Call Site
00 00000022`e25feb10 00000000`00000010 0x00007ffa`00000102
0:050&amp;amp;gt; u 0x00007ffa`00000102 L10
00007ffa`00000102 ?? ???
^ Memory access error in &amp;#39;u 0x00007ffa`00000102 l10&amp;#39;
Clearly, it tried executing an invalid memory address. Although the stacktrace had been corrupted, I was hoping that only a part of the whole stack got corrupted and that I should be able to reconstruct it if I look at memory contents past the stack pointer register. Surely enough, that gave me an idea where to look next:
0:049&amp;amp;gt; dps @rsp L200
...............
00000022`e25febd8 00007ffa`b1fdc65c ucrtbased!heap_alloc_dbg+0x1c [d:\th\minkernel\crts\ucrt\src\appcrt\heap\debug_heap.cpp @ 447]
00000022`e25febe0 00000000`00000004
00000022`e25febe8 00000022`00000001
00000022`e25febf0 00000022`00000000
00000022`e25febf8 00000000`00000000
00000022`e25fec00 00000022`e25fec30
00000022`e25fec08 00007ffa`99b3d3ab UnityPlayer!std::_Vector_alloc&amp;amp;lt;std::_Vec_base_types&amp;amp;lt;il2cpp::os::PollRequest,std::allocator&amp;amp;lt;il2cpp::os::PollRequest&amp;amp;gt; &amp;amp;gt; &amp;amp;gt;::_Get_data+0x2b [ c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector @ 642]
00000022`e25fec10 00000022`e25ff458
00000022`e25fec18 cccccccc`cccccccc
00000022`e25fec20 cccccccc`cccccccc
00000022`e25fec28 00007ffa`b1fdf54c ucrtbased!_calloc_dbg+0x6c [d:\th\minkernel\crts\ucrt\src\appcrt\heap\debug_heap.cpp @ 511]
00000022`e25fec30 00000000`00000010
00000022`e25fec38 00007ffa`00000001
...............
00000022`e25fec58 00000000`00000010
00000022`e25fec60 00000022`e25feca0
00000022`e25fec68 00007ffa`b1fdb69e ucrtbased!calloc+0x2e [d:\th\minkernel\crts\ucrt\src\appcrt\heap\calloc.cpp @ 25]
00000022`e25fec70 00000000`00000001
00000022`e25fec78 00000000`00000010
00000022`e25fec80 cccccccc`00000001
00000022`e25fec88 00000000`00000000
00000022`e25fec90 00000022`00000000
00000022`e25fec98 cccccccc`cccccccc
00000022`e25feca0 00000022`e25ff3f0
00000022`e25feca8 00007ffa`99b3b646 UnityPlayer!il2cpp::os::SocketImpl::Poll+0x66 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\win32\socketimpl.cpp @ 1429]
00000022`e25fecb0 00000000`00000001
00000022`e25fecb8 00000000`00000010
...............
00000022`e25ff3f0 00000022`e25ff420
00000022`e25ff3f8 00007ffa`99c1caf4 UnityPlayer!il2cpp::os::Socket::Poll+0x44 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\socket.cpp @ 324]
00000022`e25ff400 00000022`e25ff458
00000022`e25ff408 cccccccc`ffffffff
00000022`e25ff410 00000022`e25ff5b4
00000022`e25ff418 00000022`e25ff594
00000022`e25ff420 00000022`e25ff7e0
00000022`e25ff428 00007ffa`99b585f8 UnityPlayer!il2cpp::vm::SocketPollingThread::RunLoop+0x268 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\vm\threadpool.cpp @ 452]
00000022`e25ff430 00000022`e25ff458
00000022`e25ff438 00000000`ffffffff
...............
00000022`e25ff7d8 00000022`e25ff6b8
00000022`e25ff7e0 00000022`e25ff870
00000022`e25ff7e8 00007ffa`99b58d2c UnityPlayer!il2cpp::vm::SocketPollingThreadEntryPoint+0xec [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\vm\threadpool.cpp @ 524]
00000022`e25ff7f0 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread
00000022`e25ff7f8 00007ffa`99b57700 UnityPlayer!il2cpp::vm::FreeThreadHandle [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\vm\threadpool.cpp @ 488]
00000022`e25ff800 00000000`0000106c
00000022`e25ff808 cccccccc`cccccccc
00000022`e25ff810 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread
00000022`e25ff818 000001c4`1705f5c0
00000022`e25ff820 cccccccc`0000106c
...............
00000022`e25ff860 00005eaa`e9a6af86
00000022`e25ff868 cccccccc`cccccccc
00000022`e25ff870 00000022`e25ff8d0
00000022`e25ff878 00007ffa`99c63b52 UnityPlayer!il2cpp::os::Thread::RunWrapper+0xd2 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\thread.cpp @ 106]
00000022`e25ff880 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread
00000022`e25ff888 00000000`00000018
00000022`e25ff890 cccccccc`cccccccc
...............
00000022`e25ff8a8 000001c4`15508c90
00000022`e25ff8b0 cccccccc`00000002
00000022`e25ff8b8 00007ffa`99b58c40 UnityPlayer!il2cpp::vm::SocketPollingThreadEntryPoint [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\vm\threadpool.cpp @ 494]
00000022`e25ff8c0 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread
00000022`e25ff8c8 000001c4`155a5890
00000022`e25ff8d0 00000022`e25ff920
00000022`e25ff8d8 00007ffa`99c19a14 UnityPlayer!il2cpp::os::ThreadStartWrapper+0x54 [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\win32\threadimpl.cpp @ 31]
00000022`e25ff8e0 000001c4`155a5890
...............
00000022`e25ff900 cccccccc`cccccccc
00000022`e25ff908 00007ffa`99c63a80 UnityPlayer!il2cpp::os::Thread::RunWrapper [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\thread.cpp @ 80]
00000022`e25ff910 000001c4`155a5890
...............
00000022`e25ff940 000001c4`1e0801b0
00000022`e25ff948 00007ffa`e6858102 KERNEL32!BaseThreadInitThunk+0x22
00000022`e25ff950 000001c4`1e0801b0
00000022`e25ff958 00000000`00000000
00000022`e25ff960 00000000`00000000
00000022`e25ff968 00000000`00000000
00000022`e25ff970 00007ffa`99c199c0 UnityPlayer!il2cpp::os::ThreadStartWrapper [ c:\users\tautvydas\builds\bin2\il2cppoutputproject\il2cpp\libil2cpp\os\win32\threadimpl.cpp @ 26]
00000022`e25ff978 00007ffa`e926c5b4 ntdll!RtlUserThreadStart+0x34
00000022`e25ff980 00007ffa`e68580e0 KERNEL32!BaseThreadInitThunk
Here’s a rough reconstructed stacktrace:
00000022`e25febd8 00007ffa`b1fdc65c ucrtbased!heap_alloc_dbg+0x1c [...\appcrt\heap\debug_heap.cpp @ 447]
00000022`e25fec28 00007ffa`b1fdf54c ucrtbased!_calloc_dbg+0x6c [...\appcrt\heap\debug_heap.cpp @ 511]
00000022`e25fec68 00007ffa`b1fdb69e ucrtbased!calloc+0x2e [...\appcrt\heap\calloc.cpp @ 25]
00000022`e25feca8 00007ffa`99b3b646 UnityPlayer!il2cpp::os::SocketImpl::Poll+0x66 [...\libil2cpp\os\win32\socketimpl.cpp @ 1429]
00000022`e25ff3f8 00007ffa`99c1caf4 UnityPlayer!il2cpp::os::Socket::Poll+0x44 [...\libil2cpp\os\socket.cpp @ 324]
00000022`e25ff428 00007ffa`99b585f8 UnityPlayer!il2cpp::vm::SocketPollingThread::RunLoop+0x268 [...\libil2cpp\vm\threadpool.cpp @ 452]
00000022`e25ff7e8 00007ffa`99b58d2c UnityPlayer!il2cpp::vm::SocketPollingThreadEntryPoint+0xec [...\libil2cpp\vm\threadpool.cpp @ 524]
00000022`e25ff878 00007ffa`99c63b52 UnityPlayer!il2cpp::os::Thread::RunWrapper+0xd2 [...\libil2cpp\os\thread.cpp @ 106]
00000022`e25ff8d8 00007ffa`99c19a14 UnityPlayer!il2cpp::os::ThreadStartWrapper+0x54 [...\libil2cpp\os\win32\threadimpl.cpp @ 31]
00000022`e25ff948 00007ffa`e6858102 KERNEL32!BaseThreadInitThunk+0x22
00000022`e25ff978 00007ffa`e926c5b4 ntdll!RtlUserThreadStart+0x34
Alright, so now I knew which thread was crashing: it was the IL2CPP runtime socket polling thread. Its responsibility is tell other threads when their sockets are ready to send or receive data. It goes like this: there’s a FIFO queue that socket poll requests get put in by other threads, the socket polling thread then dequeues these requests one by one, calls select() function and when select() returns a result, it queues a callback that was in the original request to the thread pool. So somebody is corrupting the stack badly. In order to narrow the search, I decided to put “stack sentinels” on most stack frames in that thread. Here’s how my stack sentinel was defined:
</description>
      <author> ()</author>
      <guid>https://unity.com/blog/engine-platform/debugging-memory-debugging-memory-corruption-who-wrote-2-into-my-stack-who-the-hell</guid>
      <pubDate>Sat, 28 Dec 2024 08:01:33 GMT</pubDate>
    </item>
    <item>
      <title>Effective Software Teams: Islands and Autonomy - Principal Software Engineering Manager AMA</title>
      <link>https://youtube.com/watch?v=x2DfkB_9hb0</link>
      <description>What makes an effective software engineering team?

It depends!

In all seriousness though, many factors go into running effective teams. In this stream, I wanted to focus on some examples of things I&amp;#39;ve seen work well and others that have not gone so well!

As with all livestreams, I&amp;#39;m looking forward to answering YOUR questions! So join me live and ask in the chat, or you can comment now and I can try to get it answered while I stream.

----
&amp;#128273; Membership &amp;amp; Subscriptions:
- &amp;#128232; Weekly Newsletter: https://weekly.devleader.ca
- &amp;#127960;️ Private Discord Community: https://sidestack.io/devleader

&amp;#129504; Courses:
- All Courses: https://www.devleader.ca/courses
- Get Promoted As A Software Engineer: https://dometrain.com/course/career-getting-promoted-as-a-software-engineer/?ref=nick-cosentino
- Nailing The Behavioral Interview: https://dometrain.com/course/career-nailing-the-behavioral-interview/?ref=nick-cosentino
- Getting Started with C#: https://dometrain.com/course/getting-started-csharp?ref=nick-cosentino
- Deep dive C#: https://dometrain.com/course/deep-dive-csharp?ref=nick-cosentino
- C# Zero to Hero BUNDLE: https://dometrain.com/bundle/from-zero-to-hero-csharp/?ref=nick-cosentino
- Reflection in .NET: https://dometrain.com/course/from-zero-to-hero-reflection-in-dotnet/?ref=nick-cosentino
- Refactoring For C# Devs: https://dometrain.com/course/from-zero-to-hero-refactoring-for-csharp-developers?ref=nick-cosentino
- [FREE] Intro to Software Development: https://www.youtube.com/playlist?list=PLzATctVhnsggb3lj53T8fJSK6LJQFUyKS

&amp;#128483;️ Social Media &amp;amp; Links:
- All My Links: https://linktr.ee/devleader
- Vlogs: @DevLeaderBTS @CodeCommute 
- Blog: https://www.devleader.ca/
- TikTok: https://www.tiktok.com/@devleader
- LinkedIn: https://www.linkedin.com/in/nickcosentino
- Threads: https://threads.net/@dev.leader
- Twitter: https://twitter.com/DevLeaderCa
- Facebook: https://www.facebook.com/DevLeaderCa
- Instagram: https://www.instagram.com/dev.leader
- GitHub: https://github.com/ncosentino/
- Twitch: https://twitch.tv/devleaderca
- YouTube: https://youtube.com/@DevLeader?sub_confirmation=1

❤️ Affiliations &amp;amp; Products/Services That I Love:
- @BrandGhostAI  for all of my content creation: https://brandghost.ai
- AI shorts helper Opus Clip: https://opus.pro/?via=2f9e97
- VPS hosting from RackNerd: https://my.racknerd.com/aff.php?aff=9013
- VPS hosting from Contabo: https://www.jdoqocy.com/click-101028632-12454592
- Newsletter platform ConvertKit: https://convertkit.com/?lmref=c5X7KQ
- Newsletter referral system SparkLoop: https://dash.sparkloop.app/signup?aff=9fe76c8b
----
#ama #askmeanything #softwareengineering #softwareengineer</description>
      <author> (Dev Leader)</author>
      <guid>https://youtube.com/watch?v=x2DfkB_9hb0</guid>
      <pubDate>Sat, 28 Dec 2024 08:01:29 GMT</pubDate>
    </item>
    <item>
      <title>Notes on China</title>
      <link>https://www.dwarkeshpatel.com/p/notes-on-china</link>
      <description>Last month, I spent 2 weeks in China - I visited Beijing, Chengdu, Dujiangyan, Chongqing, Shanghai, and Hangzho.</description>
      <author> ()</author>
      <guid>https://www.dwarkeshpatel.com/p/notes-on-china</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:51 GMT</pubDate>
    </item>
    <item>
      <title>Guide: User Defined Variables in MySQL</title>
      <link>https://nelkodev.com/en/blog/master-user-defined-variables-in-mysql/</link>
      <description>Discover how to use user-defined variables in MySQL with this complete step-by-step guide. Learn how to optimize your queries and improve the performance of your database.</description>
      <author> ()</author>
      <guid>https://nelkodev.com/en/blog/master-user-defined-variables-in-mysql/</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:51 GMT</pubDate>
    </item>
    <item>
      <title>Copy Code from CLI to LLMs</title>
      <link>https://azerkoculu.com/posts/llmcat-copy-code-from-cli-to-llms</link>
      <description>I frequently need to feed parts of my codebase to LLMs. Manually going into the directories, finding the files, and preparing them in the right format for LLMs was taking me away from what I really want to do.</description>
      <author> ()</author>
      <guid>https://azerkoculu.com/posts/llmcat-copy-code-from-cli-to-llms</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:49 GMT</pubDate>
    </item>
    <item>
      <title>A founder&amp;#39;s midlife crisis</title>
      <link>https://alexperelman.com/a-founders-midlife-crisis/</link>
      <description>On paper, I was living the Silicon Valley dream – a heartwarming immigrant success story straight from the TechCrunch cookie cutter. A first generation immigrant educated at top US universities, a four time founder, my previous company had grown to doing billions in GMV, now going through YC for the second</description>
      <author> ()</author>
      <guid>https://alexperelman.com/a-founders-midlife-crisis/</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:48 GMT</pubDate>
    </item>
    <item>
      <title>Solving Sudoku with tmux</title>
      <link>https://willhbr.net/2024/12/27/solving-sudoku-with-tmux/</link>
      <description>The question that everyone has been asking me since I compiled Python to run on tmux is: “can you actually do anything useful with this?”. I’m happy to report back that the answer is still no, but I can now use tmux to solve sudoku, and I can do it using a different and trickier approach than the one I used with the compiler. With projects like this, seeing is believing, so I made a quick video showing what it...</description>
      <author> ()</author>
      <guid>https://willhbr.net/2024/12/27/solving-sudoku-with-tmux/</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:48 GMT</pubDate>
    </item>
    <item>
      <title>Creating Impactful Data Products</title>
      <link>https://georgoulis.tech/how-to-build-data-products-that-matter</link>
      <description>Build impactful Data Products by understanding user needs, prioritizing value, and continuously improving for real-world benefits</description>
      <author> (https://hashnode.com/@georgoulis)</author>
      <guid>https://georgoulis.tech/how-to-build-data-products-that-matter</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:48 GMT</pubDate>
    </item>
    <item>
      <title>The Ego-Legacy Complex: On Ancient Monuments and Modern Malaise</title>
      <link>https://www.joanwestenberg.com/the-ego-legacy-complex-on-ancient-monuments-and-modern-malaise/</link>
      <description>A handful of years ago, I visited the Roman Forum in M&amp;#233;rida, Spain. And I found myself contemplating a peculiar fact: I was standing among ruins that had survived longer than most modern nations have existed. These towering columns had watched Spain become Spain, seen the Moors arrive and leave,</description>
      <author> ()</author>
      <guid>https://www.joanwestenberg.com/the-ego-legacy-complex-on-ancient-monuments-and-modern-malaise/</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:48 GMT</pubDate>
    </item>
    <item>
      <title>Learning Solver Design: Automating Factorio Balancers</title>
      <link>https://gianlucaventurini.com/posts/2024/factorio-sat</link>
      <description>I built a Factorio belt balancer solver. From tiny 2x2 grids to a massive 16x16 monster, every step revealed new solver tricks, numeric hiccups, and devious debugging puzzles.</description>
      <author> ()</author>
      <guid>https://gianlucaventurini.com/posts/2024/factorio-sat</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:48 GMT</pubDate>
    </item>
    <item>
      <title>On the Structure of Neural Embeddings</title>
      <link>https://seanpedersen.github.io/posts/structure-of-neural-latent-space</link>
      <description>Another place for thought infusion</description>
      <author> ()</author>
      <guid>https://seanpedersen.github.io/posts/structure-of-neural-latent-space</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:48 GMT</pubDate>
    </item>
    <item>
      <title>Unix Time and a Modest Proposal</title>
      <link>https://www.johndcook.com/blog/2024/12/27/unix-time/</link>
      <description>Why Unix time is not exactly what it is often described to be, and a proposal for fixing it.</description>
      <author> ()</author>
      <guid>https://www.johndcook.com/blog/2024/12/27/unix-time/</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:48 GMT</pubDate>
    </item>
    <item>
      <title>matthewsinclair.com &amp;#183; Intelligence. Innovation. Leadership. Influence.</title>
      <link>https://matthewsinclair.com/blog/0173-52-things-i-learned-in-2024</link>
      <description>Source: Photo by Kajetan Sumila on Unsplash</description>
      <author> ()</author>
      <guid>https://matthewsinclair.com/blog/0173-52-things-i-learned-in-2024</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:48 GMT</pubDate>
    </item>
    <item>
      <title>openai-structured-outputs-are-really-useful - Chad Nauseam Home</title>
      <link>https://chadnauseam.com/coding/ai/openai-structured-outputs-are-really-useful</link>
      <description>openai-structured-outputs-are-really-useful - Chad Nauseam Home</description>
      <author> ()</author>
      <guid>https://chadnauseam.com/coding/ai/openai-structured-outputs-are-really-useful</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:47 GMT</pubDate>
    </item>
    <item>
      <title>How to add metaprogramming to Gleam – lpil.uk</title>
      <link>https://lpil.uk/blog/how-to-add-metaprogramming-to-gleam/</link>
      <description>From the keyboard of Louis Pilfold</description>
      <author> ()</author>
      <guid>https://lpil.uk/blog/how-to-add-metaprogramming-to-gleam/</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:47 GMT</pubDate>
    </item>
    <item>
      <title>12 Days of EXO</title>
      <link>https://blog.exolabs.net/day-2/</link>
      <description>12 Days of Truly Open Innovation</description>
      <author> ()</author>
      <guid>https://blog.exolabs.net/day-2/</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:47 GMT</pubDate>
    </item>
    <item>
      <title>Browsers are absolutely unusable | KorigamiK</title>
      <link>https://korigamik.dev.ar/blog/browsers_are_unsable/</link>
      <description>A rant on the modern web browser usability for power users.</description>
      <author> ()</author>
      <guid>https://korigamik.dev.ar/blog/browsers_are_unsable/</guid>
      <pubDate>Sat, 28 Dec 2024 03:01:46 GMT</pubDate>
    </item>
    <item>
      <title>Why OpenAI’s Structure Must Evolve To Advance Our Mission</title>
      <link>https://openai.com/index/why-our-structure-must-evolve-to-advance-our-mission</link>
      <description>A stronger non-profit supported by the for-profit’s success.</description>
      <author> ()</author>
      <guid>https://openai.com/index/why-our-structure-must-evolve-to-advance-our-mission</guid>
      <pubDate>Sat, 28 Dec 2024 02:01:29 GMT</pubDate>
    </item>
    <item>
      <title>PlasticList</title>
      <link>https://www.plasticlist.org/report</link>
      <description>Data on plastic chemicals in Bay Area foods</description>
      <author> ()</author>
      <guid>https://www.plasticlist.org/report</guid>
      <pubDate>Sat, 28 Dec 2024 02:01:29 GMT</pubDate>
    </item>
    <item>
      <title>GitHub - DrewThomasson/ebook2audiobook: Convert ebooks to audiobooks with chapters and metadata using dynamic AI models and voice cloning. Supports 1,107+ languages!</title>
      <link>https://github.com/DrewThomasson/ebook2audiobook</link>
      <description>Convert ebooks to audiobooks with chapters and metadata using dynamic AI models and voice cloning. Supports 1,107+ languages! - DrewThomasson/ebook2audiobook</description>
      <author> ()</author>
      <guid>https://github.com/DrewThomasson/ebook2audiobook</guid>
      <pubDate>Sat, 28 Dec 2024 01:01:39 GMT</pubDate>
    </item>
    <item>
      <title>What Rewriting a 40-Year-Old Project Taught Me About Software Development</title>
      <link>https://www.milanjovanovic.tech/blog/what-rewriting-a-40-year-old-project-taught-me-about-software-development</link>
      <description>When tasked with modernizing a 40-year-old manufacturing system written in APL, I faced both technical complexity and organizational challenges that shaped my understanding of successful software development. This article shares key lessons learned during a four-year journey of rewriting critical legacy code while keeping a $10M business running smoothly.</description>
      <author> ()</author>
      <guid>https://www.milanjovanovic.tech/blog/what-rewriting-a-40-year-old-project-taught-me-about-software-development</guid>
      <pubDate>Sat, 28 Dec 2024 01:01:38 GMT</pubDate>
    </item>
    <item>
      <title>Lasering Incidents</title>
      <link>https://xkcd.com/3030/</link>
      <description></description>
      <author> ()</author>
      <guid>https://xkcd.com/3030/</guid>
      <pubDate>Fri, 27 Dec 2024 23:01:40 GMT</pubDate>
    </item>
    <item>
      <title>Does current AI represent a dead end?</title>
      <link>https://www.bcs.org/articles-opinion-and-research/does-current-ai-represent-a-dead-end/</link>
      <description>Eerke Boiten, Professor of Cyber Security at De Montfort University Leicester, explains his belief that current AI should not be used for serious applications.</description>
      <author> ()</author>
      <guid>https://www.bcs.org/articles-opinion-and-research/does-current-ai-represent-a-dead-end/</guid>
      <pubDate>Fri, 27 Dec 2024 18:01:40 GMT</pubDate>
    </item>
  </channel>
</rss>