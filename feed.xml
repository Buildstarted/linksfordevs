<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>Week 0056</title>
      <link>https://dev.to/kasuken/week-0056-2843</link>
      <description>Monday   In the morning, my colleague and me, had the new sprint meeting for Red Origin. It...</description>
      <author> ()</author>
      <guid>https://dev.to/kasuken/week-0056-2843</guid>
      <pubDate>Sun, 30 Apr 2023 14:01:35 GMT</pubDate>
    </item>
    <item>
      <title>Did You Know You Can Do This With EF8 SqlQuery? #shorts</title>
      <link>https://youtube.com/watch?v=y2E-hgWMKH0</link>
      <description>Support me on Patreon to access the source code:https://www.patreon.com/milanjovanovicJoin my weekly .NET newsletter:https://www.milanjovanovic.techRead my B...</description>
      <author> (Marc Evanstein / music․py
  
  
  
    Marc Evanstein / music․py
  






    •)</author>
      <guid>https://youtube.com/watch?v=y2E-hgWMKH0</guid>
      <pubDate>Sun, 30 Apr 2023 13:01:34 GMT</pubDate>
    </item>
    <item>
      <title>Uno Platform for Figma Preview 5: Enhanced Features for Designers and Developers </title>
      <link>https://www.infoq.com/news/2023/04/uno-platform-figma-plugin-5/</link>
      <description>Uno Platform has released Preview 5 of its Figma plugin, offering enhanced features for designers and developers. The latest version of the plugin allows the creation of custom colors, enables the import of Design Systems Packages (DSP), and offers new controls such as Pips Pager, TabBar, and ItemsRepeater for greater flexibility in creating dynamic designs.</description>
      <author> (Almir Vuk)</author>
      <guid>https://www.infoq.com/news/2023/04/uno-platform-figma-plugin-5/</guid>
      <pubDate>Sun, 30 Apr 2023 13:01:33 GMT</pubDate>
    </item>
    <item>
      <title>How to lock orientation at runtime on iOS 16 with .NET MAUI and Xamarin.Forms</title>
      <link>https://msicc.net/how-to-lock-orientation-at-runtime-on-ios-16-with-net-maui-and-xamarin-forms/</link>
      <description>With iOS 16, Apple made some old APIs non-functional. This includes also the established way of locking the orientation. In this post, I am going to show you how you can lock orientation on iOS 16 while the app is running with both .NET MAUI and Xamarin.Forms.</description>
      <author> (msicc)</author>
      <guid>https://msicc.net/how-to-lock-orientation-at-runtime-on-ios-16-with-net-maui-and-xamarin-forms/</guid>
      <pubDate>Sun, 30 Apr 2023 07:02:41 GMT</pubDate>
    </item>
    <item>
      <title>Verifying your DI Container</title>
      <link>https://steven-giesel.com/blogPost/ce948083-974a-4c16-877f-246b8909fa6d</link>
      <description>Microsoft&amp;#39;s integrated dependency injection (short DI) container is very powerful, but there are also certain pitfalls. In this article, I will show you what some of the pitfalls are and how you can verify them.
</description>
      <author> ()</author>
      <guid>https://steven-giesel.com/blogPost/ce948083-974a-4c16-877f-246b8909fa6d</guid>
      <pubDate>Sun, 30 Apr 2023 05:01:34 GMT</pubDate>
    </item>
    <item>
      <title>Bluesky Social</title>
      <link>https://bsky.app/profile/davidw.bsky.social</link>
      <description>See what&amp;#39;s next.</description>
      <author> ()</author>
      <guid>https://bsky.app/profile/davidw.bsky.social</guid>
      <pubDate>Sun, 30 Apr 2023 02:02:14 GMT</pubDate>
    </item>
    <item>
      <title>FOSS I Love</title>
      <link>https://ahelwer.ca/post/2023-04-29-sunshine-moonlight/</link>
      <description>Local game streaming with Sunshine and Moonlight</description>
      <author> (Andrew Helwer)</author>
      <guid>https://ahelwer.ca/post/2023-04-29-sunshine-moonlight/</guid>
      <pubDate>Sat, 29 Apr 2023 23:02:32 GMT</pubDate>
    </item>
    <item>
      <title>Why do I want to Email Myself Every Day?</title>
      <link>https://blog.bettersheets.co/why-do-i-want-to-email-myself-every-day/</link>
      <description>After creating an Apps Script to email myself every day from a Google Sheet, someone asked: Why?

Overall I find I can face the day better when I have timed reminders inside my inbox. My deep work is deeper, and almost nothing gets forgotten, when I want to execute it</description>
      <author> (Andrew Kamphey)</author>
      <guid>https://blog.bettersheets.co/why-do-i-want-to-email-myself-every-day/</guid>
      <pubDate>Sat, 29 Apr 2023 23:02:32 GMT</pubDate>
    </item>
    <item>
      <title>More Design Patterns For Machine Learning Systems</title>
      <link>https://eugeneyan.com/writing/more-patterns/</link>
      <description>9 patterns including HITL, hard mining, reframing, cascade, data flywheel, business rules layer, and more.</description>
      <author> (https://eugeneyan.com/about/)</author>
      <guid>https://eugeneyan.com/writing/more-patterns/</guid>
      <pubDate>Sat, 29 Apr 2023 23:02:32 GMT</pubDate>
    </item>
    <item>
      <title>You Are Getting Terrible Sleep Advice</title>
      <link>https://ameistad.com/articles/you-are-getting-terrible-sleep-advice/</link>
      <description>Obsessing over sleep and trying too hard will backfire.</description>
      <author> ()</author>
      <guid>https://ameistad.com/articles/you-are-getting-terrible-sleep-advice/</guid>
      <pubDate>Sat, 29 Apr 2023 23:02:31 GMT</pubDate>
    </item>
    <item>
      <title>ChatGPT-4 outperformed 90% developers</title>
      <link>https://zagosk.in/chatgpt-4-outperformed-90-percent-of-developers</link>
      <description>Discover how ChatGPT-4 surpasses 90% of developers in solving coding challenges. Explore the future and potential of AI in software development.</description>
      <author> (Follow)</author>
      <guid>https://zagosk.in/chatgpt-4-outperformed-90-percent-of-developers</guid>
      <pubDate>Sat, 29 Apr 2023 21:02:20 GMT</pubDate>
    </item>
    <item>
      <title>Drop down lists in ASP.NET MVC | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2013/08/drop-down-lists-in-asp-net-mvc/</link>
      <description>Full source code is a attached here.
This post shows two methods of implementing drop down lists in ASP.NET MVC 4. The code for data access and the general layout of the application should not be considered suitable for anything other than pedagogical purposes.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2013/08/drop-down-lists-in-asp-net-mvc/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:21 GMT</pubDate>
    </item>
    <item>
      <title>Debugging an AWS Lambda Function Locally with Visual Studio Code (VS Code) on Windows, Linux, and Mac | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2022/05/debugging-an-aws-lambda-function-locally-with-visual-studio-code-vs-code-on-windows-linux-and-mac/</link>
      <description>It is easy to debug an AWS Lambda function locally with Visual Studio Code, all you need to do is install one tool and make one change to the launch.json file. Read on to see how.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2022/05/debugging-an-aws-lambda-function-locally-with-visual-studio-code-vs-code-on-windows-linux-and-mac/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:11 GMT</pubDate>
    </item>
    <item>
      <title>Simmy Chaos Engine for .NET – Part 5, Breaking Your Own Code | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2019/11/simmy-chaos-engine-for-net-part-5-breaking-your-own-code/</link>
      <description>Full source code here.
Want to learn more about Polly? Check out my Pluralsight course on it.
The blog posts I have written so far about Simmy all deal with the scenario where you don’t have control over the source code that you want to break, in these cases Simmy policies are applied to the calling code.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2019/11/simmy-chaos-engine-for-net-part-5-breaking-your-own-code/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:10 GMT</pubDate>
    </item>
    <item>
      <title>Text to Speech with Amazon Polly and .NET | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2023/01/text-to-speech-with-amazon-polly-and-net/</link>
      <description>Using Amazon Polly to convert text to speech is very easy, with a small .NET console application you can send the text to Amazon and play it on your computer.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2023/01/text-to-speech-with-amazon-polly-and-net/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:10 GMT</pubDate>
    </item>
    <item>
      <title>Reading CSV Files into Objects with Node.js | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2020/10/reading-csv-files-into-objects-with-node-js/</link>
      <description>Full source code available here.
As I am learning Node.Js I am constantly surprised by how easy it is to do some things, and how difficult to do others, and how poor the examples out there are.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2020/10/reading-csv-files-into-objects-with-node-js/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:10 GMT</pubDate>
    </item>
    <item>
      <title>The Circuit Breaker pattern with Polly | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2018/03/the-circuit-breaker-pattern-with-polly/</link>
      <description>Full source code available here.
Want to learn more about Polly? Check out my Pluralsight course on it.
This post on the Polly circuit breaker is part of a larger series of post on the Polly Resilience Framework, see here for the others, or check out my Pluralsight course.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2018/03/the-circuit-breaker-pattern-with-polly/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:10 GMT</pubDate>
    </item>
    <item>
      <title>GitHub Actions with .NET, Part 2 - Dependent Jobs | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2021/04/github-actions-with-net-part-2-dependent-jobs/</link>
      <description>In the previous post I gave a quick introduction to GitHub Actions showing how to build a small Hello World application and make the artifact available for download. In this post, I&amp;#39;ll show how to build debug and release versions of the same application, with the release only being built if the debug one builds successfully.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2021/04/github-actions-with-net-part-2-dependent-jobs/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:09 GMT</pubDate>
    </item>
    <item>
      <title>Varying the Time Between Polly Retries Based on the Exception | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2021/07/varying-the-time-between-polly-retries-based-on-the-exception/</link>
      <description>Polly&amp;#39;s Wait and Retry lets you decide how long it should pause based on the exception thrown in the invoked code. This is very useful when you know what problems can occur and how long you need to wait for them to resolve.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2021/07/varying-the-time-between-polly-retries-based-on-the-exception/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:08 GMT</pubDate>
    </item>
    <item>
      <title>Working with JSON in .NET, Infrastructure as Code with Pulumi | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2020/10/working-with-json-in-net-infrastructure-as-code-with-pulumi/</link>
      <description>Full source code available here.
This is a follow up to my previous post where I used dynamic and JSON files to make querying ElasticSearch with a HttpClient much easier.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2020/10/working-with-json-in-net-infrastructure-as-code-with-pulumi/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:08 GMT</pubDate>
    </item>
    <item>
      <title>Installing Rider on Linux with .NET 7 | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2023/01/installing-rider-on-linux-with-net-7/</link>
      <description>While trying to use Rider on Linux, I hit these errors &amp;quot;load failed&amp;quot;, &amp;quot;MSBuild is required to load project &amp;#39;HelloLinux&amp;#39; but it was not found&amp;quot;, and &amp;quot;MSBuild (Microsoft Build Engine) is required to load and build project &amp;#39;HelloLinux&amp;#39;&amp;quot;. If you got any of these, read on to find out how to fix them.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2023/01/installing-rider-on-linux-with-net-7/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:08 GMT</pubDate>
    </item>
    <item>
      <title>Customizing a specific string inside a class using AutoFixture | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2016/04/customizing-a-specific-string-inside-a-class-using-autofixture/</link>
      <description>Full source code.
I’ve been using AutoFixture for a while with my unit tests. It creates objects with prefilled data, saving me the hassle of manually constructing them.
Basic usage If you want a string from AutoFixture do something like -</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2016/04/customizing-a-specific-string-inside-a-class-using-autofixture/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:08 GMT</pubDate>
    </item>
    <item>
      <title>Caching Values Inside HttpResponseMessage with Polly – caching series 2/3 | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2019/04/caching-values-inside-httpresponsemessage-with-polly-caching-series-2-3/</link>
      <description>Full source code here.
Want to learn more about Polly? Check out my Pluralsight course on it.
In this, the second of three posts on caching in Polly, I will show how to cache the values returned inside a HttpResponseMessage as opposed to caching the response with all its various elements.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2019/04/caching-values-inside-httpresponsemessage-with-polly-caching-series-2-3/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:06 GMT</pubDate>
    </item>
    <item>
      <title>Netlify, Hugo, and Wowchemy or: How I Learned to Stop Worrying and Love the Blog | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2021/05/netlify-hugo-and-wowchemy-or-how-i-learned-to-stop-worrying-and-love-the-blog/</link>
      <description>For years my blog was on WordPress hosted by a third party, I recently moved it to Netlify, Hugo, and Wowchemy. It is much faster, easier to work with, more reliable, and more secure. Getting a blog up and running with those tools is very easy; migrating hundreds of posts, less so, but worth it.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2021/05/netlify-hugo-and-wowchemy-or-how-i-learned-to-stop-worrying-and-love-the-blog/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:05 GMT</pubDate>
    </item>
    <item>
      <title>Caching in Polly and the HttpClientFactory | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2018/11/caching-in-polly-and-the-httpclientfactory/</link>
      <description>Full source code here.
Want to learn more about Polly? Check out my Pluralsight course on it.
Polly allows you to cache a response for reuse by a subsequent request, it supports both local an distributed caches, full information can be found here https://github.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2018/11/caching-in-polly-and-the-httpclientfactory/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:05 GMT</pubDate>
    </item>
    <item>
      <title>A Simple Example of Amazon Transcribe with .NET | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2023/02/a-simple-example-of-amazon-transcribe-with-net/</link>
      <description>Speech to text is now as simple as uploading a file, starting a transcription job, and waiting for the results.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2023/02/a-simple-example-of-amazon-transcribe-with-net/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:05 GMT</pubDate>
    </item>
    <item>
      <title>Entity Framework Core, Calling Stored Procedures and Returning to a Model | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2018/03/entity-framework-core-calling-stored-procedures-and-returning-to-a-model/</link>
      <description>Full source code available here.
I wrote a post some time back about calling a stored procedure with Entity Framework using the DbCommand, but it was a bit complicated and not that easy to use.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2018/03/entity-framework-core-calling-stored-procedures-and-returning-to-a-model/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:04 GMT</pubDate>
    </item>
    <item>
      <title>Fluent Validation in ASP.NET Core | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2017/06/fluent-validation-in-asp-net-core/</link>
      <description>Full source code available here.
I have written about Fluent Validation a couple of times. There is a new library available for .Net Core.
How to return to validation messages back to the caller is not immediately obvious.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2017/06/fluent-validation-in-asp-net-core/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:02 GMT</pubDate>
    </item>
    <item>
      <title>Testing Your Code When Using Polly | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2019/03/testing-your-code-when-using-polly/</link>
      <description>Full source code here.
Want to learn more about Polly? Check out my Pluralsight course on it.
When developing an application with Polly you will also probably want to write some unit tests.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2019/03/testing-your-code-when-using-polly/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:02 GMT</pubDate>
    </item>
    <item>
      <title>Signing calls to Lambda Function URLs using IAM auth with HttpClient | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2022/07/signing-calls-to-lambda-function-urls-using-iam-auth-with-httpclient/</link>
      <description>If you are using IAM auth with Lambda Function URLs, and you want to call the function using HttpClient from a .NET application, you need to sign the request. Read on to see how.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2022/07/signing-calls-to-lambda-function-urls-using-iam-auth-with-httpclient/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:02 GMT</pubDate>
    </item>
    <item>
      <title>C# and AWS Lambdas, Part 2 - Web API and an API Gateway | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2021/02/c-and-aws-lambdas-part-2-web-api-and-an-api-gateway/</link>
      <description>In the [previous post](/2021/02/c-and-aws-lambdas-part-1-hello-world/) I created a Lambda that executed a C# console application. In this post, I walk through creating a .NET Core 3.1 Web API application inside a Lambda and making it reachable from the web, just like a normal Web API application. </description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2021/02/c-and-aws-lambdas-part-2-web-api-and-an-api-gateway/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:01 GMT</pubDate>
    </item>
    <item>
      <title>Using the In-Memory Cache with .NET Core Web API | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2018/05/using-the-in-memory-cache-with-net-core-web-api/</link>
      <description>Full source code available here.
If you need to store anything temporarily within an application, you should consider using the In-Memory Cache from Microsoft. In .NET Core it is much easier to use than its predecessor from Framework 4.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2018/05/using-the-in-memory-cache-with-net-core-web-api/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:01 GMT</pubDate>
    </item>
    <item>
      <title>Caching Secrets Manager Secrets with a Lambda Layer | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2022/10/caching-secrets-manager-secrets-with-a-lambda-layer/</link>
      <description>Lambda layers allow you to leverage functionality provided by AWS. This post shows how to use the AWS Parameters and Secrets Lambda Extension to cache Secrets Manager secrets.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2022/10/caching-secrets-manager-secrets-with-a-lambda-layer/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:00 GMT</pubDate>
    </item>
    <item>
      <title>Doing a bit of Docker Cleanup | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2021/11/doing-a-bit-of-docker-cleanup/</link>
      <description>After using Docker for a while I like cleaning out all my images, containers, volumes, and the build cache. Here are some simple commands to do that.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2021/11/doing-a-bit-of-docker-cleanup/</guid>
      <pubDate>Sat, 29 Apr 2023 16:07:00 GMT</pubDate>
    </item>
    <item>
      <title>The Simplest Hello World in Node.js | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2020/09/the-simplest-hello-world-in-node-js/</link>
      <description>Full source code available here.
I am learning Node.js and have found it a bit of a struggle to locate good, simple documentation. It feels like most people writing in the space assume a lot of existing knowledge, like you know how plenty of JavaScript, or how to effectively use web browser debug tools, have a good understanding of HTML and CSS.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2020/09/the-simplest-hello-world-in-node-js/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:58 GMT</pubDate>
    </item>
    <item>
      <title>Cached nuget packages causing you problems? | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2016/05/cached-nuget-packages-causing-you-problems/</link>
      <description>Short version If you are having problems with nuget packages and think it might be related to local caching delete packages from these directories -
%LocalAppData%\NuGet\Cache and %userprofile%\.nuget\packages\
Long version I was making nuget package, lets call it Foo, for my own use, not one that I was going to distribute publicly, but I was putting in on MyGet.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2016/05/cached-nuget-packages-causing-you-problems/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:58 GMT</pubDate>
    </item>
    <item>
      <title>Fleet Manager, an easy way to check in on an EC2 Windows instance | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2022/01/fleet-manager-an-easy-way-to-check-in-on-an-ec2-windows-instance/</link>
      <description>Sometimes all you want to do is have a quick look at a Windows EC2 instance to see what is going on, or make a small change.  I&amp;#39;ll show how to do that without the difficulty of making security group changes.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2022/01/fleet-manager-an-easy-way-to-check-in-on-an-ec2-windows-instance/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:57 GMT</pubDate>
    </item>
    <item>
      <title>Indexing the Works of Shakespeare in Elasticsearch - Part 1, Infrastructure as Code | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2020/11/indexing-the-works-of-shakespeare-in-elasticsearch-part-1-infrastructure-as-code/</link>
      <description>Part one of a four-parter where I&amp;#39;m going to show how to index the complete works of Shakespeare in Elasticsearch. This first part will set up the infrastructure on AWS. The second will go through the lambda that bulk loads data into Elasticsearch. The third will show how to, in Node.js, create the index on the Elasticsearch domain, read the works of Shakespeare from CSV and send to Kinesis, and the fourth will put a .NET 5 Web Api in front of the Elasticsearch cluster.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2020/11/indexing-the-works-of-shakespeare-in-elasticsearch-part-1-infrastructure-as-code/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:57 GMT</pubDate>
    </item>
    <item>
      <title>Pizza Delivery IoT Project Pt. 2</title>
      <link>https://basementprogrammer.hashnode.dev/pizza-delivery-iot-project-pt-2</link>
      <description>Continuing from Pizza Delivery IoT Project Pt. 1, I have completed much of the circuit design on my breadboard and completed the basic code necessary to interact with the sensors on the board.

To interact with the various components on the board, I ...</description>
      <author> (Follow)</author>
      <guid>https://basementprogrammer.hashnode.dev/pizza-delivery-iot-project-pt-2</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:57 GMT</pubDate>
    </item>
    <item>
      <title>Dotclear blog editing problem | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2013/08/dotclear-blog-editing-problem/</link>
      <description>The dotclear blogging engine has some issues when including pre-formated html; it removes all leading spaces and mangles empty lines.
This is a significant problem when posting nicely coloured code snippets like those produced by hilite.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2013/08/dotclear-blog-editing-problem/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:55 GMT</pubDate>
    </item>
    <item>
      <title>Accidental LLM Backdoor - Prompt Tricks</title>
      <link>https://youtube.com/watch?v=h74oXb4Kk8k</link>
      <description>In this video we explore various prompt tricks to manipulate the AI to respond in ways we want, even when the system instructions want something else. This c...</description>
      <author> (Avantrio
  
  
  
    Avantrio
  






    •)</author>
      <guid>https://youtube.com/watch?v=h74oXb4Kk8k</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:55 GMT</pubDate>
    </item>
    <item>
      <title>Improving Lambda Custom Runtime Cold Start and Deployment Speeds with .NET 6 | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2021/12/improving-lambda-custom-runtime-cold-start-and-deployment-speed-with-net-6/</link>
      <description>A couple of new features in .NET 6 improve Lambda cold start times and the speed of deploying new functions. Read on to see how.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2021/12/improving-lambda-custom-runtime-cold-start-and-deployment-speed-with-net-6/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:54 GMT</pubDate>
    </item>
    <item>
      <title>WhenAny with a List of Different Types of Task, Processing Each as They Finish | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2021/11/whenany-with-a-list-of-different-types-of-task-processing-each-as-they-finish/</link>
      <description>After some discussions on Twitter a few new ways of using WhenAny with Tasks of different types came up. Here is what I think will be my last post on this topic for a while, probably...</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2021/11/whenany-with-a-list-of-different-types-of-task-processing-each-as-they-finish/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:54 GMT</pubDate>
    </item>
    <item>
      <title>GitHub Actions with .NET, Part 3 - Manual Approvals | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2021/05/github-actions-with-net-part-3-manual-appovals/</link>
      <description>Sometimes you will want a user to approve a build job/step in GitHub Actions, in this post I show you how to do just that.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2021/05/github-actions-with-net-part-3-manual-appovals/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:53 GMT</pubDate>
    </item>
    <item>
      <title>Executing an AWS .NET Lambda at an Exact Time with Step Functions | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2021/06/executing-an-aws-net-lambda-at-an-exact-time-with-step-functions/</link>
      <description>AWS Step Functions are a very easy way to orchestrate many things. But they can also be used to run a Lambda at an exact time (down to a tenth of a second, or less), up to a year in the future.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2021/06/executing-an-aws-net-lambda-at-an-exact-time-with-step-functions/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:51 GMT</pubDate>
    </item>
    <item>
      <title>Web API 2 and ninject, how to make them work together | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2016/04/web-api-2-and-ninject-how-to-make-them-work-together/</link>
      <description>Full source code to download.
I’ve been using ninject for a few years, but every time I use it with Web Api I hit some problem and they usually stem from not including the right nuget packages, not changing the DependencyResolver or (once) forgetting how to make a binding!</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2016/04/web-api-2-and-ninject-how-to-make-them-work-together/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:51 GMT</pubDate>
    </item>
    <item>
      <title>Indexing the Works of Shakespeare in Elasticsearch – Part 3, Sending the Lines to Kinesis | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2020/11/indexing-the-works-of-shakespeare-in-elasticsearch-part-3-sending-the-lines-to-kinesis/</link>
      <description>In this, the third part of the series, I show how to read from the Shakespeare CSV file where each row represents a line from a play, ([download here](https://file.ac/5b5t4n9lN5o/Shakespeare%20Plays.csv)), and send these lines to Kinesis. The lambda in AWS will pick up the lines from Kinesis and forward them to Elasticsearch for indexing.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2020/11/indexing-the-works-of-shakespeare-in-elasticsearch-part-3-sending-the-lines-to-kinesis/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:50 GMT</pubDate>
    </item>
    <item>
      <title>Accessing AWS Secrets Manager from .NET Lambda Functions, Part 2 - Using Async Code | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2022/05/accessing-aws-secrets-manager-from-net-lambda-functions-part-2-using-async-code/</link>
      <description>In an earlier post I showed how to use a .NET 6 Lambda function to retrieve a secret from Secrets Manager synchronously, but it is also easy to do this  asynchronously.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2022/05/accessing-aws-secrets-manager-from-net-lambda-functions-part-2-using-async-code/</guid>
      <pubDate>Sat, 29 Apr 2023 16:06:50 GMT</pubDate>
    </item>
  </channel>
</rss>