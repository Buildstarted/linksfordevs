<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>taking the deepest possible breath</title>
      <link>https://cohost.org/cathoderaydude/post/1228730-taking-the-deepest-p</link>
      <description>alright let&amp;#39;s fucking go

I wrote about Phoenix Hyperspace a few days ago. I have finally obtained one of the very, very, very few machines that shipped with it, and it turns out the way it works is even more batshit nuts than I&amp;#39;d read.

I promise, you do want to read this whole post.

----------------------------------------

[https://gekk.info/articles/images/hyperspace/hs-samsung.jpg]

The machine is a terrible little netbook, a Samsung N210. 1024x600 screen, Atom processor. The best thing I can say about it is that the battery still lasts several hours, and honestly I suspect it would be &amp;quot;sorta usable&amp;quot; if I put 2GB of RAM in it (it has 1, and I bet that&amp;#39;s how it shipped.) It will never play an HD video.

It came with Windows 7 Starter, typical for the time (late 2009) and...

[https://gekk.info/articles/images/hyperspace/hs-sticker.jpg]

...Phoenix Hyperspace &amp;quot;Instant-On.&amp;quot; The latter, I think, was Samsung&amp;#39;s specific branding.

Finding this machine was crucial. Even if I could find a retail copy of Hyperspace - assuming discs were ever actually pressed, given how short-lived the product was - it was a subscription based SaaS with phone-home DRM, so I never would have gotten it working. I finally found a copy of the trial version a week ago, and it&amp;#39;s an online installer; so this is otherwise lost forever.

The version included by OEMs, however, carries an infinite license as one would expect. As far as I can tell, nobody shipped this except Samsung, in four machines, the N210, N220, and two others I forgot. I found this N210 on ebay for like $40.

Naturally, it was full of viruses.

[https://gekk.info/articles/images/hyperspace/hs-virus1.jpg] [https://gekk.info/articles/images/hyperspace/hs-virus2.jpg] [https://gekk.info/articles/images/hyperspace/hs-virus3.jpg]

Computer over? Virus = very yes? That&amp;#39;s not a very good prize.

I am absolutely unsurprised that the previous owner was the kind of person to click on Registry Cleaner links and the kind of person who was selling a Mooney. But anyway - I ran the Samsung recovery wizard, it wiped the OS and replaced it with an unvirused one, and the machine seems fine now. Crucially, I was able to run the Hyperspace installer, and it installed.

So, if you didn&amp;#39;t read my previous post: The purpose of Phoenix Hyperspace is to be a very lightweight dual-boot-oriented version of Linux that can launch very quickly (hence &amp;quot;Instant-On&amp;quot;.) It&amp;#39;s meant to save on battery power so you can hypermile your little Atom netbook when you aren&amp;#39;t doing anything heavy enough that you need to be in Windows.

This was a brief rage in the software vendor world of the late 2000s - really, though, what I mean by that is &amp;quot;2009,&amp;quot; because as far as I can tell that&amp;#39;s when this started and ended. My feeling is that 2009, specifically, was a &amp;quot;bridge&amp;quot; period, where the low end market had really heavily begun switching to Windows Vista/7, but RAM was choked by price and 4200rpm spinning disks or eMMC were still nearly universal, so there was a perception of cheap PCs being extremely slow. Within a couple years, plummeting prices on better hardware and increased efficiency in Windows would make this much less of a problem, so the market for a &amp;quot;fast alternative operating system&amp;quot; could only really live for a very brief period. From my perception, it feels like it was over in six months.

In that time period, at least three vendors got into it: A company called DeviceVM shipped a thing called Splashtop (they&amp;#39;re still around, but under that name now) which Asus shipped on some machines, another company I forget the name of made a modified version of MontaVista Linux that Dell shipped on three machines as &amp;quot;Latitude-ON&amp;quot;, and then Phoenix (yes, the BIOS company) made Hyperspace. I own all three; Hyperspace is much better than the others, though I wouldn&amp;#39;t call it good.

[https://gekk.info/articles/images/hyperspace/hs-desktop.jpg]

Hyperspace is not meant to be &amp;quot;Linux&amp;quot; per se. It&amp;#39;s a kiosk-style environment, so when it boots, you&amp;#39;re put straight into a fixed-function user interface. It boots to a configurable, widget-based &amp;quot;portal&amp;quot; type of thing, and while the idea that anyone ever wanted an &amp;quot;instant view of many things&amp;quot; like this is suspect to me, it&amp;#39;s honestly not a bad specimen, if I&amp;#39;m honest. In fact, some of it even still works.

[https://gekk.info/articles/images/hyperspace/hs-news.jpg]

Those are current headlines being pulled from the BBC! I guess they haven&amp;#39;t changed their API in 14 years.

Anyway, this is very static. It&amp;#39;s a tile-based interface, to which you can remove or add widgets, but that&amp;#39;s it. You can expand the sections on the left to see more recent apps or bookmarks or the complete app list, but you&amp;#39;re not looking at a windowing system here - all of this is just a webpage in a fullscreened browser.

To do anything more than look at this screen, you have to launch an App.

[https://gekk.info/articles/images/hyperspace/hs-apps.jpg]

There&amp;#39;s a browser (Firefox,) Skype, and a few gnu tools like galculator and freecell. Shockingly, there is no media player at all, and almost all the other &amp;quot;apps&amp;quot; here are just links to websites, except for - surprisingly - a complete office suite.

[https://gekk.info/articles/images/hyperspace/hs-word.jpg]

It has competent clones of Word, Excel [https://gekk.info/articles/images/hyperspace/hs-calc.jpg] and Powerpoint [https://gekk.info/articles/images/hyperspace/hs-ppoint.jpg]. This calls itself &amp;quot;Hyperspace Office&amp;quot;, though it&amp;#39;s just a rebranded version of a Korean Java suite that used to be called Thinkfree, made by Haansoft. It seems quite complete.

This is very limited. There is no desktop, no multitasking, you can&amp;#39;t even drag windows around. Everything launches in fullscreen. You certainly can&amp;#39;t install your own apps.

This is still actually not as bad as the alternatives on the market. The only actual desktop apps in Splashtop or Latitude-ON were a browser, email client, and Pidgin. Splashtop has a media player, but it&amp;#39;s a horribly slow and limited Adobe Flash app. It also has a photo album, but you can&amp;#39;t do anything with it other than look at pictures; useless. And while Splashtop seems to have a ton of other apps, they&amp;#39;re all just shortcuts to websites. It certainly has nothing like an office suite.

[https://gekk.info/articles/images/hyperspace/hs-browser.jpg]

Really though, even Hyperspace just expects you to spend your time in a browser. And hey, at least this version of Firefox has tabs enabled, unlike the others. Just like the others, though, it has a uselessly outdated version of TLS that can&amp;#39;t be updated, so it will never be possible to go to 95% of modern websites.

So far, nothing is all that astonishing. This is an incredibly barebones Linux running a very small collection of permanently-out-of-date apps. Well, probably, anyway. I&amp;#39;m actually pretty convinced that Hyperspace was fully capable of updating itself, had Phoenix continued providing it - we&amp;#39;ll address that more later.

To see what makes Hyperspace special, you&amp;#39;ll want to watch this video clip.

https://gekk.info/articles/images/hyperspace/hs-switch.mp4

Clicking an icon in either Windows or Hyperspace swaps between them. I clocked it 6 seconds going one way, 12 seconds to go back.

Now how, exactly, are they doing that?


ENDLESS ENIGMAS

Up front: I can tell you that it&amp;#39;s not using virtualization. And not because &amp;quot;nobody would do that&amp;quot;, because I know for a fact that Hyperspace would do that. It did, just not in this version. There were several SKUs, you see:

 * Hyperspace Dual: Just a lightweight Linux meant for dual-booting.

 * Hyperspace Dual Resume: The one I have here

 * Hyperspace Hybrid: Similar to the above, except that when you install it, it sticks a copy of Xen hypervisor in your boot order, then virtualizes both OSes.

I shit you not, it&amp;#39;s a consumer hypervisor. When you switch from Windows to Hyperspace, it just pauses the Windows VM and resumes the other one. That would suck now, and it sucked worse in 2009, when there was no PCIe passthrough and no VM hardware acceleration tricks. It replaces your graphics driver in Windows with a fucking miniport, for christ&amp;#39;s sake. I guess, on a netbook, which was never a graphics powerhouse (good luck even playing HD video) this was maybe not the end of the world. It is incredibly rude, however.

That&amp;#39;s what I thought I was getting here, and while I was a bit disappointed when I initially learned that it wasn&amp;#39;t the Hybrid variant, I soon realized that I had actually gotten the far, far, far weirder outcome.

Dual and Hybrid are both straightforward ideas. A hypervisor is clumsy and overkill, but not really that strange a solution. The other one is just a normal Linux with a shortcut in Windows that reboots and selects the other partition, like we had in 1997. Yawn.

It didn&amp;#39;t take me long, however, to figure out that Dual Resume was clearly up to some wretched tricks, and as I looked into it it just got stranger and stranger.

First off, I had a very hard time actually figuring out where the files were. Hyperspace isn&amp;#39;t burned into the firmware or anything, it&amp;#39;s just a program you install. In theory, you could buy it retail and use it on any &amp;quot;supported&amp;quot; (?) machine. So the actual guts of the OS have to be somewhere, but I looked and looked and couldn&amp;#39;t find them.

I dug through the install folder and found nothing more than a few &amp;quot;psa&amp;quot; files. They opened in 7zip, but there was very little inside of them; scraps of Linux detritus, but no root FS, and nothing of substance. Curiously, they were VERY large compared to their contents. Hmm.

And despite spending ten minutes installing the OS, I couldn&amp;#39;t figure out where all that was going. Both Windows [https://gekk.info/articles/images/hyperspace/hs-diskman.jpg] and Linux [https://gekk.info/articles/images/hyperspace/hs-fdisk.jpg] agreed that there were some odd things going on. fdisk showed overlapping partitions, and Windows showed a 4.36GB partition with no recognizable FS.

Obviously the first guess is that the 4GB partition is simply linux ext3/4. And that&amp;#39;s true - but it contains nothing more than a copy of grub and a few drivers. There&amp;#39;s no root FS to be found, even when I mount the partition under a full-fat Linux distro. Digging through the grub files revealed nothing salient, just a mysterious call to &amp;quot;psaloader&amp;quot; [https://gekk.info/articles/images/hyperspace/hs-grub.jpg] with no info about exactly what that was loading or how.

Next question: If it&amp;#39;s not virtualizing, how is it switching OSes this fast?

What if it&amp;#39;s not virtualizing the host OS, only the guest? Well, no point in that - if Windows had to keep running, you wouldn&amp;#39;t save any battery power. So that&amp;#39;s out, and... what other explanation is there? I couldn&amp;#39;t think of anything.

And then, there&amp;#39;s this:

[https://gekk.info/articles/images/hyperspace/hs-saving.jpg]

That&amp;#39;s Hyperspace Write saving a file... into my Windows partition.

While Hyperspace is fairly fixed-function, it&amp;#39;s surprisingly not a read-only environment. The other fast-start Linuces were: Splashtop and MontaVista didn&amp;#39;t let you save anything at all other than your mail account info. Hyperspace, however, seems to have a complete filesystem. But it&amp;#39;s... weird.

The &amp;quot;My Documents&amp;quot; folder you see there is misleading; it&amp;#39;s not my Windows documents folder, it&amp;#39;s a data partition inside the Hyperspace environment. If I save stuff here, it&amp;#39;ll still be there after a reboot, but I can&amp;#39;t see it from Windows.

&amp;quot;My Documents&amp;quot; is also the &amp;quot;root&amp;quot; of the filesystem, as far as Hyperspace is willing to admit: All the included apps refuse to go any higher than this, as if it was /.

Furthermore, if I select the C or D drive entries, that DOES open my normal Windows drives. The other folders - Documents, Pictures, etc. - really are in my Windows user folder as well. So I can retrieve files I saved while running Windows... or save stuff straight into My Documents in Windows itself.

Fucking... Qu&amp;#233;?

Anyone who Computers Pretty Good can tell you that there is no holy way to do this. No priest would bless whatever is going on here. This is bad and wrong, and someone should have stilled the sinful hands of Phoenix&amp;#39;s devs.

So I knew, at this point, that Phoenix had invented multiple novel technologies in pursuit of an incredibly stupid product that nobody wanted, but I was not yet quite aware of how bad it was going to get.


DESCENT

I had three burning questions and not the slightest answer to any of them:

 * How is it swapping OSes?

 * Where is Hyperspace stored?

 * How do the two OSes communicate?

All of this was baffling, but the OS swap took top billing. I could not think of any possible way to do that without virtualization. If it was just launching Hyperspace inside a fullscreen VM, that would be... stupid and pointless, but explainable within my worldview.

I began by testing whether Windows was, in fact, being shut down. Answer: yes, it is. I wrote a simple loop in Powershell [https://gekk.info/articles/images/hyperspace/hs-ps.jpg] that records the time, then went to Hyperspace for 20 minutes, and came back to find a 20 minute gap. This ruled out the only explanation I could think of.

I noticed, however, that when I selected the Switch To Hyperspace icon, the screen faded out. I remembered that in Win 7, that&amp;#39;s a default behavior when you shut down. So I checked the event log.

[https://gekk.info/articles/images/hyperspace/hs-sleep1.jpg]

&amp;gt; The system is entering sleep.

Oh no.

I had been sort of expecting this outcome. If virtualization was off the table, then the only other thing I could see was &amp;quot;some kind of ACPI horseshit.&amp;quot; It&amp;#39;s the only part of the PC architecture left, really, that is capable of what one might call &amp;quot;nonlinear behavior.&amp;quot;

But still... what the fuck? What do I do with this data? &amp;quot;When I switch OSes, Windows thinks it&amp;#39;s going into standby.&amp;quot; What... what? What?? Where the fuck do I go from there?

I spent several hours last night beating my head against this problem. I had taken several different runs at slurping stuff out of the install files and had come up with a few more bits and pieces, including a folder full of various Mystery EXEs called shit like &amp;quot;fwimport&amp;quot; and &amp;quot;ptbackup,&amp;quot; and DLLs that mostly looked like they were drivers for the Hybrid variant.

Ultimately, I had to give up on the idea for a bit. I moved on to question #2: Where the hell are the files?

I know a few different ways to &amp;quot;hide&amp;quot; disk partitions, but this was Flummoxing me. The entire disk was allocated, so I couldn&amp;#39;t figure out where another partition might be hiding. I figured the 4GB partition had to be the secret, but there wasn&amp;#39;t anything in it.

Besides that, I attached some instruments to the installer and run it again to find out what files it was touching, and to my surprise, I discovered a sequence in which it runs &amp;quot;fwmount.exe&amp;quot;, then suddenly starts accessing files on the F: drive.

I had no F: drive. And it was busy doing this for quite some time, so I had the opportunity to go to Explorer; no F! I opened Disk Management; no F! What!


A NEW DAY DAWNS OVER THE VALLEY OF MADNESS

I began to poke holes in the mystery when I decided to follow up on a lead that had been bugging me for some time.

All over the place, I was seeing references to &amp;quot;PSA.&amp;quot; Hyperspace seemed to install from &amp;quot;.psa&amp;quot; files, and there were references to PSAs buried all over batch files and inside the string tables of the various EXEs. These seemed very important, so I started trying to figure out what they were.

At the same time, a friend I was discussing this with proposed that the inability to find Hyperspace&amp;#39;s files could be an HPA situation. HPA is a kind of very-hidden partition, most well known for use on older Thinkpads, and it is in fact derived from... a Phoenix technology.

In fairly short order, we had determined that there was a connection. The &amp;quot;fw*&amp;quot; tools included with Hyperspace had the same names as tools that came on the Thinkpad HPA partitions. It turns out that &amp;quot;FW&amp;quot; is short for Phoenix FirstWare, a product they&amp;#39;d been selling since at least 2005, specifically for creating pre-boot recovery environments that can&amp;#39;t be hurt by viruses, because they use partitions that the OS can&amp;#39;t discover.

They accomplish this with beer.

[https://gekk.info/articles/images/hyperspace/hs-beer.jpg]

More accurately, BEER and PARTIES, [https://www.thinkwiki.org/wiki/Hidden_Protected_Area] asinine backronyms for a technique that (inferring heavily) amounts to writing a secret, funnier MBR to the end of the disk. (That&amp;#39;s probably why there&amp;#39;s a mysterious 25MB gap at the end of the partition table per Windows, to leave room.)

I believe what makes BEER partitions valuable is that, while they are technically just &amp;quot;bytes on the disk,&amp;quot; good luck getting anything short of a kernel driver (or root access under *nix) to read, let alone write to areas of a disk that aren&amp;#39;t mentioned in the MBR. Under Windows, it&amp;#39;s probably nearly impossible.

But once I understood what all this was doing, I was able to make some progress. Sure enough, &amp;quot;fwdir&amp;quot; revealed a bunch of secret partitions:

[https://gekk.info/articles/images/hyperspace/hs-beertable.jpg]

Five extra partitions that don&amp;#39;t show up in any OS. I was also able to use &amp;quot;fwmount id=1&amp;quot;, which said it mounted something to F: - but nothing would read it.

Like before, Windows would not acknowledge that anything was mounted at F:. It even let me remount a normal partition there, with no complaints. If I tried to change to F: from the command prompt, it said no such drive existed. But if I tried to &amp;quot;DIR F:&amp;quot;, it said the filesystem wasn&amp;#39;t readable. Aha!

Apparently it mounted the disk into some kind of langolier purgatory that only existed inside this cmd session. So, on a whim, I grabbed a copy of dd for win32 and did &amp;quot;dd if=\\.\F: of=e:\dump.img&amp;quot;, and it got something!

Specifically: the same fucking partition with nothing in it other than grub.

That&amp;#39;s exactly what I got when I tried dding partition 6 normally from linux, so this whole exercise was pointless. Thus, I got a bigger gun: I went back, did a normal dd of the whole partition, then shoved it into UFS Explorer and told it to carve out any lost filesystems.

[https://gekk.info/articles/images/hyperspace/hs-ufs.jpg]

Would you look at that! Filesystems!

It turns out that FirstWare / HPA doesn&amp;#39;t really obscure the contents of the partitions in any way. All it is is a weird MBR. If you can suss out the partition boundaries from the raw bytes on the disk, they still have normal file tables and can be treated as regular drives.

So at this point, convinced that there was nothing unusual about the data format, I put my nose to the grindstone and taught myself how to find an ext3/ext4 signature in a hex editor.* I found a whole bunch of Magic Numbers, then loaded up a linux livedisk and tried mounting a loopback device at each offset, until I hit paydirt.

* The trick is to look for &amp;quot;53 EF 01&amp;quot;. Technically the magic number is just 53 EF but that&amp;#39;s not unique enough, you&amp;#39;ll find it everywhere. I found that 53 EF 01 was very likely to be an actual partition header, as long as I didn&amp;#39;t see a bunch of junk around it; the beginning of a partition will be fairly sparse and un-noisy, so if you see solid gibberish, you&amp;#39;re probably inside a file.

Once you think you have the right location, get the offset of the &amp;quot;53&amp;quot; byte in decimal; subtract 1080 from it; then do mount -o offset=4344684544 /dev/source_drive /mnt/mount_point. if it works, you&amp;#39;re done.

[https://gekk.info/articles/images/hyperspace/hs-mounted.jpg]

I now had read-write access to the filesystem, which I proceeded to jailbreak. But we&amp;#39;ll come back to that.


WRONGS DARKER THAN DEATH OR NIGHT

First, what was the answer to the OS swap question? Well, I had my suspicions as soon as I saw the event log entry, but in the process of running down the hidden partition, I started searching for &amp;quot;phoenix PSA&amp;quot;, and came up with... the patent for Hyperspace! [https://patents.google.com/patent/US20100241839] It&amp;#39;s terrifying.

[https://gekk.info/articles/images/hyperspace/hs-patent.jpg]

In a nutshell - and assuming I have interpreted it correctly - Hyperspace works by performing a fucking David Copperfield Statue of Liberty trick on the ACPI subsystem.

Normally, putting a computer to sleep is sorta like this:

 * You tell the OS to go to sleep

 * It runs a bunch of housekeeping stuff to make sure hardware is quiesced

 * The OS tells the BIOS, via ACPI, &amp;quot;okay, i&amp;#39;m tucked in, let&amp;#39;s go to S3 state.&amp;quot;

 * The BIOS saves a bunch of important information about what the CPU was doing

 * The BIOS shuts down the CPU

When you return from sleep, it&amp;#39;s basically the reverse:

 * The CPU turns on

 * The BIOS uses the saved data to restore the state of the CPU

 * When the BIOS is done turning on hardware, it lets the OS resume from where it left off

None of this has anything to do with virtualization or changing OSes. The entire point is that the process is supposed to be nearly transparent, as if it never happened. The OS is allowed to cooperate, to make it go smoothly, but this is only supposed to help you decrease power utilization gracefully.

Hyperspace perverts this mechanism.

When you install it, your bootloader is replaced with a copy of grub, the common FOSS bootloader. As far as I can tell, this serves two purposes:

 1. It lets you choose either Hyperspace or Windows on startup, or it reads a flag, set from within either OS, that tells it to choose one of those without asking

 2. It injects some stuff into the BIOS memory area, then continues booting normally.

That Stuff is called the OSM, or &amp;quot;OS Steering Module.&amp;quot; It&amp;#39;s... actually also grub, apparently, just heavily modified.

It doesn&amp;#39;t do much while the machine is running. It&amp;#39;s just sitting in memory, inert. But when you try to go to sleep... shit gets interesting.

The patent puts the correct amount of mustard on this:

&amp;gt; At this point the behavior of OSM diverges greatly from the similar (up to now) action involved in entering ACPI State S3.

&amp;gt; For, having taken many of the same actions that precede entering ACPI State S3, the OSM proceeds instead to create and save a further restorable hardware context and set of wake vectors and in preparation for loading a second OS as described below.

Enormous props to the patent author for using those intensely load-bearing phrases to describe this whole rugpull of a process. The bold text is important because this thing is not doing what it is supposed to be doing. Oh no. Not by a long shot.

It&amp;#39;s like this: Windows gets itself all ready for sleep, tucks itself in, then tells the BIOS &amp;quot;too eepy! time for bed, S3~&amp;quot; but instead of the S3 reaching the BIOS, OSM intercepts that call. The OS has halted itself, and is waiting to be told that it&amp;#39;s time to wake up, but OSM instead proceeds to alter the universe around it.

See, the other disgusting thing that OSM did when the machine was first booted was to go into the e820 table, where the BIOS defines what memory is available to the system, and declare ~512MB of it as nonexistent (or &amp;quot;Address Range Reserved.&amp;quot;) That means that when Windows begins booting, if the machine has 2GB of memory, it only sees 1.5GB, as if the other 512 wasn&amp;#39;t even installed.

When OSM does its swaparoo, it alters that table. It unmarks the 512MB area as reserved, then reserves all the other memory that Windows was using, before adjusting the &amp;quot;wake vectors.&amp;quot; Those are saved values that tell the CPU where to pick up when it comes back from sleep, and normally they&amp;#39;d point to a spot inside the Windows kernel - within it&amp;#39;s 1.5GB of RAM. Instead, they now point to... the mysterious 512MB area.

If Hyperspace had been launched at boot, and then the user switched to Windows, then the 512MB area will contain a copy of it. Because when OSM initially booted Hyperspace, it prepped the e820 tables the other way around, so Hyperspace could see that 512MB area and nothing else. It therefore booted into just that section of memory, unaware of the 1.5GB that Windows had, and when the user switched to Windows, it did this exact same process in reverse.

(If Hyperspace isn&amp;#39;t booted, of course, then OSM instead loads it from the hidden partition, hence the psaloader command, a custom grub driver that understands how to read BEER disks.)

Once both OSes have been booted, then Hyperspace will be in its 512MB closet, and Windows will be running in the remaining 1.5GB, and any time that either OS tries to go to S3 state, the OSM will move all the memory pointers around, then reverse the sleep process, causing the machine to instantly &amp;quot;wake&amp;quot; - from a sleep it never actually entered. Windows thinks it&amp;#39;s taking a nap, but it wakes up as someone else, leaves the house, and commits murders it has no memory of.

In other words: Phoenix figured out how to turn the BIOS into a hypervisor. It&amp;#39;s almost, almost beautiful, if it wasn&amp;#39;t both incredibly fragile and completely uncalled-for. But christ. Christ almighty, what a hack. One could come to tears over it.


OH, COME ON, FUCK YOU

So then, what about that last bit: moving files between the OSes.

Okay, in a laboratory setting, this isn&amp;#39;t that cursed an idea. If two processes modify the same file, for instance, it can work fine as long as they don&amp;#39;t

A) Write to the same section of the file at the same time. If one writes, and then the other does, that can be okay, but if both are doing it, then data from both processes will get interleaved, so neither process gets a clean write.

B) Assume they know what is in the file without checking. If a process writes to a file, then does so again while assuming it has not been modified by anything else, then it could end up corrupting the file by not being aware of new data boundaries.

It is possible for software that is old, simplistic, or designed carefully to get away with this. You absolutely cannot do it with random software from many developers, running under different OSes.

Now, hang on - this almost seems moot. Windows thinks it&amp;#39;s asleep, so all file writes are suspended, right? Indeed, per another patent [https://patents.google.com/patent/US8195929B2/en] regarding Hyperspace, it adds a driver to Windows that is used to force all cached writes to be committed to disk when an OS swap is initiated. So is there really a problem?

Well, you can read the patent to get the whole story - I frankly don&amp;#39;t fully understand it, but I think the problem is that, while disk caches have been flushed, and Windows isn&amp;#39;t actively writing anything, there can still be apps that are in the middle of modifying a file. Consider a database editor: you put Windows to sleep, then wake it up. The editor still has the file open, and probably has a copy of it in memory that it assumes matches what&amp;#39;s on disk. If that file was modified while the system was asleep... oof.

I don&amp;#39;t quite get how that&amp;#39;s solved by this, though. Initially I had assumed that this was high-power tomfoolery, something like... &amp;quot;Hyperspace&amp;#39;s storage is inside an image file, and when you switch to Windows the helper app reads that file and copies any new contents into your real filesystem.&amp;quot; And the reality is... sort of like that... but much... worse...

When you launch Hyperspace, it just straight up mounts all your disks with NTFS-3G. They&amp;#39;re not read-only, but they also... aren&amp;#39;t read-write. As I understand it, any writes to your Windows disks are virtual. The app thinks the writes happened, the files look updated, but the bytes have not been changed on the disk.

Instead, your changes are written to a journal file. When you return to Windows, that journal file is read via a UnionFS filter which merges one of the hidden PSA partitions into the Hyperspace utilities folder, or some shit like that. As Windows is coming out of standby, a driver installed by Phoenix reads that journal file, then replays all the changes made while you were in Hyperspace.

I don&amp;#39;t get this. It doesn&amp;#39;t solve the fundamental problem of two programs accessing the same file. Just because you delayed the write until the main OS was running again doesn&amp;#39;t seem to solve anything.

It&amp;#39;s also really dangerous! Like I said, there is NO WAY to do this &amp;quot;correctly.&amp;quot; This is a monstrous act. In fact, in 2009, accessing NTFS read-write from within Linux was often just straight-up Considered Harmful. It took a long time for the NTFS modules to mature, and I think at the time if you&amp;#39;d told anyone you were doing this they might have slugged you.

The whole thing is just a house of cards. It&amp;#39;s all so fragile. I&amp;#39;m pretty certain that Hyperspace refuses to install on anything other than specific builds of XP, Vista and 7, and I wouldn&amp;#39;t blame it. Changes to NTFS, or the specific order of operations in the standby/resume process, or any of a thousand other things could result in massive data loss. All for very little - was this truly necessary? I mean, yes, I&amp;#39;m all for moonshots in service of usability, but... could this really have been worth the risk, versus just offering the user a small shared partition for data exchange, or telling them to just use the SD card reader?


JAILBREAK BY THIN LIZZY

A lot of effort was put into Hyperspace - just like Splashtop and Latitude-ON - to jail the user. You can only launch the bundled apps. They cannot access the direct Linux filesystem. Hyperspace is more willing to let you access the quiesced Windows filesystem than its own, and that makes sense. While it is, after all, just an ordinary partition, the whole goddamn thing looks very fragile. I imagine it would be trivial for a user to break Hyperspace, very likely causing massive data loss when something scribbles onto the mounted NTFS disks.

I put in several hours of effort to find an exploit with no success. There is no terminal emulator, of course, the VTY keyboard shortcut is disabled, and they&amp;#39;ve locked down all the GUI apps. The file pickers will not show you anything outside of the My Documents funhouse. You can open Nautilus, but any attempt to execute a binary from a mounted USB drive results in nothing happening. You can reach Open With, but attempts to refer to /usr/bin/whatever also result in nothing happening. I imagine they modified the apps and added a bunch of &amp;quot;return false&amp;quot; crowbars to achieve this.

I did try looking for open telnet/ssh ports, and in fact, nmap turned up something fascinating: an open port 6000. Seriously, it doesn&amp;#39;t just look that way, it&amp;#39;s genuinely wide open - I launched an X client on another machine and watched the server on the netbook actually respond to it. xhost didn&amp;#39;t allow it in, but the fact that the socket is actually open means you absolutely could have found network level exploits to pwn these things back in 2009, no question.

I am not &amp;quot;a hacker&amp;quot;, however, so I didn&amp;#39;t run that down. Instead, I just used my newfound ability to mount the partitions - read-write with no harm, as it turned out - to modify the startup scripts.

I don&amp;#39;t think this system actually has the vty mechanism installed, so trying to prevent X from starting would probably just brick it, and normally as soon as X starts, it launches the launcher which takes over the whole desktop. Interrupting that leaves you at a blank, useless wallpaper. But there did appear to be a lot of normal utilities on here, just unreachable due to the limited UI.

One that was missing, comically, was xterm. I&amp;#39;m guessing that was specifically intended to mitigate local exploits, because I did find a commented out reference to it in the X startup script.

I poked around in the filesystem for a bit until I found a yum repo, then dug into that, trying to ID the distro they&amp;#39;d forked to produce Hyperspace. This wasn&amp;#39;t that easy because, as it turns out, Phoenix actually ran their own repos! They&amp;#39;re long gone now, but they actually had an infrastructure set up for updates, meaning that if they&amp;#39;d stuck around, this system wouldn&amp;#39;t necessarily have experienced the fate of so many &amp;quot;appliance&amp;quot; Linuces: leashed to a kernel that was old when it was released, full of unpatched exploits, and becoming useless as its SSL root certs expire.

I did find a couple references to Fedora in there however, so I looked up the version of Firefox included - 3.5.1 - and matched that up with Fedora 11. I downloaded an rpm of xterm, copied it over to /usr/bin/, adjusted the Xinitrc script, and:

[https://gekk.info/articles/images/hyperspace/hs-shell.jpg]

Obviously, it is no great feat to get a shell on a linux that you have raw disk access to. But, for me, this was quite an accomplishment, given that I had to learn

 * how an abandoned, long-forgotten data obfuscation technology worked

 * how to locate EXT partitions without a file table

 * how to safely mount them read/write

...in maybe six hours. It&amp;#39;s New To Me.

Having gotten this far, of course, the OS rapidly devolved into Linux and became uninteresting, except insofar as I learned some things about exactly how they&amp;#39;d jailed it.

It turns out that the UI isn&amp;#39;t as custom as you might think. The UI is largely GNOME based, and the machine has a nearly complete complement of GNOME desktop components, although I couldn&amp;#39;t get gnome-session to put anything on the screen. It actually has a normal window manager, which I had noticed early on in the process, both because I found &amp;quot;compiz&amp;quot; in the strings in one of the files, and also because when you open programs, they tend to &amp;quot;fold&amp;quot; into view.

That&amp;#39;s right: Hyperspace put a compositing window manager with effects enabled on an Atom netbook that probably got a Windows Experience Score of 1.2. I can&amp;#39;t swear it won&amp;#39;t run Aero, but they didn&amp;#39;t even try, and that was probably the right call.

The only reason that the UI doesn&amp;#39;t seem to have normal windows is because they used a FOSS tool called devilspie (??) which seems to be made for exactly this kind of purpose. You write scripts that tell it how to treat each window on the screen, based on its name (with partial matching!) or class, and you can have it force a window to be fullscreen, to be undraggable, to always be a fixed size, to always be centered on the screen, etc.

[https://gekk.info/articles/images/hyperspace/hs-galc.jpg]

The calculator app, for instance, is a normal galculator, but forced to be centered and undraggable. It&amp;#39;s... unsettling. You can tell that the window border is normal chrome, you just can&amp;#39;t interact with it.

Once you interrupt the launch process though, such as by starting xterm instead, all that goes away.

[https://gekk.info/articles/images/hyperspace/hs-compiz.jpg]

Compiz actually runs quite smoothly! The screen res is only 1024x600, so that&amp;#39;s not all that much of an achievement, and it&amp;#39;s certainly very cramped, but I&amp;#39;m fairly impressed tbh.

[https://gekk.info/articles/images/hyperspace/hs-mounts.jpg]

At this point there&amp;#39;s kinda nothing else to tell. It&amp;#39;s Linux, just like every other Linux. The only other thing you might find interesting is the mount table, because... holy shit, what a mess. Phew.


IN CONCLUSION, WHAT THE HELL

The most astonishing thing about Phoenix Hyperspace is... that they made it. That they bothered. I hate to be a debbie downer, but what were they thinking?

Even in 2009, it had to have been obvious that computers were about to overcome their speed issues. For christ&amp;#39;s sake, Android was around, and it sucked but it demonstrated that you could suck much better performance out of a truly miserable piece of hardware. Windows just needed to get more efficient, and RAM prices needed to come down a bit, and SSDs needed to be come more affordable - and all those things happened! really fast!

It&amp;#39;s not surprising that nobody cared about any of these technologies by the beginning of 2010. What&amp;#39;s surprising is that at least five companies all talked themselves into believing that this was going to put them on top, somehow.

The wildest thing about all of this is that it doesn&amp;#39;t work. Hyperspace isn&amp;#39;t &amp;quot;instant-on,&amp;quot; it&amp;#39;s maybe a few seconds faster than Windows 7 to boot, and almost certainly the cost of developing and adding it far outweighs the 1GB of additional RAM, which probably would have made Windows much spritelier even on these pallid Atoms.

Even when Splashtop came out, the reviews pointed out immediately that it just... didn&amp;#39;t boot faster. It&amp;#39;s not faster! The whole thing is pointless! I own four netbooks with variations on this software, at this point, and none of them boot faster in Linux mode. One of them has an entire ARM-based alternate motherboard inside, an incredible amount of R&amp;amp;D and ingenuity to throw at this problem, and... it&amp;#39;s not faster! It&amp;#39;s just as slow! And it sucks so bad, SO much worse than Hyperspace, which is already not a great experience.

I am absolutely dumbfounded as to how any of this happened. It defies logic. I can&amp;#39;t comprehend who thought any of this was a good idea. It&amp;#39;s amazing that it happened, incredible to look at, but ultimately useless, and I wish the people who worked on this had been allowed to do something more productive and fulfilling.</description>
      <author> (https://cohost.org/cathoderaydude)</author>
      <guid>https://cohost.org/cathoderaydude/post/1228730-taking-the-deepest-p</guid>
      <pubDate>Sun, 26 Mar 2023 22:02:55 GMT</pubDate>
    </item>
    <item>
      <title>2 Years Of Lessons From Running My Own Bookstore - RyanHoliday.net</title>
      <link>https://ryanholiday.net/2-years-of-lessons-from-running-my-own-bookstore/</link>
      <description>It is only from doing hard things, the Stoics said, that we learn what we’re capable of. A little over three years ago, my wife and I had the craziest idea we’ve ever had in our lives: to open a bookstore in Bastrop, Texas. Opening a small business is always hard. But opening a small business during a pandemic in a small town in rural Texas? To call it a challenge would be an understatement. We’ve learned a lot…about business, about books, and about what we’re capable of. Last year, I wrote a piece on the lessons we’d learned in our first year of business at The Painted Porch. Now, another year has passed and we have learned a few more…and re-learned some of the ones we thought we’d gotten the first time. I share them here so you can perhaps learn a little from my experiences and hopefully go create something cool of your own out of it. [1] Anything can be a good business if you treat it like a business. Too many indie bookstores are started because people think they’ll be fun…or because they love books. No, you have to be serious. I learned this as a writer: treat it like a job. [2] The bookstore of course is not just a bookstore. It is my office. It is my employee’s office. It is where I record podcasts and film YouTube videos. I rent part of the building to another business (a really cool record store called Astro Records). When you are thinking about taking a big risk, look for little ways to take some risk off the table. Find multiple uses, multiple options so that if one fails, you can still succeed. [3] On the Daily Stoic podcast, Matthew McConaughey gave me a better framework for making big decisions. He told me he’s known in Hollywood as a Quick No, Long Yes. His No’s are quick. But before he says Yes to something, “I give myself about 2 weeks in each frame of mind—Yes I’m in, No I’m out—and then I measure what keeps me up at night.” [4] Keep your eye on the prize. What is success to you? What metrics actually matter to you? Remembering why you did something and how you measure success helps you calibrate your decisions properly. I’m happy enough to be putting books out in the world, making this community better, having a physical space, challenging myself, etc…as long as I don’t lose lots of money, that’s a win. [5] Forget the politics. It’s been interesting to watch people in our small town care a lot about what other people in the small town think. Except this small town isn’t big enough to support a bookstore. When you’re starting out doing things, you get strong opinions from people in your local scene etc. But that’s not who you should be trying to impress, or who matters in the long run. Look outward, onwards. Don’t be stuck thinking small, don’t let the scene you chanced into constrain you. [6] Don’t be afraid to be political though. We delayed opening during the worst days of COVID. We kept up safety protocols even after the state of Texas washed its hands of its responsibilities last year. We did it even though people got mad at us for it, even though it probably cost us business. My conscience is clean and that’s what counts. Keeping your community and your staff safe is good for business in the long run anyway. [7] Beware of mission creep. Our original plan was that we’d have only a couple hundred books, only my absolute favorite books, only the books I put in my Reading List Email. It would only be those books. But the problem is, I’m always reading and discovering new favorite books. So the temptation to add and add and add is always there. In the military, they call this mission creep. It’s hard to predict exactly how things are going to unfold, so there tends to be a gradual broadening of objectives as a mission or battle progresses. If you are setting out on a project, just something to be aware of. [8] For everything you add, take something away. There’s a great story of Mark Parker who, just after he became CEO of Nike, called Steve Jobs for advice. “Just one thing,” Jobs said. “Nike makes some of the best products in the world. Products that you lust after. But you also make a lot of crap. Just get rid of the crappy stuff and focus on the good stuff.” “He was absolutely right,” Parker said. “We had to edit.” Because we’ve always done it this way, is not a good reason. Or in our case, because we’ve always carried this book or because it sold well in the past, is not a good reason. We have to edit. [9] Whenever I am at the store, people are excited to see me and ask a bunch of questions. Whenever my wife is there people ask her, “Where are your kids?” No one has EVER asked me that. It’s just a reminder that entrepreneurship is easier for some than others and the whole idea of just pulling yourselves up by your bootstraps is nonsense. Be aware of your advantages and privileges. [10] Speaking of which…something that’s been hard to navigate is all the people who come to the bookstore to see me. On the one hand, it is awesome. But on the other hand, if I give everyone twenty minutes, my day is gone. This means I sometimes have to be rude…but if I am not, then I am rude to my writing, to my family, to myself. [11] If you’re successful, your people should be successful. Nothing feels better than distributing profits or raises to the team. If you don’t take pleasure in that, you’re doing it wrong, prioritizing the wrong things. [12] A few weeks ago, an employee made a bad call [...]</description>
      <author> (mattragland)</author>
      <guid>https://ryanholiday.net/2-years-of-lessons-from-running-my-own-bookstore/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:11 GMT</pubDate>
    </item>
    <item>
      <title>Techniques for Setting up Peripherals via PIO and DMA</title>
      <link>https://serhack.me/articles/techniques-setting-up-pheripherals-dma-pio/</link>
      <description>Learn about the hardware aspects for Programmed Input Output and Direct Memory Access.</description>
      <author> (SerHack)</author>
      <guid>https://serhack.me/articles/techniques-setting-up-pheripherals-dma-pio/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:11 GMT</pubDate>
    </item>
    <item>
      <title>Ideas have a 2 week shelf life</title>
      <link>https://stevecorona.com/ideas-have-a-2-week-shelf-life</link>
      <description>I have a new rule that I’m making for myself and holding others to. If you haven’t worked on something in the past two weeks, you’re not allowed to talk about it.</description>
      <author> (Stephen Corona)</author>
      <guid>https://stevecorona.com/ideas-have-a-2-week-shelf-life</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:11 GMT</pubDate>
    </item>
    <item>
      <title>How to be a technology charlatan</title>
      <link>https://scottlocklin.wordpress.com/2023/03/23/how-to-be-a-technology-charlatan/</link>
      <description>I’ve mentioned many times that I do not think technology is advancing in a serious way. By “a serious way” I mean something like what happened between 1820 and 1970. That kind of …</description>
      <author> ()</author>
      <guid>https://scottlocklin.wordpress.com/2023/03/23/how-to-be-a-technology-charlatan/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:10 GMT</pubDate>
    </item>
    <item>
      <title>the 2/3 rule for multi-factor authentication</title>
      <link>https://roman.computer/mfa/</link>
      <description>I propose the &amp;quot;2/3 rule&amp;quot; for multi-factor authentication: to access a system, a user must pass at least two out of three possible methods for authentication. Unlike standard 2-factor authentication, this strategy protects against both false positives (granting access to a hacker) and false negatives (denying access to a legitimate user).</description>
      <author> ()</author>
      <guid>https://roman.computer/mfa/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:10 GMT</pubDate>
    </item>
    <item>
      <title>LLMs and Declarative Software Development</title>
      <link>http://aumitleon.dev/llms-and-declaritive-software-development</link>
      <description>Leveraging LLMs and the naturalness of software to build software declaratively.</description>
      <author> (Aumit Leon)</author>
      <guid>http://aumitleon.dev/llms-and-declaritive-software-development</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:10 GMT</pubDate>
    </item>
    <item>
      <title>Sparks of Artificial General Intelligence (AGI) in GPT-4</title>
      <link>https://ibragimov.org/2023/03/24/sparks-of-agi.html</link>
      <description>Microsoft research recently published a paper where they review the original version of GPT-4, prior to all tuning, like removing bias, filtering, etc, that OpenAI did for the public version. In this article I will summarise the most interesting aspects and experiments why they think GPT-4 has sparks of AGI. And this time, I didn’t use ChatGPT to summarise it, as I enjoyed reading it myself :)</description>
      <author> ()</author>
      <guid>https://ibragimov.org/2023/03/24/sparks-of-agi.html</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:10 GMT</pubDate>
    </item>
    <item>
      <title>I won&amp;#39;t buy a YubiKey</title>
      <link>https://garrit.xyz/posts/2023-03-21-i-wont-buy-a-yubikey</link>
      <description>Generalist developer writing about fullstack development, system administration and free software.</description>
      <author> ()</author>
      <guid>https://garrit.xyz/posts/2023-03-21-i-wont-buy-a-yubikey</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:09 GMT</pubDate>
    </item>
    <item>
      <title>CSS-only Widgets Are Inaccessible</title>
      <link>https://adrianroselli.com/2023/03/css-only-widgets-are-inaccessible.html</link>
      <description>Usually. I originally titled this InacCSS-onlyible. I even made this typographically, er, distinct image. Then I realized it was silly and will instead use the neologism in a talk so I can hear the groans IRL. Interactive widgets powered with only CSS are relatively common as people are playing with…</description>
      <author> ()</author>
      <guid>https://adrianroselli.com/2023/03/css-only-widgets-are-inaccessible.html</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:08 GMT</pubDate>
    </item>
    <item>
      <title>Retry flaky tests with dotnet test and PowerShell</title>
      <link>https://conductofcode.io/post/retry-flaky-tests-with-dotnet-test-and-powershell/</link>
      <description>Introducing test.ps1, a script for running flaky tests - Keeps track of failing tests and retries them - Notifies the test framework of the current retry iteration - Makes it possible to accept a certain percentage of failing tests - Outputs the test result in a coherent way</description>
      <author> (Henrik Lau Eriksson)</author>
      <guid>https://conductofcode.io/post/retry-flaky-tests-with-dotnet-test-and-powershell/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:08 GMT</pubDate>
    </item>
    <item>
      <title>Techniques for label conditioning in Gaussian denoising diffusion models</title>
      <link>https://beckham.nz/2023/01/27/ddpms_guidance.html</link>
      <description>Techniques for label conditioning in Gaussian denoising diffusion models</description>
      <author> ()</author>
      <guid>https://beckham.nz/2023/01/27/ddpms_guidance.html</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:07 GMT</pubDate>
    </item>
    <item>
      <title>Building a DOS ChatGPT client in 2023</title>
      <link>https://yeokhengmeng.com/2023/03/building-a-dos-chatgpt-client-in-2023/</link>
      <description>With the recent attention on ChatGPT and OpenAI’s release of their APIs, many developers have developed clients for modern platforms to talk to this super smart AI chatbot. However I’m pretty sure almost nobody has written one for a vintage platform like MS-DOS.</description>
      <author> ()</author>
      <guid>https://yeokhengmeng.com/2023/03/building-a-dos-chatgpt-client-in-2023/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:06 GMT</pubDate>
    </item>
    <item>
      <title>I Started a Shitstorm or Contemporary Journalism Is Embarrassing</title>
      <link>https://filthydreams.org/2023/03/25/i-started-a-shitstorm-or-contemporary-journalism-is-embarrassing/</link>
      <description>“Why is that a story? No offense…” my cousin James, a nurse in Pittsburgh, asked after I told him that while on the phone I received an interview request from The New York Times, a publicatio…</description>
      <author> ()</author>
      <guid>https://filthydreams.org/2023/03/25/i-started-a-shitstorm-or-contemporary-journalism-is-embarrassing/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:06 GMT</pubDate>
    </item>
    <item>
      <title>Putnam on reason, reductionism, and relativism</title>
      <link>http://edwardfeser.blogspot.com/2023/03/putnam-on-reason-reductionism-and.html</link>
      <description>Naturalism holds that what is real is what can be accounted for in terms acceptable to science.&amp;#160; More or less the orthodoxy in contemporary ...</description>
      <author> ()</author>
      <guid>http://edwardfeser.blogspot.com/2023/03/putnam-on-reason-reductionism-and.html</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:05 GMT</pubDate>
    </item>
    <item>
      <title>I&amp;#39;ve been programming full time for the past 5 years. Am I a senior engineer yet?</title>
      <link>https://cuffaro.com/2023-03-26-am-i-a-senior-engineer-yet/</link>
      <description>experiences</description>
      <author> (mike)</author>
      <guid>https://cuffaro.com/2023-03-26-am-i-a-senior-engineer-yet/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:05 GMT</pubDate>
    </item>
    <item>
      <title>Software is not defined by the language it&amp;#39;s written in</title>
      <link>https://garrit.xyz/posts/2023-03-26-software-is-not-defined-by-the-language-it%27s-written-in</link>
      <description>Generalist developer writing about fullstack development, system administration and free software.</description>
      <author> ()</author>
      <guid>https://garrit.xyz/posts/2023-03-26-software-is-not-defined-by-the-language-it%27s-written-in</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:04 GMT</pubDate>
    </item>
    <item>
      <title>The Artificial in AI - Pravesh Koirala</title>
      <link>https://praveshkoirala.com/2023/03/16/the-artificial-in-ai/</link>
      <description>We may have figured out how to create a brain, before we figured out how it actually works. Full disclosure, the quote above is not mine. I heard it from someone who heard it from someone who read it somewhere on the Internet. But this perfectly summarizes how the release of GPT-4 has made me</description>
      <author> ()</author>
      <guid>https://praveshkoirala.com/2023/03/16/the-artificial-in-ai/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:04 GMT</pubDate>
    </item>
    <item>
      <title>Just update rules between neurons</title>
      <link>https://www.jtolio.com/2023/03/just-update-rules-between-neurons/</link>
      <description>A while ago, I came across this statement about Bing’s chatbot.</description>
      <author> (JT Olio)</author>
      <guid>https://www.jtolio.com/2023/03/just-update-rules-between-neurons/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:04 GMT</pubDate>
    </item>
    <item>
      <title>About Incremental and Disruptive innovations</title>
      <link>https://www.antonoriza.com/incremental-disruptive-innovations/</link>
      <description>The other day while I was scrolling through my LinkedIn feed I read the following quote:
Quote &amp;#171;The electric light did not come from the continuous improvement of candles&amp;#187; -Oren Harari This idea is relevant in the process of creating products and services, specifically it exemplifies the “incremental” versus “disruptive” improvement concepts.
The term “creation” is clear but in the current world a lot of people just copy/duplicate someone else’s product/service and implement it in their country or region targeting it as “innovation”.</description>
      <author> (Juan Antonio Oriza Armas)</author>
      <guid>https://www.antonoriza.com/incremental-disruptive-innovations/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:04 GMT</pubDate>
    </item>
    <item>
      <title>Experience Replay | Entangled Logs</title>
      <link>https://entangledlogs.com/archives/2023/xp_replay/</link>
      <description>As you wander in the woods, the sun begins to sink below the horizon. You are suddenly filled with joy as you remember similar scenes from your past. Maybe you visited this place with your loved ones when you were young or recently. Being here triggers memories that are special to you. If this doesn’t resonate with you, think of a time when you saw someone’s eyes light up as they experienced something new for the first time.</description>
      <author> ()</author>
      <guid>https://entangledlogs.com/archives/2023/xp_replay/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:03 GMT</pubDate>
    </item>
    <item>
      <title>Banking Crisis 2023: Who else is in trouble? - What the Hell is Beeping?</title>
      <link>https://davidschenz.com/banking-crisis-2023-who-else-is-in-trouble/</link>
      <description>Our previous article on the banking crisis looked at Silicon Valley Bank&amp;#39;s (SVB) 2022 10-K to determine the reason for their failure. Our analysis revealed</description>
      <author> (David Schenz)</author>
      <guid>https://davidschenz.com/banking-crisis-2023-who-else-is-in-trouble/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:03 GMT</pubDate>
    </item>
    <item>
      <title>A note to my former self: You&amp;#39;re not supposed to take care of everything</title>
      <link>http://blog.killerstorm.dev/2023/03/a-note-to-my-former-self-youre-not.html</link>
      <description>In 2012-2013, I led the development of an open-source project called &amp;quot;Colored Coins&amp;quot;, which defined a protocol for user-issued fungible toke...</description>
      <author> (Share)</author>
      <guid>http://blog.killerstorm.dev/2023/03/a-note-to-my-former-self-youre-not.html</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:03 GMT</pubDate>
    </item>
    <item>
      <title>Toward Disposable Software</title>
      <link>https://www.paritybits.me/disposable/</link>
      <description>The ratio of compute(disposable software) to  compute(maintained software) will double every 18 months.

Or maybe

The average deployable lifespan of new sof...</description>
      <author> ()</author>
      <guid>https://www.paritybits.me/disposable/</guid>
      <pubDate>Sun, 26 Mar 2023 21:03:03 GMT</pubDate>
    </item>
    <item>
      <title>Stupid Things Orgs Do That Kill Productivity w/ Netflix, FloSports &amp;amp; Refactoring.club</title>
      <link>https://devinterrupted.substack.com/p/stupid-things-orgs-do-that-kill-productivity</link>
      <description>From the archives: As we progress through Season 3, we thought it would be nice to look back at some of our best episodes that haven’t been posted to our Substack page. Enjoy! At LinearB, we like to think we spend all our time figuring out how to unlock developer potential. To find ways to let devs do more of the work they love and reduce the amount of time they spend dealing with needless hurdles, idling and churn.</description>
      <author> (Dev Interrupted)</author>
      <guid>https://devinterrupted.substack.com/p/stupid-things-orgs-do-that-kill-productivity</guid>
      <pubDate>Sun, 26 Mar 2023 17:03:57 GMT</pubDate>
    </item>
    <item>
      <title>GDC Vault</title>
      <link>https://www.gdcvault.com/</link>
      <description>Having trouble viewing our new site? Try clearing your browser&amp;#39;s cache.</description>
      <author> ()</author>
      <guid>https://www.gdcvault.com/</guid>
      <pubDate>Sun, 26 Mar 2023 09:01:42 GMT</pubDate>
    </item>
    <item>
      <title>systemd 100% cpu hang?</title>
      <link>https://forum.proxmox.com/threads/systemd-100-cpu-hang.124767/</link>
      <description>Ok I&amp;#39;ve been at this for the past several hours, I&amp;#39;ve tried everything and at this stage I don&amp;#39;t know what to do next.
This morning I woke up with my NUC fans spinning quite high. When I tried to connect to ssh or shell I had no joy. So I tried a reboot. To my surprise my proxmox host was never...</description>
      <author> ()</author>
      <guid>https://forum.proxmox.com/threads/systemd-100-cpu-hang.124767/</guid>
      <pubDate>Sun, 26 Mar 2023 07:03:13 GMT</pubDate>
    </item>
    <item>
      <title>Blazor WASM Dockerizing</title>
      <link>https://ilovedotnet.org/blogs/blazor-wasm-dockerizing/</link>
      <description>In this post I will teach you how to dockerize stand alone blazor wasm app in .NET. All with live working demo.</description>
      <author> (Abdul Rahman Shabeek Mohamed)</author>
      <guid>https://ilovedotnet.org/blogs/blazor-wasm-dockerizing/</guid>
      <pubDate>Sun, 26 Mar 2023 05:02:00 GMT</pubDate>
    </item>
  </channel>
</rss>