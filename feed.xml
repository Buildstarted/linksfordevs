<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>April 8, 2022</title>
      <link>https://devblogs.microsoft.com/oldnewthing/20220408-00/</link>
      <description>April 8, 2022						
						
							Apr 8, 2022						
						
							04/8/22</description>
      <author> (Raymond Chen)</author>
      <guid>https://devblogs.microsoft.com/oldnewthing/20220408-00/</guid>
      <pubDate>Fri, 08 Apr 2022 14:03:47 GMT</pubDate>
    </item>
    <item>
      <title>Typescript as fast as Rust: Typescript++</title>
      <link>https://zaplib.com/docs/blog_ts++.html</link>
      <description>JP Posma, April 2022 — Discuss on Hacker News</description>
      <author> ()</author>
      <guid>https://zaplib.com/docs/blog_ts++.html</guid>
      <pubDate>Fri, 08 Apr 2022 11:01:37 GMT</pubDate>
    </item>
    <item>
      <title>Salesforce Data Security | Varonis </title>
      <link>https://www.varonis.com/integrations/salesforce</link>
      <description>Protect Salesforce data from overexposure and cyberthreats.</description>
      <author> ()</author>
      <guid>https://www.varonis.com/integrations/salesforce</guid>
      <pubDate>Fri, 08 Apr 2022 10:01:54 GMT</pubDate>
    </item>
    <item>
      <title>Zas Editor</title>
      <link>https://www.zeditor.app/</link>
      <description>Zas Editor: Capable and fast code editor for Go and Rust</description>
      <author> ()</author>
      <guid>https://www.zeditor.app/</guid>
      <pubDate>Fri, 08 Apr 2022 08:01:34 GMT</pubDate>
    </item>
    <item>
      <title>How To Prevent Bugs</title>
      <link>https://www.telerik.com/blogs/how-to-prevent-bugs</link>
      <description>Stop writing bugs: Coping mechanisms and tools to prevent bugs.</description>
      <author> ()</author>
      <guid>https://www.telerik.com/blogs/how-to-prevent-bugs</guid>
      <pubDate>Fri, 08 Apr 2022 06:03:23 GMT</pubDate>
    </item>
    <item>
      <title>Upgrading a .NET standard 2.0 Azure function using Table Storage to a .NET6 function</title>
      <link>https://localjoost.github.io/Upgrading-a-NET-standard-20-Azure-function-using-Table-Storage-to-a-NET6-function/</link>
      <description>To reassure my regular readers - no, I am not pivoting from Mixed Reality and HoloLens. Far from that! But you see, any HoloLens application that is more than a simple demo needs some kind of back end. My HoloLens application AMS HoloATC, first published to the Microsoft Store in Q3 2016, uses an Azure function for the complex CPU-intensive calculations, needed to transform the raw aircraft location data coming from ADS-B Exchange into something HoloLens can project.  In fact, the very first post I wrote about AMS HoloATC specifically handles data services. More importantly, it caches results of a call to ADS-B Exchange for 20 seconds - as not to annoy the good folks running that site. I donate regularly to them and have a ‘feeder’ myself, but it’s no use overextending your goodwill.  Back then in I create the first function in .NET 4.5. Yikes. In 2018 I upgraded to a .NET standard 2.0 function, but recently Microsoft have started to mail me my old functions won’t be supported indefinitely. Time to get moving. After all, how hard could it be. I only used bit of code and some caching in Table Storage.  Yeah, right.  Current setup The current solution exists out of three projects: one only containing the function, one containing all other objects, and one containing a few tests to prove it all works    So we have this very little object that’s stored into an Azure Table as JSON text. In my actual code, this contains a list of flights. I this sample, I just add some demo data to make my point.  namespace TableUpgrade.Data.JsonResult {     public class FlightSet     {         public string SomeProperty { get; set; }          public string SomeOtherProperty { get; set; }          public bool IsCachedValue { get; set; }     } }   To this end, we employ this Table Entity:  using Microsoft.WindowsAzure.Storage.Table;  namespace TableUpgrade.Data.Storage {     public class FlightSetEntity : TableEntity     {         public string Airport { get; set; }          public string FlightSetJson { get; set; }     } }   I also created these little helper extension functions making storing, retrieving and deleting Table Entities easier. At least for my usage ;). The fun part of that is - it turned out it made upgrading easier as well.  using System.Threading.Tasks; using Microsoft.WindowsAzure.Storage.Table;  namespace TableUpgrade.Data.Storage {     public static class CloudTableExtensions     {         public static async Task&amp;lt;T&amp;gt; GetAsync&amp;lt;T&amp;gt;(this CloudTable t,              string partitionKey, string rowKey) where T: TableEntity         {             var operation = TableOperation.Retrieve&amp;lt;T&amp;gt;(partitionKey, rowKey);             var result = await t.ExecuteAsync(operation);             return (T)result.Result;         }          public static async Task&amp;lt;T&amp;gt; GetAsync&amp;lt;T&amp;gt;(this CloudTable t, string rowKey)              where T : TableEntity         {             return await GetAsync&amp;lt;T&amp;gt;(t, &amp;quot;1&amp;quot;, rowKey);         }          public static async Task&amp;lt;TableResult&amp;gt; StoreAsync&amp;lt;T&amp;gt;(this CloudTable t,              T entity, string partitionKey, string rowKey) where T : TableEntity         {             entity.PartitionKey = partitionKey;             entity.RowKey = rowKey;             return await t.ExecuteAsync(TableOperation.InsertOrReplace(entity));         }          public static async Task&amp;lt;TableResult&amp;gt; StoreAsync&amp;lt;T&amp;gt;(this CloudTable t,             T entity, string rowKey) where T : TableEntity         {             return await t.StoreAsync(entity, &amp;quot;1&amp;quot;, rowKey);         }          public static async Task&amp;lt;TableResult&amp;gt; DeleteAsync&amp;lt;T&amp;gt;(this CloudTable t,             T entity) where T : TableEntity         {             return await t.ExecuteAsync(TableOperation.Delete(entity));         }     } }   You may think of it whatever you like, my main shtick is writing HoloLens apps, not Azure functions. The trick with the fixed partition key here is because for my app, I don’t want to bother with partitions. After all, I store only one call result per airport, and so far, only six airports in the world are supported.  Then we have this ‘brilliant’ piece of code, that basically is a wrapper around the whole caching mechanism, so the Azure function itself does not have to deal with the Entity. It just need to know about it’s payload FlightSet:  using TableUpgrade.Data.JsonResult; using TableUpgrade.Data.Storage; using Microsoft.WindowsAzure.Storage.Table; using Newtonsoft.Json; using System; using System.Threading.Tasks;  namespace TableUpgrade.Data.Components {     public class FlightCache     {         private readonly CloudTable _flightCacheTable;         private readonly string _airport;          public FlightCache(CloudTable flightCacheTable, string airport)         {             _flightCacheTable = flightCacheTable;             _airport = airport;         }          public async Task&amp;lt;FlightSet&amp;gt; GetCachedFlightSet()         {             var cachedData = await                _flightCacheTable.GetAsync&amp;lt;FlightSetEntity&amp;gt;(_airport);             if (cachedData != null)             {                 var duration = (DateTimeOffset.UtcNow -                                  cachedData.Timestamp.UtcDateTime).Duration();                 if (duration &amp;lt; TimeSpan.FromSeconds(20))                 {                     cachedData.FlightSetJson = cachedData.FlightSetJson;                     return JsonConvert.DeserializeObject&amp;lt;FlightSet&amp;gt;(                         cachedData.FlightSetJson);                 }             }             return null;         }          public async Task SetCachedFlightSet(FlightSet flightSet)         {             var setToCache = new FlightSetEntity             {                 Airport = _airport,                 FlightSetJson = JsonConvert.SerializeObject(flightSet),                 Timestamp = DateTimeOffset.UtcNow             };             await _flightCacheTable.StoreAsync(setToCache, setToCache.Airport);         }     } }   As you can see, the code tries to retrieve data for the current airport - it’s three letter IATA designation serves as row key. If it finds something, it checks if it’s less than 20 seconds old. If so, it returns the cached value, if not - it returns null, signaling to caller ‘good luck, find something fresh yourself’.  And then the actual function, itself:  using System; using System.Threading.Tasks; using TableUpgrade.Data.Components; using Microsoft.AspNetCore.Mvc; using Microsoft.Azure.WebJobs; using Microsoft.Azure.WebJobs.Extensions.Http; using Microsoft.AspNetCore.Http; using Microsoft.WindowsAzure.Storage.Table; using Newtonsoft.Json; using TableUpgrade.Data.JsonResult; using System.Diagnostics;  namespace TableUpgrade {     public static class FlightData     {         [FunctionName(&amp;quot;FlightData&amp;quot;)]         public static async Task&amp;lt;IActionResult&amp;gt; Run(             [HttpTrigger(AuthorizationLevel.Function, &amp;quot;get&amp;quot;, Route = null)]             HttpRequest req,             [Table(&amp;quot;FlightDataCache&amp;quot;, &amp;quot;AzureWebJobsStorage&amp;quot;)]             CloudTable resultsCacheTable)         {             var airport = req.Query[&amp;quot;airport&amp;quot;];             if (airport.ToString() == string.Empty)             {                 airport = &amp;quot;XYZ&amp;quot;;             }             var flightCache = new FlightCache(resultsCacheTable, airport);              var flights = await flightCache.GetCachedFlightSet();             if (flights == null)             {                 flights = GetSomeRandomData();                 await flightCache.SetCachedFlightSet(flights);                 Debug.WriteLine(&amp;quot;New flightset&amp;quot;);             }             else             {                 flights.IsCachedValue = true;                 Debug.WriteLine(&amp;quot;Cached flightset&amp;quot;);             }              return new OkObjectResult(JsonConvert.SerializeObject(flights));         }           private static FlightSet GetSomeRandomData()         {             return new FlightSet {                  SomeProperty = $&amp;quot;Some property {new Random(25)}&amp;quot;,                  SomeOtherProperty = $&amp;quot;Some property {new Random(35)}&amp;quot; };         }     } }   Basically:    Try to find the data in the cache   If no cached data, get fresh data (using GetSomeRandomData) and store in cache   If cached data found, great   return whatever data is found (cached or not cached).   All rather straightforward. Except that it’s like 5 years out of date. Like I clearly got told when I ran the function locally.    or when you run the tests:    Starting the upgrade process  To make life a bit easier, we first unload the TableUpgrade project - the one with the function in it. Then we upgrade both the TableUpgrade.Data and TableUpgrade.Test to .NET 6.0, using the project’s property pages    TableUpgrade.Data uses the Microsoft.Azure.WebJobs.Extensions.Storage NuGet package, version 3.08. This is very much outdated. Now you can of course upgrade it. That’s what I did initially. But believe me, later you will run into a badly documented hell-hole of missing Table binding attributes in Microsoft.Azure.WebJobs.Extensions.Storage 5.0.0 - requiring you either to forego table binding and write that code yourself, or go insane ;).  For the sake of simplicity, believe me when I say that in TableUpgrade.Data you should:    Uninstall the package Microsoft.Azure.WebJobs.Extensions.Storage   Install the package Azure.Data.Tables   Install the package Microsoft.Extensions.Primitives   This will send Visual Studio into conniptions and yield you a list of 25 errors.  Fixing CloudTableExtensions  You see - there’s no CloudTable in either package we installed, so we might as well just delete the whole CloudTableExtensions file. And replace it by this. Say hello to your new friend, TableClientExtensions.  using System.Threading.Tasks; using Azure.Data.Tables;  namespace TableUpgrade.Data.Storage {     public static class TableClientExtensions     {         public static async Task&amp;lt;T&amp;gt; GetAsync&amp;lt;T&amp;gt;(this TableClient t,              string partitionKey, string rowKey)             where T: class, ITableEntity, new()         {             try             {                 var result = await t.GetEntityAsync&amp;lt;T&amp;gt;(partitionKey, rowKey);                 return result;             }             catch             {                 return null;             }         }          public static async Task&amp;lt;T&amp;gt; GetAsync&amp;lt;T&amp;gt;(this TableClient t,              string rowKey)             where T : class, ITableEntity, new()         {             return await GetAsync&amp;lt;T&amp;gt;(t, &amp;quot;1&amp;quot;, rowKey);         }          public static async Task&amp;lt;bool&amp;gt; StoreAsync&amp;lt;T&amp;gt;(this TableClient t,             T entity, string partitionKey, string rowKey)              where T : class, ITableEntity, new()         {             entity.PartitionKey = partitionKey;             entity.RowKey = rowKey;             var result = await t.UpsertEntityAsync(entity);             return !result.IsError;         }          public static async Task&amp;lt;bool&amp;gt; StoreAsync&amp;lt;T&amp;gt;(this TableClient t,              T entity, string rowKey) where T : class, ITableEntity, new()         {             return await t.StoreAsync(entity, &amp;quot;1&amp;quot;, rowKey);         }          public static async Task&amp;lt;bool&amp;gt; DeleteAsync&amp;lt;T&amp;gt;(this TableClient t,              T entity)              where T : class, ITableEntity, new()         {             var result = await t.DeleteEntityAsync(entity.PartitionKey,entity.RowKey);             return !result.IsError;         }     } }   Which looks remarkably like it’s predecessor, only it uses a different object to make extensions methods for. It will all become much clearer later on. Let’s mosey on to the next object.  Upgrading FlightSetEntity  This looks dead easy, since there is an TableEntity in using Azure.Data.Tables too. unfortunately, that’s a sealed class.    … for what I hope is a very good reason. Anyway, if you have paid attention to the TableClientExtensions you might have seen referrals to ITableEntity. We can implement that interface, which requires us to implement for extra properties we previously inherited from TableEntity:  using System; using Azure; using Azure.Data.Tables;  namespace TableUpgrade.Data.Storage {     public class FlightSetEntity : ITableEntity     {         public string Airport { get; set; }          public string FlightSetJson { get; set; }         public string PartitionKey { get; set; }         public string RowKey { get; set; }         public DateTimeOffset? Timestamp { get; set; }         public ETag ETag { get; set; }     } }  Upgrading FlightCache  That is now getting quite simple:    Change using Microsoft.WindowsAzure.Storage.Table; into using Azure.Data.Tables;   Change both instances of CloudTable to TableClient   But then there’s this pesky line: var duration = (DateTimeOffset.UtcNow -                 cachedData.Timestamp.UtcDateTime).Duration();  That complains about UtcDateTime not existing. This is because, apparently, TimeStamp is now nullable. Great. So I changed this to this:  var duration = (DateTimeOffset.UtcNow -                  cachedData.Timestamp.Value.UtcDateTime).Duration();  Since we explicitly set Timestamp to a value in FlightCache.SetCachedFlightSet I am going to assume the value is always there.  And at this point, my friends, we are down to zero errors in the TableUpgrade.Data project.  Preparing actual function upgrade Maybe I am being paranoid, but with so much time between the platform my code was using and the new one, I tend to start with a fresh top level project, and copy all the stuff back in.     First I deleted TableUpgrade from the Visual Studio solution. Mind you, that does not delete anything from disk, it just removes the reference from the solution   Then I renamed TableUpgrade to TableUpgrade_old    And then I created a fresh new project function project       I made a project reference from TableUpgrade to TableUpgrade.Data, and then I copied my function in from TableUpgrade_old. This gives remarkably little errors.    So we are nearly done? Yes… and no.  Upgrading the TableUpgrade function Here be dragons. The nasty thing is - CloudTable is known here. But the Table attribute is gone. You get the suggestion to import System.ComponentModel.DataAnnotations.Schema but that attribute is not compatible with CloudTable. You have to understand that CloudTable still comes from Microsoft.WindowsAzure.Storage.Table. So we are going - again - for drastic here.  First remove using Microsoft.WindowsAzure.Storage.Table;. You have now still have three errors, but the last one changed: now Visual Studio complains about not having a reference to CloudTable at all.  You will need to install the following packages into the TableUpgrade project:    Microsoft.Azure.WebJobs.Extensions.Storage   Microsoft.Azure.WebJobs.Extensions.Tables   At the moment of this writing, Microsoft.Azure.WebJobs.Extensions.Tables is still in beta - 1.0.0 beta2 to be precise, so you will have check this checkbox:    To even see it.  Now you go back to the TableUpgrade function. You add using Azure.Data.Tables; to your usings, and change CloudTable to TableClient  And once again… that lovely sight of zero errors. Don’t forget to delete the “Function1.cs” file that was created when you re-created the TableUpgrade project. We don’t need it. And the TableUpgrade_old folder can go too.  Proof of the pudding  The TableUpgrade.Tests project contains two simple tests: one to check if the service responds at all (CheckSingleHit) - the other, CheckDoubleHit checks if you get uncached data after 22 seconds, and if you do get cached data if you try again half a second after the first call.  The annoying thing is, you still can’t run unit tests in a running project, so what I usually do with these kind of integration test is open a second instance of Visual Studio and open the project again - and then run the test runner from that second instance.  The test are like this:  public class LocalTest {     [Fact]     public async Task CheckSingleCall()     {         var result = await GetCurrentFlightSet();         Assert.NotNull(result);     }      [Fact]     public async Task CheckDoubleHit()     {         await Task.Delay(22000);         var result = await GetCurrentFlightSet();         Assert.False(result.IsCachedValue);         await Task.Delay(500);         result = await GetCurrentFlightSet();         Assert.True(result.IsCachedValue);     }      private async Task&amp;lt;FlightSet&amp;gt; GetCurrentFlightSet()     {         var urlData = &amp;quot;http://localhost:7071/api/FlightData?airport=XYZ&amp;quot;;          var request = new HttpRequestMessage(HttpMethod.Get, urlData);         using (var httpClient = new HttpClient())         {             var response = await httpClient.SendAsync(request);             response.EnsureSuccessStatusCode();             var result = await response.Content.ReadAsStringAsync();             return JsonConvert.DeserializeObject&amp;lt;FlightSet&amp;gt;(result);         }     } }  And if you did everything right - this is the result    Conclusion Azure was launched in 2008, so it’s now 14 years old. No wonder stuff gets deprecated. Still, I find the whole stuff around Table Storage pretty messy. As far as I have been able to understand: first you had ye olden Table Storage API as I showed it, then came an upgrade, but that broke the Table attribute parameter binding. Parallel you had the ComosDB table access code, and finally the unification came with Azure.Data.Tables. And that still came with without Table attribute binding. Only with a beta package - Microsoft.Azure.WebJobs.Extensions.Tables - we now have API parity with something that worked fine in 2018.  I am not familiar with the why and how, as I am not intimately involved with the Azure development community, but the whole API upgrade path at least appears to be a bit sloppy. Maybe Table Storage is not so important anymore. However, I can guarantee you it’s pretty hard to piece all this information together - it’s all over various forums in bits and pieces, so that’s why I described it. I hope I save at least a few people the scavenging hunt I had to do ;)  Project - of course - can be found on Github. The main branch contains the upgraded code, if you want to see the old code, it’s in branch oldcode.</description>
      <author> (Joost van Schaik)</author>
      <guid>https://localjoost.github.io/Upgrading-a-NET-standard-20-Azure-function-using-Table-Storage-to-a-NET6-function/</guid>
      <pubDate>Fri, 08 Apr 2022 06:03:18 GMT</pubDate>
    </item>
    <item>
      <title>tsup</title>
      <link>https://tsup.egoist.sh/</link>
      <description>bundle typescript library with ease</description>
      <author> ()</author>
      <guid>https://tsup.egoist.sh/</guid>
      <pubDate>Fri, 08 Apr 2022 06:03:18 GMT</pubDate>
    </item>
    <item>
      <title>Using Windows after 15 years on&amp;#160;Linux</title>
      <link>https://duncanlock.net/blog/2022/04/06/using-windows-after-15-years-on-linux/</link>
      <description>I&amp;#39;ve been using Linux exclusively for ~15 yrs. This is my first time using Windows after a 15-year break. This is how it&amp;#39;s been going.</description>
      <author> (Duncan Lock)</author>
      <guid>https://duncanlock.net/blog/2022/04/06/using-windows-after-15-years-on-linux/</guid>
      <pubDate>Fri, 08 Apr 2022 05:02:03 GMT</pubDate>
    </item>
    <item>
      <title>OpenSSH: Release Notes</title>
      <link>https://www.openssh.com/releasenotes.html#9.0</link>
      <description>OpenSSH release notes</description>
      <author> ()</author>
      <guid>https://www.openssh.com/releasenotes.html#9.0</guid>
      <pubDate>Fri, 08 Apr 2022 03:01:56 GMT</pubDate>
    </item>
    <item>
      <title>Microsoft Forms</title>
      <link>https://forms.office.com/Pages/ResponsePage.aspx</link>
      <description></description>
      <author> ()</author>
      <guid>https://forms.office.com/Pages/ResponsePage.aspx</guid>
      <pubDate>Fri, 08 Apr 2022 03:01:55 GMT</pubDate>
    </item>
    <item>
      <title>Episode 419 - Azure Front Door</title>
      <link>https://azpodcast.azurewebsites.net/post/Episode-419-Azure-Front-Door</link>
      <description>The Azure Podcast</description>
      <author> (Evan Basalik)</author>
      <guid>https://azpodcast.azurewebsites.net/post/Episode-419-Azure-Front-Door</guid>
      <pubDate>Fri, 08 Apr 2022 01:02:05 GMT</pubDate>
    </item>
    <item>
      <title>Ruby 3.2.0 Preview 1 Released</title>
      <link>https://www.ruby-lang.org/en/news/2022/04/03/ruby-3-2-0-preview1-released/</link>
      <description>Posted by naruse on 3 Apr 2022</description>
      <author> ()</author>
      <guid>https://www.ruby-lang.org/en/news/2022/04/03/ruby-3-2-0-preview1-released/</guid>
      <pubDate>Fri, 08 Apr 2022 01:02:05 GMT</pubDate>
    </item>
    <item>
      <title>Tables are Hard, Part 3: Streaming Data</title>
      <link>https://blog.px.dev/tables-are-hard-3/</link>
      <description>Let&amp;#39;s build a tailing log viewer in React. Or at least, a facsimile of one. In our  previous post , we made a table with sorting, filtering, and column controls…</description>
      <author> (Nick Lanam)</author>
      <guid>https://blog.px.dev/tables-are-hard-3/</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:11 GMT</pubDate>
    </item>
    <item>
      <title>Why so many pieces in the backend puzzle?</title>
      <link>https://blog.chiselstrike.com/why-so-many-pieces-in-the-backend-puzzle-2a8f3546bacd</link>
      <description>Ah, programming… the art of cursing life and the universe, doubting your entire life choices, feeling miserable and then suddenly… change…</description>
      <author> (https://glaubercosta-11125.medium.com)</author>
      <guid>https://blog.chiselstrike.com/why-so-many-pieces-in-the-backend-puzzle-2a8f3546bacd</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:08 GMT</pubDate>
    </item>
    <item>
      <title>How I Became an Artist</title>
      <link>https://noahbradley.com/how-i-became-an-artist/</link>
      <description>The 19 year journey of my art so far. See my art progress and change as I overcome the trials and blessings of my life as an artist thus far.</description>
      <author> (Noah Bradley)</author>
      <guid>https://noahbradley.com/how-i-became-an-artist/</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:03 GMT</pubDate>
    </item>
    <item>
      <title>Why Invest in Exchange Traded Funds (ETFs)?</title>
      <link>https://mannhowie.com/etf</link>
      <description>1) Why Invest in ETFs; 2) How ETFs work; 3) ETF Share Price vs NAV; 4) ETF vs Actively Managed Funds</description>
      <author> ()</author>
      <guid>https://mannhowie.com/etf</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:03 GMT</pubDate>
    </item>
    <item>
      <title>My sane approach to test fixtures in Rails</title>
      <link>https://masilotti.com/rails-test-fixtures/</link>
      <description>My approach on how I keep my test fixtures manageable, sane, and obvious. Not hard and fast rules, but guidelines to help you implement the same in your app.</description>
      <author> (Joe Masilotti)</author>
      <guid>https://masilotti.com/rails-test-fixtures/</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:03 GMT</pubDate>
    </item>
    <item>
      <title>Gregory Szorc&amp;#39;s Digital Home | Bulk Analyze Linux Packages with Linux Package Analyzer</title>
      <link>https://gregoryszorc.com/blog/2022/01/09/bulk-analyze-linux-packages-with-linux-package-analyzer/</link>
      <description>I&amp;#39;ve frequently wanted to ask random questions about Linux packages and
binaries:</description>
      <author> ()</author>
      <guid>https://gregoryszorc.com/blog/2022/01/09/bulk-analyze-linux-packages-with-linux-package-analyzer/</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:03 GMT</pubDate>
    </item>
    <item>
      <title>Hybrid Work Doesn’t Work</title>
      <link>https://giolodi.com/2022/04/hybrid-work-doesnt-work/</link>
      <description>Hybrid work clashes two different collaboration modes. By shooting for both, it’s effective at none.</description>
      <author> (Gio)</author>
      <guid>https://giolodi.com/2022/04/hybrid-work-doesnt-work/</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:02 GMT</pubDate>
    </item>
    <item>
      <title>Subdomains as identity</title>
      <link>https://blog.wesleyac.com/posts/subdomains-as-identity</link>
      <description></description>
      <author> ()</author>
      <guid>https://blog.wesleyac.com/posts/subdomains-as-identity</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:02 GMT</pubDate>
    </item>
    <item>
      <title>Why Ruby has Symbols</title>
      <link>https://dmitrytsepelev.dev/why-has-ruby-symbols</link>
      <description>Difference between strings and symbols in Ruby</description>
      <author> ()</author>
      <guid>https://dmitrytsepelev.dev/why-has-ruby-symbols</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:02 GMT</pubDate>
    </item>
    <item>
      <title>Introducing the Redwood Startup Fund</title>
      <link>https://tom.preston-werner.com/2022/04/07/the-redwood-startup-fund.html</link>
      <description>7 Apr 2022 - Bay Area, CA</description>
      <author> (Tom Preston-Werner)</author>
      <guid>https://tom.preston-werner.com/2022/04/07/the-redwood-startup-fund.html</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:02 GMT</pubDate>
    </item>
    <item>
      <title>Collatz Arithmetic</title>
      <link>https://nickdrozd.github.io/2022/04/07/collatz-arithmetic.html</link>
      <description>Pick a natural number n and apply the following transformation to it: if n is even, the output will be n / 2; otherwise, if n is odd, the output will be 3n + 1. Keep doing this until 1 is reached.</description>
      <author> ()</author>
      <guid>https://nickdrozd.github.io/2022/04/07/collatz-arithmetic.html</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:02 GMT</pubDate>
    </item>
    <item>
      <title>How hackers* run their sites - Max Leiter</title>
      <link>https://maxleiter.com/blog/hacker-sites</link>
      <description>An analysis based on 700 personal websites</description>
      <author> (Max Leiter)</author>
      <guid>https://maxleiter.com/blog/hacker-sites</guid>
      <pubDate>Fri, 08 Apr 2022 00:02:02 GMT</pubDate>
    </item>
    <item>
      <title>The Scoop: Inside Fast’s Rapid Collapse</title>
      <link>https://newsletter.pragmaticengineer.com/p/the-scoop-fast</link>
      <description>What can software engineers learn from the shutdown of the company? Exclusive details.</description>
      <author> (Gergely Orosz)</author>
      <guid>https://newsletter.pragmaticengineer.com/p/the-scoop-fast</guid>
      <pubDate>Thu, 07 Apr 2022 23:01:40 GMT</pubDate>
    </item>
    <item>
      <title>The computers used to do 3D animation for Final Fantasy VII... in 1996.</title>
      <link>https://lunduke.substack.com/p/the-computers-used-to-do-3d-animation</link>
      <description>It&amp;#39;s time for a little dive into mid-1990s computer history!</description>
      <author> (Bryan Lunduke)</author>
      <guid>https://lunduke.substack.com/p/the-computers-used-to-do-3d-animation</guid>
      <pubDate>Thu, 07 Apr 2022 20:02:37 GMT</pubDate>
    </item>
    <item>
      <title>The new GitHub Issues - April 7th update | GitHub Changelog</title>
      <link>https://github.blog/changelog/2022-04-07-the-new-github-issues-april-7th-update/</link>
      <description>The new GitHub Issues - April 7th update</description>
      <author> ()</author>
      <guid>https://github.blog/changelog/2022-04-07-the-new-github-issues-april-7th-update/</guid>
      <pubDate>Thu, 07 Apr 2022 20:02:37 GMT</pubDate>
    </item>
    <item>
      <title>Announcing Rust 1.60.0 | Rust Blog</title>
      <link>https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html</link>
      <description>Empowering everyone to build reliable and efficient software.</description>
      <author> (Apr. 7, 2022 &amp;#183; The Rust Release Team)</author>
      <guid>https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html</guid>
      <pubDate>Thu, 07 Apr 2022 19:02:24 GMT</pubDate>
    </item>
    <item>
      <title>The 0,5 MB of nothing in all Apple Music files</title>
      <link>https://www.ctrl.blog/entry/apple-music-nullbytes.html</link>
      <description>Six percentage of each music files you’ve bought from Apple Music (iTunes Store) contain, literally, nothing. Why is Apple padding their music with zero-bytes?</description>
      <author> (https://www.daniel.priv.no/)</author>
      <guid>https://www.ctrl.blog/entry/apple-music-nullbytes.html</guid>
      <pubDate>Thu, 07 Apr 2022 17:01:53 GMT</pubDate>
    </item>
    <item>
      <title>I stopped advertising everywhere and nothing happened.</title>
      <link>https://theantistartup.com/i-stopped-advertising-everywhere-and-nothing-happened/</link>
      <description>If you found this post interesting, let me know on Twitter: https://twitter.com/davidjames BackgroundAt TotalCarCheck.co.uk, between 2017 and 2021 (when the company was mostly just me) I was paying for in-search adverts across multiple search engines, I was commissioning custom made adverts to place in online</description>
      <author> ()</author>
      <guid>https://theantistartup.com/i-stopped-advertising-everywhere-and-nothing-happened/</guid>
      <pubDate>Thu, 07 Apr 2022 17:01:52 GMT</pubDate>
    </item>
    <item>
      <title>GitHub - nebuly-ai/nebullvm: Easy-to-use library to boost AI inference leveraging multiple DL compilers</title>
      <link>https://github.com/nebuly-ai/nebullvm</link>
      <description>Easy-to-use library to boost AI inference leveraging multiple DL compilers - GitHub - nebuly-ai/nebullvm: Easy-to-use library to boost AI inference leveraging multiple DL compilers</description>
      <author> (nebuly-ai)</author>
      <guid>https://github.com/nebuly-ai/nebullvm</guid>
      <pubDate>Thu, 07 Apr 2022 15:02:00 GMT</pubDate>
    </item>
    <item>
      <title>Answer: Why is this code broken?</title>
      <link>https://ayende.com/blog/196931-B/answer-why-is-this-code-broken</link>
      <description>I asked why this code is broken, and now is the time to dig into this. The issue is in this block of code. Take a look at that for a moment, if you please:
...</description>
      <author> ()</author>
      <guid>https://ayende.com/blog/196931-B/answer-why-is-this-code-broken</guid>
      <pubDate>Thu, 07 Apr 2022 15:02:00 GMT</pubDate>
    </item>
    <item>
      <title>April 7, 2022</title>
      <link>https://devblogs.microsoft.com/oldnewthing/20220407-00/</link>
      <description>April 7, 2022						
						
							Apr 7, 2022						
						
							04/7/22</description>
      <author> (Raymond Chen)</author>
      <guid>https://devblogs.microsoft.com/oldnewthing/20220407-00/</guid>
      <pubDate>Thu, 07 Apr 2022 15:02:00 GMT</pubDate>
    </item>
  </channel>
</rss>