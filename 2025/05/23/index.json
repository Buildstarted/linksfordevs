[
  {
    "Title": "Building Multi-Tenant APIs Using EF Core and Row-Level Security",
    "Url": "https://youtube.com/watch?v=OwCgDPa0DnA",
    "Timestamp": "2025-05-23T13:02:08",
    "Domain": "youtube.com",
    "Description": "Want to master Clean Architecture? Go here: https://bit.ly/3PupkOJ\nWant to unlock Modular Monoliths? Go here: https://bit.ly/3SXlzSt\nGet the source code here: https://www.patreon.com/milanjovanovic\n\nThink your authorization checks are secure? Think again.\n\nIn this video, I show how one missing filter in your API can leak sensitive user data â€” and how to prevent that with PostgreSQL's built-in Row-Level Security (RLS).\n\nâœ… Weâ€™ll build a real .NET Core API using EF Core and Postgres  \nâœ… Show how to extract user IDs from JWT tokens  \nâœ… Use an EF Core interceptor to safely set session variables  \nâœ… Enable and configure RLS in Postgres for bulletproof data isolation\n\nProtect your multi-tenant systems. Stop depending on app-layer filters alone.\n\nðŸ’¡ Perfect for .NET devs building secure, multi-tenant apps.\n\nCheck out my courses:\nhttps://www.milanjovanovic.tech/courses\n\nRead my Blog here:\nhttps://www.milanjovanovic.tech/blog\n\nJoin my weekly .NET newsletter:\nhttps://www.milanjovanovic.tech\n\nChapters\n0:00 Typical Authorization Checks\n2:58 Row-Level Security intro\n7:33 Adding an EF Core Interceptor\n9:54 DI setup, User configuration\n11:00 Testing out RLS policy\n12:10 Multi-Tenant systems"
  },
  {
    "Title": "The future of Flatpak",
    "Url": "https://lwn.net/Articles/1020571/",
    "Timestamp": "2025-05-23T12:02:06",
    "Domain": "lwn.net",
    "Description": "At the Linux Application Summit (LAS) in April, Sebastian Wick said that, by many metrics, Flat [...]"
  },
  {
    "Title": "GitHub - kepano/defuddle: Extract the main content from web pages.",
    "Url": "https://github.com/kepano/defuddle",
    "Timestamp": "2025-05-23T10:02:19",
    "Domain": "github.com",
    "Description": "Extract the main content from web pages. Contribute to kepano/defuddle development by creating an account on GitHub."
  },
  {
    "Title": "Document Search in .NET with Kernel Memory",
    "Url": "https://youtube.com/watch?v=h8bKn1nzjrQ",
    "Timestamp": "2025-05-23T05:02:10",
    "Domain": "youtube.com",
    "Description": "Ever wanted to search or perform question answering on documents, PDFs, or web pages but weren't sure about costs or security? Kernel Memory is a .NET library that allows you to use whatever embedding and text models you'd like (including Ollama and OpenAI models) and whatever vector store you'd like to index and search documents in a flexible way using a minimal amount of C# code."
  },
  {
    "Title": "That fractal that's been up on my wall for 12 years",
    "Url": "https://chriskw.xyz/2025/05/21/Fractal/",
    "Timestamp": "2025-05-23T00:02:19",
    "Domain": "chriskw.xyz",
    "Description": "Warning: Math, Handwaving\n\nI spent a lot of time doodling in middle school in lieu of whatever it is middle schoolers are\nsupposed to be doing. Somewhere between the Cool Sâ€™s\nand Penrose triangles I stumbled upon a neat\nway to fill up graph paper by repeatedly combining and copying squares. I suspected there was\nmore to the doodle but wasnâ€™t quite sure how to analyze it. Deciding to delegate to a future version of me that\nknows more math, I put it up on the wall behind my desk where it has followed me from high\nschool to college to the present day.\n\n"
  }
]