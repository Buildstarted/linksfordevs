[
  {
    "Title": "The New Way to Seed Your Database in .NET 9",
    "Url": "https://youtube.com/watch?v=ESPp3uVmKhU",
    "Timestamp": "2025-01-09T12:01:38",
    "Domain": "youtube.com",
    "Description": "Check out my courses on Dometrain: https://dometrain.com\nSubscribe to my weekly newsletter: https://nickchapsas.com\n\nBecome a Patreon and get special perks: https://www.patreon.com/nickchapsas\n\nHello, everybody. I'm Nick, and in this video, I will show you the brand new way of seeding database data in .NET, which was introduced in .NET 9.\n\nWorkshops: https://bit.ly/nickworkshops\n\nDon't forget to comment, like and subscribe :)\n\nSocial Media:\nFollow me on GitHub: https://github.com/Elfocrash\nFollow me on Twitter: https://twitter.com/nickchapsas\nConnect on LinkedIn: https://www.linkedin.com/in/nick-chapsas\n\nKeep coding merch: https://keepcoding.shop\n\n#csharp #dotnet"
  },
  {
    "Title": "ABP '24 Highlights!",
    "Url": "https://youtube.com/watch?v=WOrHGD_LS0s",
    "Timestamp": "2025-01-09T11:01:44",
    "Domain": "youtube.com",
    "Description": "2024 was an incredible year, and we couldn‚Äôt have done it without our amazing community. üíô"
  },
  {
    "Title": "The erasure of Luigi Mangione",
    "Url": "https://substack.evancarroll.com/p/the-erasure-of-luigi-mangione",
    "Timestamp": "2025-01-09T07:01:52",
    "Domain": "substack.evancarroll.com",
    "Description": "The saga on Stack Overflow and Stack Exchange, and how tech always serves the ruling class."
  },
  {
    "Title": "Facebook Is Censoring 404 Media Stories About Facebook's Censorship",
    "Url": "https://www.404media.co/facebook-is-censoring-404-media-stories-about-facebooks-censorship/",
    "Timestamp": "2025-01-09T07:01:51",
    "Domain": "www.404media.co",
    "Description": "Instagram, Facebook, and Threads are removing 404 Media stories for ‚Äúnudity‚Äù as the company is paid to put ads with explicit pornography in front of its users."
  },
  {
    "Title": "You don‚Äôt have to pay the Microsoft 365 price increase",
    "Url": "https://www.consumer.org.nz/articles/you-don-t-have-to-pay-the-microsoft-365-price-increase",
    "Timestamp": "2025-01-09T06:02:02",
    "Domain": "www.consumer.org.nz",
    "Description": "Here‚Äôs how to keep the price of your subscription the same as it‚Äôs always been."
  },
  {
    "Title": "Trimix",
    "Url": "https://xkcd.com/3035/",
    "Timestamp": "2025-01-09T06:02:01",
    "Domain": "xkcd.com",
    "Description": ""
  },
  {
    "Title": "Deniable Knowledge",
    "Url": "https://dinhtta.github.io/zkp/",
    "Timestamp": "2025-01-09T01:02:26",
    "Domain": "dinhtta.github.io",
    "Description": "Let‚Äôs start with Zero Knowledge Proof ‚Äî arguably the one of the most important discovery of\nmodern cryptography and computer science. Given the fact that cryptographers are not great at naming things,\nit is no surprise that ZKP is made up of three most philosophical words out there, which is fitting since the\nconcept itself is full of intricacies and subtleties. Worse, the field is moving so fast in both theoretical\nand implementation directions, that it becomes all but impossible to catch up (I speak this only for myself,\nof course).\n\n"
  },
  {
    "Title": "Study TDD & DDD Principles in Frontend Applications",
    "Url": "https://blog.kirilov.dev/informatics/2025/01/03/frontend_ddd.html",
    "Timestamp": "2025-01-09T01:02:25",
    "Domain": "blog.kirilov.dev",
    "Description": "Studying Domain* and Test Driven Design Principles in Frontend Applications * Disclaimer: When talking about DDD in this context I mainly mean the use of an expressive and rich model. During my career as web-developer I have noticed a repeating antipattern related to front-end code. For some reason most of the best practices that we usually use on the backend code are rarely applied in the front. This looks especially true for DDD Domain Driven Design and TDD Test Driven Development principles. In this article I want to showcase how some DDD and TDD best practices can be used in a classic React application with a little help of a reactive framework called Signals. I will treat the matter as a study and try to gain knowledge and insights along the way. Please note that this is not a showcase for the technical aspects of how Signals work, but rather an example of how frontend business logic can be developed using TDD and DDD. In our examples Signals can be easily replaced by RxJS or simple callbacks and everything will still hold. What is a Model ? Domain Driven Design is a very vast discipline and I want to mainly focus on the modeling parts of it, such as aggregates, value objects, encapsulation and in general the model. Let‚Äôs take a moment to talk about what a model is, but also what it is not. One of the biggest sins of modern development is that we have forgotten what a OOP is and what a model is supposed to be. We create simple classes that are just containers for data and that are void of any logic whatsoever and call that a ‚Äúmodel‚Äù. A model is an abstraction of reality that represents some real-life objects, patterns and interactions in a simplified way. I often explain the principle to my colleagues with the analogy of the solar system and the way celestial objects gravitate around each other and the sun. In the celestial model we represent multiple invariants that are observable in real life such as: All planets revolve around the sun No two objects can collide in the solar system All planets turn in the same direction When the Earth completes one revolution around the sun, the Moon completes 12 around the Earth Etc ‚Ä¶ If we represent the solar system by a simple class that only has fields with getters and setters, we would have an anemic model that does not protect its state and does not enforce the invariants mentioned above. Any time we expose a field via a setter, we completely neglect the rules of the system and our code becomes error-prone. As an example, imagine we have the class SolarSystem that has a setter for Earth‚Äôs position. This means that if an external caller gets a reference to the SolarSystem, then nothing stops them from setting the position of our planet to (0, 0, 0) colliding it with the center of the Sun. Our model should thus have a method called ‚Äúadvance(time)‚Äù and the position of all planets should be calculated internally. Take a look at the orrery bellow (meaning Model of the solar System) and how it is self-validated. There is only one way to interact with the model, through a crank at the bottom that can only be turned in one direction. Everything else in the model is internally calculated and cannot be mingled with. A physical model of the Solar System - an orrery The model‚Äôs invariants are cleverly designed using sprockets and gears Credit to Pinar Noorata and Ken Condal mymodernmet.com for the beautiful orrery. Real Life Use Case So having in mind what a model is let‚Äôs now study a more realistic and concrete case that I have encountered while working on a project at my company. Here is a short description of the problem: We are developing an application that uses an AI LLM Large Language Model (ex: Chat GPT 4 / Llama 3) models to generate an article‚Äôs content. An article is split into different blocks, such as title, short description, bullet points and long description. Each block has its own AI model that is responsible for generating the appropriate content. An article can be translated into multiple languages and the blocks‚Äô content is changed for each language. Websocket Protocol We have opted for a websocket communication with the backend in order to leverage the asynchronous mode of AI content generation. A custom protocol has been developed that works in the following manner: The frontend app establishes a websocket connection with the backend The frontend performs a POST request to the backend to initiate the beginning of the article‚Äôs content generation. A ‚ÄúStart block‚Äù message is sent from the backend to the front. After this the websocket receives a number of chunks of content for that block. Whenever a new ‚ÄúStart block‚Äù is received the UI needs to visualize a new block and all consecutive chunks will be appended to it. Return to 3. until all blocks finished The communication is ended with a special ‚Äúend of content‚Äù message. Additional Rules There are also some additional rules related to how the UI should behave during the content generation: Rule: An article indicates that it is ‚Äúloading‚Äù content, as soon as the first Start Block message is received. Rule: An article stops loading whenever the ‚ÄúEnd of Content‚Äù message is received. Rule: The current locale (language) can be changed from a predefined list. Rule: Whenever changing a locale, if the content for this locale is not yet generated, the model requests a translation from the backend. The same websocket protocol is used for translations. Rule: Whenever the locale is changed, If the selected locale has already been generated, then the content of the blocks is swapped with the corresponding locale. Rule: The entire article content can be regenerated. This will reset the content of all blocks and will remove any existing translations. Rule: A single block‚Äôs content can be regenerated. This action resets all translations. Initial Approach and Fail As you can see the UI rules are fairly complicated, but what adds event a bigger challenge is the asynchronous communication with the backend. Our team has initially started developing in classic React manner: A wrapper component, that has some children. Each child representing some visual part of the screen, such as the article and its block and their content. Concerning the state, and this is where things went really wrong, we used React‚Äôs useState hooks and component properties in addition with callback functions to pass state changes and events between parent / children. We quickly ended-up with an entangled mess of data and callbacks being passed multiple levels down. One such example is the relation between the ‚Äúregenerate block‚Äù button, that needs to trigger the global loader‚Äôs state. We started running into various bugs and problems and the time spent fixing issues was steadily increasing to the point where we barely could add new features. Other bugs we encountered were related to content being mixed between blocks and languages etc. Although our team had some experience with React, we were not fluent with React‚Äôs Testing Library. This is actually one of the major problem with modern SPA frameworks, such as React and Angular, that testing them is not trivial and requires libraries, fixtures, mocks etc. Applying TDD & DDD As a seasoned backend developer I started searching for analogies in my experience. When I encounter a badly written, highly coupled code I usually apply the following strategy: Write a test that describes what we want to actually achieve. Ideally make the test red / green with the existing code. Write a new DDD non-anemic model that validates the tests. Decouple the existing code from the old classes and make it use the new model. I thought: ‚ÄúWhy not use the same principle in my React code ? What makes it any different from any backend code I have written ? Why should I tolerate this spaghetti coupling of presentation and business layers ?‚Äù I then proceeded by starting a new empty project to avoid any distractions. I only installed Jest as a dependency and started writing all the business rules we have mentioned earlier in TDD style. My model slowly started emerging as I was progressing with the tests. Each class and method was created during the test initialization. All business rules were described by the tests. Consequently, the test coverage was close to 100% DDD Model Since my model was completely decoupled from React, or any other technical libraries in-fact, it was easy to properly use some DDD patterns, such as aggregates and value objects. Most of the fields of my aggregates were private and had no setters, making sure that no data inconsistent operations can be made upon the model. /** * This class is the main aggregate that manages the description of an Article. * It provides operations such as #addChunk, #addStartChunk etc. for adding content to the appropriate blocks. * * The description comprises multiple LocaleContent. */ export class DescriptionModel { private readonly _languages: LocaleEnum[]; private readonly _localeContents: Signal<LocaleContent[]>; private readonly _currentLocale: Signal<LocaleEnum>; private readonly _defaultLocale: LocaleEnum; private _run_id = \"\"; private readonly _isLoading = signal(false); callback: any; constructor() { this._languages = [LocaleEnum.en_US, LocaleEnum.fr_FR, LocaleEnum.en_UK]; this._currentLocale = signal(LocaleEnum.en_US); this._localeContents = signal([]); this._defaultLocale = LocaleEnum.en_US; } // getters // mutators } Most of the business logic was properly encapsulated inside the aggregate and not split into a service. True OOP was achieved by combining data and functionality. export class DescriptionModel { // ... class initialization omitted // ... addStartChunk(chunk: BlockStartChunk) { let localeContent = this.getLocaleContent(chunk.locale).value; if (!localeContent) { localeContent = new LocaleContent(chunk.locale); this._localeContents.value = [ ...this._localeContents.value, localeContent, ]; } const existingBlock = localeContent?.getBlock(chunk.name); if (existingBlock) { localeContent.reset(chunk.name); // if the default locale content has changed, remove all translations if (chunk.locale === this.defaultLocale) { this.removeAllTranslations(); this.changeLocale(this.defaultLocale); } } localeContent.addStartChunk(chunk); this.isLoading.value = true; } addChunk(chunk: BlockChunk) { const localeContent = this.getLocaleContent(chunk.locale).value; if (!localeContent) { throw new BlockNotFoundError( `Unable to find block ${chunk.block_name} for locale ${chunk.locale}.`, ); } localeContent.addChunk(chunk); } // ... other mutators } The end result was very nice: when using this well-structured and completely tested model, I could completely forget about the complexity of properly updating the article‚Äôs blocks, properly filtering the language and translations, updating the loading status etc. It became a ‚Äúfire and forget‚Äù solution where I only had to receive a piece of information from the websocket, and invoke the descriptionModel.addChunk(). All the rest was automatically calculated, updated and validated by the model. Celestial Model Analogy Let us return to our celestial model for a moment and compare: Not having setters in the article description model is the equivalent of not allowing the planets to be moved by hand Having limited interaction points with the model, such as ‚ÄúaddChunk‚Äù, is the equivalent of having only one crank in the celestial model Internally calculating / mutating the state of the model, such as adding the chunks to the proper language and block is the equivalent of making the planets rotate in the right way, when turning the crank. Psychological Effects and Ease of Mind I want to point out that besides the obvious technical advantages of having well-defined model, there is also an important psychological factor. It is hard to explain how huge is the transition from a buggy, messy code, where each manual test took from 2 to 3 minutes, to a well-defined, well-tested model, that just works. Adding new features is now much easier. Knowing that I can play around the code and try new things, without worrying about breaking the rest is an enormous relief. It is way-more motivating to work on this part of the project for these reasons. Components Integration Now that we have properly developed and hydrated the new model, we needed to find out how to put in actual use in the React application. My initial and naive approach was to use the entire aggregate as the state of the wrapper component. This idea quickly fell down the drain due to numerous problems such as: Due to the nature of how changes are detected in react, it was needed to deep-clone the entire object graph on every change Performance - recreating an entire graph is very expensive It is impossible to make child objects react to changes of a sub-graph of the model. It seemed that I had to make a compromise and add some library to update the view in a dynamic manner. After some consideration I stopped myself on Preact‚Äôs Signal framework. I will talk about other possible solutions I considered further down. For every action, on which the view had to be updated, I had to expose either a signal or a computed signal. The model needed a simple transformation // from export class DescriptionModel { private readonly _languages: LocaleEnum[]; private readonly _localeContents: LocaleContent[]; private readonly _currentLocale: LocaleEnum; private readonly _defaultLocale: LocaleEnum; private _run_id = \"\"; } Wrapping the model‚Äôs fields as Signals whenever a component needs to subscribe and react to it changing // to export class DescriptionModel { private readonly _languages: LocaleEnum[]; private readonly _localeContents: Signal<LocaleContent[]>; // <-- wrapped with Signal private readonly _currentLocale: Signal<LocaleEnum>; / <-- wrapped with Signal private readonly _defaultLocale: LocaleEnum; // ... get localeContents(): Signal<LocaleContent[]> { return this._localeContents; } // Some methods can calculate a Signal's value, based on other signals getLocaleContent(locale: LocaleEnum,): ReadonlySignal<LocaleContent> { return computed(() => this._localeContents.value.find((loc) => loc.locale === locale), ); } // .. etc } On the component side, things were as easy as: Create my model in the JS context (outside the component) const description = new DescriptionModel() Use the Signal‚Äôs value inside the tsx template <div>Content is loading: {description.isLoading.value ? 'True' : 'False'}</div> The Code for the Study The entire example covered is available on my Github repository at https://github.com/sashokbg/react-tdd-ddd-study Other Possible Solutions - Redux, Immer and DeepSignals Some of the more experienced React developers would probably immediately have shouted ‚Äúuse Redux !‚Äù. Redux provides the essential concepts such as basic encapsulation of the state, methods via the reducers etc. As such it is a viable solution for a feature rich UI that requires advances state management. There are however sever drawbacks of using redux such as additional dependencies, a certain opinionated way of doing things the ‚Äúredux‚Äù way. Redux is also not really OOP oriented, since each reducer receives the previous state and returns a new one and is not really how a classical object would mutate. This is ofcourse completely fine and brings us back to the old ‚Äúfunctional vs OOP‚Äù debate. Immer is probably another solution that could have easily replaced the Signals, but it looks like it has the same ‚Äúdrawback‚Äù of being functionally based. DeepSignals library is very close to how Signals work, but automatically wrap entire object graphs making all fields Signals. An advantage of deep signals is also that you don‚Äôt need to use the .value to subscribe to a signal change. I choose not to use it since it is not very popular for now and since it adds additional complexity with the object proxying etc. Conclusion The study and the model I have described are now happily integrated in our project. It probably needs to spend some more time with the rest of the team and in production to make sure that this is the way to do things. Either way I am very happy with the outcome and I think that this study proved that best practices can easily be applied on frontend / UI code. There are no excuses to skip tests, to create anemic models and not to focus and explicit domain requirements. All of these are easily achievable with a minimum of technical requirements and are mostly related to skills, project culture and the will to build better applications. Links and References https://preactjs.com/guide/v10/signals/ https://jestjs.io/ https://mymodernmet.com/ken-condal-orrery https://martinfowler.com/bliki/AnemicDomainModel.html https://en.wikipedia.org/wiki/Domain-driven_design https://immerjs.github.io/immer/ https://redux.js.org/"
  },
  {
    "Title": "Demand for Software is Different",
    "Url": "https://www.rowanajmarshall.co.uk/posts/demand-for-software-is-different/",
    "Timestamp": "2025-01-09T01:02:24",
    "Domain": "www.rowanajmarshall.co.uk",
    "Description": "Most things humans produce have a recognisable demand ceiling - the world will only eat so much bread, regardless of how cheap it is, and we‚Äôll only upgrade our phones so often, no matter how nice the new models are.\nIf we get 10x times better at growing wheat, we don‚Äôt grow 10x more wheat, because we‚Äôre pretty close to that upper limit now - instead, we get 10x less wheat farmers, producing a similar quantity of wheat."
  },
  {
    "Title": "Creating a simple free website in 2025",
    "Url": "https://mattsayar.com/creating-a-simple-free-website-in-2025/",
    "Timestamp": "2025-01-09T01:02:24",
    "Domain": "mattsayar.com",
    "Description": "I've owned mattsayar.com since December 2010. According to archive.org, it appears I started experimenting with Wordpress sometime in May 2011, but then switched to using Tumblr as my host in 2012. For years afterwards, this site was just a simple index.html on AWS S3 that‚Ä¶"
  },
  {
    "Title": "28h Days: year 1 update",
    "Url": "https://sidhion.com/blog/28h_days_update_1/",
    "Timestamp": "2025-01-09T01:02:23",
    "Domain": "sidhion.com",
    "Description": "It‚Äôs been a little over a year since I started living  28h days   .\nI figured it might be a good idea to write an yearly update, and doing it at the beginning of the year feels appropriate, so here we are."
  },
  {
    "Title": "So you want to offer self-hosted deployment: how should you do it?",
    "Url": "https://blog.trustshepherd.com/so-you-want-to-offer-self-hosted-deployment-how-should-you-do-it/",
    "Timestamp": "2025-01-09T01:02:23",
    "Domain": "blog.trustshepherd.com",
    "Description": "Large buyers of software products often request self-hosted deployment, particularly enterprises in regulated industries. Serving these accounts can unlock huge budgets for vendors, but in my experience it‚Äôs not easy to do. This post explores the decision of if you should offer a self-hosted deployment model, the key challenges"
  },
  {
    "Title": "1-billion row challenge with Node.js",
    "Url": "https://jackyef.com/posts/1brc-nodejs-learnings",
    "Timestamp": "2025-01-09T01:02:22",
    "Domain": "jackyef.com",
    "Description": "5 minutes to 11 seconds with Node.js is possible?"
  },
  {
    "Title": "Snapshot Isolation vs Serializability - Marc's Blog",
    "Url": "https://brooker.co.za/blog/2024/12/17/occ-and-isolation.html",
    "Timestamp": "2025-01-09T01:02:20",
    "Domain": "brooker.co.za",
    "Description": "Getting into some fundamentals."
  },
  {
    "Title": "Unusual $/MTok numbers",
    "Url": "https://venki.dev/notes/unusual-mtok-numbers",
    "Timestamp": "2025-01-09T01:02:19",
    "Domain": "venki.dev",
    "Description": "Unusual $/MTok numbers"
  },
  {
    "Title": "Fixing Cumulative Layout Shift (CLS) in Nuxt 3 | kylev.dev",
    "Url": "https://kylev.dev/blog/fixing-cumulative-layout-shift-nuxt-3/",
    "Timestamp": "2025-01-09T01:02:19",
    "Domain": "kylev.dev",
    "Description": "How disabling the inlineStyles feature saved my core web vitals"
  },
  {
    "Title": "LLM Drawing with Eyes Open",
    "Url": "https://www.paritybits.me/llm-drawing-with-eyes-open/",
    "Timestamp": "2025-01-09T01:02:19",
    "Domain": "www.paritybits.me",
    "Description": "The scaffolding around Claude 3.5's artifacts allow for the drawing and display of SVG graphics, sometimes with pretty amusing results. The errors will be fa..."
  },
  {
    "Title": "But what is a DOM node?",
    "Url": "https://gregros.dev/post/but-what-is-a-dom-node",
    "Timestamp": "2025-01-09T01:02:19",
    "Domain": "gregros.dev",
    "Description": "What actually makes an object a DOM node? Is it the prototype? Or is it something else? \n\nIt seems like a basic question, but the answer turns out to be surprisingly complicated. \n"
  },
  {
    "Title": "Async I/O Is Not Enough",
    "Url": "https://valatka.dev/2024/12/28/async-io-is-not-enough.html",
    "Timestamp": "2025-01-09T01:02:19",
    "Domain": "valatka.dev",
    "Description": "For the past few months, I‚Äôve been exploring Go. Having done quite a bit of grueling work shaving off milliseconds from Python web apps, I‚Äôve found Go to be incredible. You can schedule dirt cheap concurrent operations ‚Äî simply by adding go in front of a function call ‚Äî and achieve true parallelism across cores."
  },
  {
    "Title": "I Can‚Äôt Believe It‚Äôs Not Causal! Scalable Causal Consistency with No Slowdown Cascades",
    "Url": "http://muratbuffalo.blogspot.com/2025/01/i-cant-believe-its-not-causal-scalable.html",
    "Timestamp": "2025-01-09T01:02:18",
    "Domain": "muratbuffalo.blogspot.com",
    "Description": "I recently came across the Occult paper (NSDI'17)  during my series on \"The Use of Time in Distributed Databases.\"  I had high expectations,..."
  },
  {
    "Title": "Observable management",
    "Url": "https://vtorosyan.github.io/observable-management/",
    "Timestamp": "2025-01-09T01:02:17",
    "Domain": "vtorosyan.github.io",
    "Description": "At some point in their career, almost every engineer asks, ‚ÄúWhat does my manager actually do?‚Äù As an engineering manager, much of my work is what I call ‚Äúinvisible-important‚Äù. This invisibility can lead to mistrust, misalignment, and a lack of understanding about how a manager contributes to team success.\n\n"
  },
  {
    "Title": "How extensions trick CWS search",
    "Url": "https://palant.info/2025/01/08/how-extensions-trick-cws-search/",
    "Timestamp": "2025-01-09T01:02:16",
    "Domain": "palant.info",
    "Description": "There are hundreds of extensions in Chrome Web Store using bogus ‚Äútranslation‚Äù to mess up search results. Most extensions are produced by a few extensions clusters who are flooding Chrome Web Store with spam."
  },
  {
    "Title": "Mastering Key Remapping on Linux: A Practical Guide with xremap",
    "Url": "https://www.paolomainardi.com/posts/linux-remapping-keys-with-xremap/",
    "Timestamp": "2025-01-09T01:02:15",
    "Domain": "www.paolomainardi.com",
    "Description": "Introduction Link to heading I have a huge collection of mechanical keyboards (> 15 and counting); when I started the journey, I mainly chose TKL layouts, which seemed the simplest choice for a desktop keyboard; they have all the keys I need, such as Home, End, PgUp, PgDown, that at least for me are essential for my writing habits. The issue with this layout is that you have to move your hands a lot to reach some keys, and the mouse is far away from the keyboard, so I started to look for smaller keyboards, such as 60%, 65%, and 75% sizes."
  },
  {
    "Title": "Building a home dashboard - Pablasso",
    "Url": "https://pablasso.com/posts/building-a-home-dashboard",
    "Timestamp": "2025-01-09T01:02:15",
    "Domain": "pablasso.com",
    "Description": "The e-ink screen that chills in my living room."
  },
  {
    "Title": "What makes strong engineers strong?",
    "Url": "https://www.seangoedecke.com/what-makes-strong-engineers-strong/",
    "Timestamp": "2025-01-09T01:02:15",
    "Domain": "www.seangoedecke.com",
    "Description": "Self-belief, pragmatism, speed, and technical ability"
  },
  {
    "Title": "Result-oriented programming with F# computation expressions - Pavel Skvirski",
    "Url": "https://skvirski.com/articles/result-oriented-programming-fsharp/",
    "Timestamp": "2025-01-09T01:02:15",
    "Domain": "skvirski.com",
    "Description": "Quick intro to F# computation expressions and how they can be used for result-based error handling."
  },
  {
    "Title": "How to become a Data Scientist? | MLJAR",
    "Url": "https://mljar.com/blog/how-to-become-data-scientist/",
    "Timestamp": "2025-01-09T01:02:14",
    "Domain": "mljar.com",
    "Description": "Data science can be rewarding beyond a big paycheck. Large firms pay well, but smaller ones may not. If you love research and discovery, it is worth it."
  }
]