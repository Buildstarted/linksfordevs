<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>YouTube</title>
      <link>https://www.youtube.com/watch?v=Elfocrash</link>
      <description>Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube.</description>
      <author> ()</author>
      <guid>https://www.youtube.com/watch?v=Elfocrash</guid>
      <pubDate>Sat, 30 Oct 2021 04:02:06 GMT</pubDate>
    </item>
    <item>
      <title>Our investment in Appwrite</title>
      <link>https://hazardlights.net/2021/10/26/our-investment-in-appwrite/</link>
      <description>Leading-edge software developers are amazing – yet incredibly demanding – early adopters.&amp;#160; For products and platforms that increase development velocity, remove complexity, and dri…</description>
      <author> ()</author>
      <guid>https://hazardlights.net/2021/10/26/our-investment-in-appwrite/</guid>
      <pubDate>Sat, 30 Oct 2021 04:02:05 GMT</pubDate>
    </item>
    <item>
      <title>Please change your mind about your announced release plans</title>
      <link>https://mta.openssl.org/pipermail/openssl-project/2021-October/002777.html</link>
      <description />
      <author> ()</author>
      <guid>https://mta.openssl.org/pipermail/openssl-project/2021-October/002777.html</guid>
      <pubDate>Sat, 30 Oct 2021 03:02:08 GMT</pubDate>
    </item>
    <item>
      <title>Java on VS Code Adds Gradle Tool, Simplifies Code Actions -- Visual Studio Magazine</title>
      <link>https://visualstudiomagazine.com/articles/2021/10/29/vs-code-java-oct21.aspx</link>
      <description>The latest monthly update to Java on Visual Studio Code adds a Gradle extension, simplifies Code Actions execution and leverages an &amp;#39;important milestone,&amp;#39; the v1.0 release of a new language server developed with Red Hat.</description>
      <author> (By David Ramel10/29/2021)</author>
      <guid>https://visualstudiomagazine.com/articles/2021/10/29/vs-code-java-oct21.aspx</guid>
      <pubDate>Fri, 29 Oct 2021 23:02:36 GMT</pubDate>
    </item>
    <item>
      <title>A Roadmap to a Post-Scarcity Economy</title>
      <link>https://lorenzopieri.com/post_scarcity/</link>
      <description>The truly scarce resource is human abilities.  Summary  A post-scarcity society can be defined as a society in which all the basic needs of the population are met and provided for free. A common belief is that moving to such a desirable state, if possible at all, will require futuristic technologies to eliminate the scarcity of material resources. In this writeup I emphasise how what’s actually stopping us from being post-scarcity is not lack of resources, but the forced reliance on human labour. Given these premises, I lay out an actionable roadmap to post-scarcity and I highlight the role of automation and Universal Basic Income in the process. This analysis suggests that post-scarcity is within reach well inside the current century with current technologies, assuming a sustained progress in the field of artificial intelligence.    Disclaimer  Some people may find this writeup extremely controversial, as it touches on deeply ingrained concepts. There are entire nation states which base their constitution and economic policies on work. For instance the article 1 of Italy’s constitutions reads “Italy is a democratic republic, based on labour”. I ask you to suspend your judgement for a few minutes of reading and then take your own conclusions.  Defining Post-Scarcity  Let’s start by defining our end goal: a post-scarcity society can be defined as a society in which all the basic needs of the population are met and provided for free. By basic I mean things like food, utilities, clothing, healthcare, education and access to knowledge, basic transportation, internet and housing. The access to these resources should be unconditional, that is nothing particular should be demanded to a citizen. For instance, a modest citizen may decide to spend the entirety of his time in leisure activities. Citizens     “… must be free concretely: free from material want, from toil, from the burden of devoting the greater part of their time—indeed, the greater part of their lives—to the struggle with necessity.”   (M. Bookchin, Post-scarcity anarchism)  In summary, all their basic needs are met, but luxuries remain scarce.  Some authors use the term post-scarcity to actually refer to a society in which also the access to today’s luxuries is unconditional (and sometimes unlimited), so the subject of this writeup should be perhaps dubbed  “post basic-scarcity”, but I will stick with post-scarcity for simplicity and also because I personally see it as the more meaningful milestone.  I will not spend much time argumenting why scarcity is undesirable. It suffices to say that scarcity encourages tribalism, from the individual to the nation-sized scale, since somebody is going to be worse off, so better not to be us. Scarcity is the powering force behind wars, crime, bureaucracy and the constant mental and physical struggle to achieve, and then not to lose, financial stability.  On What’s really scarce  A common belief is that lack of resources is hindering a post-scarcity society. There isn’t enough for everybody all the time, so we need to ration our resources and keep working to make sure our economy is growing. Indeed  “current economic theory is derived in large part from the concept of relative scarcity which states that goods are scarce because there are not enough resources to produce all the goods that people want to consume”. It is in this framework that futuristic solutions to go beyond resource scarcity have been envisioned, including advancement in nanotechnology, self-replicating machines, 3d printing and asteroid mining.  Now I’m going to state something which may either hit you as a profound insight or as an obviousness. Basic resources are not scarce per se, what’s limited is the ability to transform them and make them usable. The fact that we need a human to perform the job is what creates scarcity. This is worth repeating and if you could get a single takeaway from this writeup, let it be this one:  We are already past resource scarcity, but we need people working to keep everything going. So the real scarce resource is humans. Human dexterity, human rationality, human creativity, human sensitivity.  In the remainder of this chapter I’m going to explain more in detail the above statement.  The past century brought unprecedented technological advancements, which resulted in our ability to easily fulfill all our basic needs. It has never been easier and more efficient to build a house, harvest a field, purify water, spread knowledge, communicate, build infrastructure, get access to medical treatment. Unfortunately this ability is only theoretical, since our economies need to enforce a sort of artificial scarcity to the population. Here’s what I mean: suppose that a rich country has enough wealth and resources to provide all the basic needs to their citizens. Can it actually provide these services for free? No, otherwise it would collapse in a few weeks. Indeed why would anybody be interested in being a professional farmer, waste collector or line cook? People could instead be comfortable staying in a job search period lasting years or not search for a job at all.  Currently we need a mechanism to force people to do unpleasant jobs, since we need those services to function as a society. Such a mechanism, which we commonly refer as economy, has settled in an efficient and automated way to distribute access to resources, utilising money as a means of exchange and labour as gateway to access money.  About resource scarcity, it’s misleading to evaluate what is really scarce by simply looking at the current market price, which is factoring in all the direct and indirect current cost of human labour and the policies of artificial scarcity. A real scarce resource should be hard to obtain even if we really wanted to. So, we need to think by first principles, physics and chemistry, and evaluate what resources are really scarce.  Is energy really scarce?  Currently the entire world consumes about 165.000 TWh (Tera Watt per hour) which is a lot, but it just a tiny fraction of the energy we receive daily from the sun, which is about 174000 * 0.7 * 3600 TWh = 430.000.000 TWh. On top of this there is all the energy stored inside our planet and atmosphere, which has been subjected for billions of years to the sun’s energy transfer.  Are chemical elements really scarce?  Let’s pick gold, an element which is notoriously considered rare. The total gold mined in all human history is 200.000 metric tons. But if we look at the abundance of elements on earth, even though the mass fraction of gold is just 0.16 part per million, knowing earth’s mass we can estimate the total gold on earth to be about $5.98&amp;#215;10^{24}$ kg * $10^{-6}$ * 0.16 = $10^{15}$ metric tons. If we only consider earth’s crust, that’s about 100 times less, which is still a huge number.  Is food really scarce? No, as it can be obtained by a mix of energy and chemical elements. More pragmatically, it is estimated that ⅓ of all food produced globally is lost or goes to waste.  Is land really scarce? In a sense yes, meaning that we pretty much colonised the whole planet’s surface. But concretely the world population density is just about 50 people per km2, and there is no significant barrier to fulfill the basic needs of a post-scarcity society, such as abundant housing. Perhaps one day owning 10 houses will be considered average.  Is time really scarce? Yes it is. There is no practical way of borrowing extra time to solve earth problems, apart from parallelising our efforts. Since not all problems are parallelizable, choosing how we allocate our time will reflect on how fast we will move to a post-scarcity society.  Regarding the environmental impact on our planet, even though it is a pressing issue and we need to work to mitigate damages, it is not the core reason for why we are not a post scarcity civilization. In fact in a post-scarcity society it will be easier to agree to global scale agreements to factor in the environmental cost of every act of production, as many people will be allowed to focus full time on solving these issues.  All in all, what’s really scarce are human abilities. Our dexterity which allows us to perform manual tasks such as cooking and cleaning, our rationality for tasks such as driving and tidying up a messy house, our creativity to write software and designs, our sensitivity to interact with other people and understand their needs. Differently to energy, food and materials, even if we wanted to, there is no current way to obtain more of these abilities, apart from the slow process of increasing the overall population. If we could automate the professions involved in providing the basic needs to our society, we would remove the biggest bottleneck to becoming a post-scarcity society. As an example, we could generate clean energy from wind turbines installed by robots, manufactured and transported by robots following AI generated designs and starting from raw materials extracted by robots. No humans would be involved in the loop, apart from robot maintenance, making it a net positive for humanity.  A Roadmap To Post-Scarcity  As I hinted, automation is going to be the main driving force behind a post-scarcity society.  The tricky part is how to get there without making any party significantly worse-off in the process and making sure that the benefits of automation are distributed to the whole society. Here I’m going to propose a high-level roadmap to post-scarcity which tries to minimise the negative short term effects of widespread and systematic automation. The aim is not to be perfect, it’s to start discussing and planning about these issues. The roadmap is built as an algorithm, to be followed by nation states.          Step 0: Agree on a set of basic needs. For instance food, utilities, clothing, healthcare, education and access to knowledge, basic transportation, internet and housing. Offering these services for free unconditionally to any citizen is the goal.           Step 1: Automate a basic industry, that is an industry involved in the basic needs. For instance tomato-picking or meal-assembly. Relocate the workers to jobs in which humans have a competitive edge (e.g. involving human relations) and encourage the creation of new jobs which were not financially feasible before, e.g. deep environmental cleaning and social services.           Step 2: Redistribute part of the efficiency gained as Universal Basic Income (UBI), on top of the falling cost of the basic needs automated.           Step 3: Repeat steps 1-2 until all basics are automated.           Step 4: Repeat steps 0-3 with non-basic needs (for instance a new need could be to own a mobile computer or a personal vehicle), but in step 2, instead of distributing more UBI, pick a basic need and subsidize part of its cost. Do this until all basic needs are provided for free and post-scarcity is reached. Notice how here the automation of some non-basic needs is financing the gratuity of basic needs.           Step 5: (optional, will likely require futuristic tech) Repeat 4 multiple times with new non-basic needs everytime.      The core of this strategy is to smoothly transition from the current economic system to a UBI enhanced system and then to a post-scarce system.  Even though we already automated entire industries in the past, there was never a strategy behind how to do it and the relocation of displaced workers has been left to the market. This time is different, since the displacement may be massive. Step 1 of this roadmap will be bootstrapped by the current generation of entrepreneurs and engineers, before step 0 has taken place. As these players will operate by the rules of current economies, they will need to justify automation with short term gains in productivity and cost. The low hanging fruit is automating human dexterity, that is manual tasks.  Eventually automation will be too widespread to be ignored and nations will be forced to consider step 2 and to regulate step 1 (e.g. Andrew Yang has already addressed some of these topics in the US presidential elections. This will be a crucial turning point, in which nations will decide if high unemployment is a feature or bug.  An in depth study of UBI would deserve an article on its own, as there is no consensus of which form of UBI would make more sense. Here I will limit to a quick introduction and I will neglect open problems like immigration between countries with different UBI models or different levels of UBI implementation.  UBI in its basic form is distributing a fixed amount of currency to every citizen at regular intervals (say monthly), without distinctions or paperwork required. It’s literally free money with no strings attached, which avoids the paradoxes of the poverty trap. As step 2 is enforced, the monthly UBI would at first be just some spare pocket change which only impacts the very poors, but it would quickly start adding up for numerous families.  As step 3 is completed all the basic needs will be quite inexpensive and UBI should be impactful for young couples. Let’s do a ballpark calculation, looking at the US, in a case in which all the heavy manual jobs have been automated.  The number of heavy jobs is about 15M of the 330M US population, with an average annual wage of 40.000 USD. If we assume that the net efficiency gained by automating these jobs is 50%, that would equate to 0.5 * 40.000 * 15M / 330M,  which is about 75 USD per month per citisen which could be distributed as UBI by the government. If we include the other manual or basic needs the actual figure is about 5x this amount, so 750 USD per month for a couple.  These amounts are purely from efficiency gains due to automation, but a country may decide to top them up with additional income to quickly reach relevant quality-of-life baselines. To be clear, I believe none of UBI money should come from direct taxation of robots or autonomous entities, since this would slow down the momentum to automate.  Up to this point the economic system is still pretty similar to the current one, but with a UBI on top; the majority of individuals are still required to be proactive in looking for jobs, as UBI and technological deflation would not be enough to live jobless.  As step 4 unfolds, the era of post-scarcity begins. As the tropical forest thrives with abundant sun and rain, we will see a complexity explosion in our society, from sport and art to exploration and fundamental science.  Would post-scarcity be the end of liberalism or capitalism? I believe the answer will be no to both, with some caveats for capitalism. Indeed the above is simply a recipe for governments to implement efficient automation-based social policies still in the context of a liberal economy. Some ad-hoc limitations should be introduced to monopolistic companies and cartels which makes it difficult to maintain a post-scarcity status for instance by inflating the cost of automation. The core change is that part of the population may simply decide to opt-out from capitalistic dynamics, being happy with a basic standard of living, while the rest of the population keeps producing and consuming, having luxuries and status as main desiderata. In a sense, luxury-capitalism is what’s left. What percentage of the population will choose to opt-out completely  is an interesting question. I believe it will actually be a small number, mainly intellectuals and artists not interested in any kind of compensation or luxury.  Putting the futurist’s hat on and looking further, we can imagine that step 5 societies could be left with status-capitalism, while a virtual reality based society could eliminate the concept of scarcity, and therefore economy, at any level.  What concretely separates us from completing step 4?  In my view, we need the complete automation of human dexterity, the automation of a large part of human rationality, a small part of human creativity and, crucially, we need the willingness to automate.  Automating the human dexterity needed for our basic needs is mainly a hardware and control challenge. Today robots struggle with manipulation, locomotion and quick dexterous movements. Looking at the progress of the last 50 years in robotic hardware and the decrease in computing cost, I honestly cannot think of any dexterous tasks which will not be able to be automated in half a century. Moreover when complete automation is embraced as an economic strategy it will make sense to start building environments entirely around robots, which would require only minimal dexterity. This is already happening when the economics are favorable: instead of robots helping in picking objects in a regular warehouse, just build a warehouse for robots:      Basic human rationality has been automated for decades, but lately the range of applications exploded thanks to deep learning techniques, in particular applied to computer vision tasks. Again, if we are just talking about automating basic needs and environments that can be shaped to help robots, it’s hard to find tasks which cannot be broken down into simple steps and solved by deep neural networks trained on gigantic datasets. And the cost of training neural networks is going down fast. Today AI systems can already do nearly everything, but struggle to overcome edge cases, that is those individually unlikely scenarios which are nevertheless common in terms of aggregate occurrences. Assuming that in a few decades we will have a cheap “narrow AI” for basically everything and cheap sensors everywhere, multiple redundant checks could take care of edge cases, without the need for general artificial intelligence. For instance self driving would be easily solved if sensors were everywhere on the road.  Of course there is a lot of work to do here, with large amounts of data to be collected, cleaned and fine-tuned on robots and workplaces. What’s also huge though is the incentive, that is the payoff for the companies offering these automation services.  The last technical ingredient is automating human creativity in software development and in machine learning workflows, including the collection of datasets, the training and fine tuning of deep neural networks. This step is not strictly required, but it would eliminate the developers bottleneck. Recently there has been a lot of progress in the space, with projects like openAI codex and approaches like autoML. As software iterates fast, it’s likely that in a few decades of iterations writing software will be a highly automated activity.  On a long term horizon, assuming a sustained (but not singular or accelerating) advancement in artificial intelligence, the main obstacle appears to be ideological, not technological. Infact, I believe we can be as optimistic as saying that we are only 20-30 years away from post-scarcity from a purely tech perspective. But how far away are we from post-scarcity overall? I believe about 60-70 years, mainly due to generational change and the need for infrastructure changes: automation and UBI are still not widespread ideas, but they will be when the 2021 newborns reach young adulthood. As that generation gathers influence it will start reshaping industries and society, and their children will be the first to live in a post-scarcity economy.  What can we do as individuals to accelerate the transaction to post-scarcity?  As regular citizens we should demand more attention to these topics from our representatives and advocate for more automation, combined with distribution of its benefits, for instance with a UBI. The current political systems are often driven by the equation jobs = votes, so politicians are incentivized to create more jobs to be elected, regardless of whether those jobs are needed and sustainable for the society as a whole. UBI implemented right could have the side effect of better aligning the long term interests of society and politicians.  If you have the necessary skills there is a lot to do to improve automation and our understanding of the best way to redistribute automation’s benefits: contribute to open source projects, build or join a company in the space, perform UBI test studies and many more.  If you are just starting in tech, consider careers such as robotic engineer, automation engineer, artificial intelligence and machine learning engineer, computer vision engineer. All these roles will be increasingly needed in the near future.  Revolutionary ideas are unstoppable, and a post-scarcity society is definitely a revolutionary idea. I find pleasure in thinking that every time these ideas are shared and understood, we are all one step closer to making them real.  Acknowledgements and Onwards  Many thanks to Antonio Caccese, Cristian Duguet and Suchit Sharma for comments on an early version of this writeup.  At some point, I plan to cover in more detail the pros and cons of different UBI models. In a separate blog post I would also like to discuss about life purpose, lifestyles and money in a post-scarcity society.</description>
      <author> (Lorenzo Pieri)</author>
      <guid>https://lorenzopieri.com/post_scarcity/</guid>
      <pubDate>Fri, 29 Oct 2021 23:02:36 GMT</pubDate>
    </item>
    <item>
      <title>Announcing my Scratch Terraform provider</title>
      <link>https://brendanthompson.com/posts/2021/10/announcing-my-terraform-scratch-provider</link>
      <description>Developing `for` and `for_each` loops in Terraform using my new provider terraform-provider-scratch, which easily allows for testing how your configuration interacts with the loops.</description>
      <author> (https://brendanthompson.com)</author>
      <guid>https://brendanthompson.com/posts/2021/10/announcing-my-terraform-scratch-provider</guid>
      <pubDate>Fri, 29 Oct 2021 23:02:34 GMT</pubDate>
    </item>
    <item>
      <title>Develop Mastery by Revisiting the Basics</title>
      <link>https://jarango.com/2021/10/23/develop-mastery-by-revisiting-the-basics/</link>
      <description>When you’re learning a complex system, you can miss essential concepts. After a while, revisiting the basics can deepen your mastery.</description>
      <author> (jarango)</author>
      <guid>https://jarango.com/2021/10/23/develop-mastery-by-revisiting-the-basics/</guid>
      <pubDate>Fri, 29 Oct 2021 23:02:34 GMT</pubDate>
    </item>
    <item>
      <title>Don&amp;#39;t rush to solutions</title>
      <link>https://blog.abhi.se/dont-rush-to-solutions</link>
      <description>Recently, someone asked me to help them design a workflow. Now I&amp;#39;ve been doing this a while - and I had, not long before this conversatio...</description>
      <author> (abhi&amp;#39;s blog)</author>
      <guid>https://blog.abhi.se/dont-rush-to-solutions</guid>
      <pubDate>Fri, 29 Oct 2021 23:02:34 GMT</pubDate>
    </item>
    <item>
      <title>Crawling Shopify application ratings</title>
      <link>https://ptrlaszlo.com/posts/shopify-application-ratings</link>
      <description>Crawling Shopify application ratings, written on 29.10.2021</description>
      <author> ()</author>
      <guid>https://ptrlaszlo.com/posts/shopify-application-ratings</guid>
      <pubDate>Fri, 29 Oct 2021 23:02:33 GMT</pubDate>
    </item>
    <item>
      <title>Mistakes from 6 months of freelancing</title>
      <link>https://mcarter.me/posts/mistakes-from-6-months-of-freelancing</link>
      <description>I started working as a freelance development consultant in April 2021. 6 months and almost &amp;#163;50,000 later, here are a few of my biggest mistakes.</description>
      <author> (Mike Carter)</author>
      <guid>https://mcarter.me/posts/mistakes-from-6-months-of-freelancing</guid>
      <pubDate>Fri, 29 Oct 2021 23:02:33 GMT</pubDate>
    </item>
    <item>
      <title>Pipelines - Runs for runtime</title>
      <link>https://dev.azure.com/dnceng/public/_build?definitionId=686</link>
      <description>#20211029.42 disable sending NT Authority in TLS handshake if specific trust was specified</description>
      <author> ()</author>
      <guid>https://dev.azure.com/dnceng/public/_build?definitionId=686</guid>
      <pubDate>Fri, 29 Oct 2021 22:02:25 GMT</pubDate>
    </item>
    <item>
      <title>Handshake Encryption: Endgame (an ECH update)</title>
      <link>https://blog.cloudflare.com/handshake-encryption-endgame-an-ech-update/</link>
      <description>In this post, we’ll dig into ECH details and describe what this protocol does to move the needle to help build a better Internet.</description>
      <author> (Christopher Wood)</author>
      <guid>https://blog.cloudflare.com/handshake-encryption-endgame-an-ech-update/</guid>
      <pubDate>Fri, 29 Oct 2021 22:02:19 GMT</pubDate>
    </item>
    <item>
      <title>Grand jury subpoena for Signal user data, Central District of California (again!)</title>
      <link>https://signal.org/bigbrother/cd-california-grand-jury/</link>
      <description>Signal still knows nothing about you, but inexplicably the government continues to ask.</description>
      <author> ()</author>
      <guid>https://signal.org/bigbrother/cd-california-grand-jury/</guid>
      <pubDate>Fri, 29 Oct 2021 21:02:05 GMT</pubDate>
    </item>
    <item>
      <title>High throughput Fizz Buzz</title>
      <link>https://codegolf.stackexchange.com/questions/215216/high-throughput-fizz-buzz</link>
      <description>Fizz Buzz is a common challenge given during interviews. The challenge goes something like this:

Write a program that prints the numbers from 1 to n. If a number is
divisible by 3, write Fizz inst...</description>
      <author> (Omer Tuchfeld)</author>
      <guid>https://codegolf.stackexchange.com/questions/215216/high-throughput-fizz-buzz</guid>
      <pubDate>Fri, 29 Oct 2021 20:02:10 GMT</pubDate>
    </item>
    <item>
      <title>Languages &amp;amp; Runtime Community Standup - Interview with Runtime Architect Jan Kotas</title>
      <link>https://www.youtube.com/watch?v=FWbMTXl46tQ</link>
      <description>&amp;#128587;‍♀️&amp;#128587;‍♂️ Get your questions answered on the Microsoft Q&amp;amp;A for .NET: https://aka.ms/dotnet-qa&amp;#127979; Learn C#, F#, and .NET with free self-guided learning from M...</description>
      <author> (dotNET
  
  
  
    dotNET
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=FWbMTXl46tQ</guid>
      <pubDate>Fri, 29 Oct 2021 20:02:10 GMT</pubDate>
    </item>
    <item>
      <title>r/livesound - Headset microphone picking up radio: a uniquely frustrating problem</title>
      <link>https://www.reddit.com/r/livesound/comments/5o2ike/headset_microphone_picking_up_radio_a_uniquely/</link>
      <description>7 votes and 6 comments so far on Reddit</description>
      <author> ()</author>
      <guid>https://www.reddit.com/r/livesound/comments/5o2ike/headset_microphone_picking_up_radio_a_uniquely/</guid>
      <pubDate>Fri, 29 Oct 2021 17:02:24 GMT</pubDate>
    </item>
    <item>
      <title>Oculus Quest is Getting Rid of Facebook Account Requirement</title>
      <link>https://gamerant.com/oculus-quest-facebook-account-requirement-removed/</link>
      <description>Oculus is removing the Facebook account requirement for Quest devices a year after its announcement.</description>
      <author> (By Cameron Corliss)</author>
      <guid>https://gamerant.com/oculus-quest-facebook-account-requirement-removed/</guid>
      <pubDate>Fri, 29 Oct 2021 17:02:21 GMT</pubDate>
    </item>
    <item>
      <title>BRAND NEW VS Code Theme for Halloween - It&amp;#39;s Spoooooky</title>
      <link>https://www.youtube.com/watch?v=tqd3O5RpAHQ</link>
      <description>Hot new VS Code Theme for Halloween.Spooky Scary Color Theme - https://marketplace.visualstudio.com/items?itemName=rothecoder.spooky-scary-color-themeRo on T...</description>
      <author> (James Q Quick
  
  
  
    James Q Quick
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=tqd3O5RpAHQ</guid>
      <pubDate>Fri, 29 Oct 2021 16:02:18 GMT</pubDate>
    </item>
    <item>
      <title>Photography: Tie-dye</title>
      <link>https://davidmccarter.wordpress.com/2021/09/29/photography-tie-dye/</link>
      <description>I took this photo that I call “Tie-dye” when I went to the Del Mar fair in 2008! Due to the climate in San Diego, there are always flowers blooming!</description>
      <author> (Published by dotNetDave
		

		
			I live in San Diego, Ca USA			
				View all posts by dotNetDave)</author>
      <guid>https://davidmccarter.wordpress.com/2021/09/29/photography-tie-dye/</guid>
      <pubDate>Fri, 29 Oct 2021 16:02:17 GMT</pubDate>
    </item>
    <item>
      <title>Pragmatic BDD with RavenDB</title>
      <link>https://ayende.com/blog/195169-B/pragmatic-bdd-with-ravendb?Key=167c504a-e2a0-467e-a18d-7459c5f0479d</link>
      <description>For most developers, Behavior Driven Development is a synonym for Given-When-Then syntax and Cucumber-like frameworks that are supporting it. In this session...</description>
      <author> ()</author>
      <guid>https://ayende.com/blog/195169-B/pragmatic-bdd-with-ravendb?Key=167c504a-e2a0-467e-a18d-7459c5f0479d</guid>
      <pubDate>Fri, 29 Oct 2021 15:02:14 GMT</pubDate>
    </item>
    <item>
      <title>Giving a single object multiple COM identities, part 4</title>
      <link>https://devblogs.microsoft.com/oldnewthing/20211029-00/?p=105859</link>
      <description>One major annoyance of the helper classes for giving a single object multiple COM identities is that you have to create this Method&amp;#173;Forwarder so that you can talk about methods of the derived class before they exist. But it turns out that you can avoid that by simply not having to name the functions at all!</description>
      <author> (Raymond Chen)</author>
      <guid>https://devblogs.microsoft.com/oldnewthing/20211029-00/?p=105859</guid>
      <pubDate>Fri, 29 Oct 2021 15:02:13 GMT</pubDate>
    </item>
    <item>
      <title>Code Maze Weekly #99 - Code Maze</title>
      <link>https://code-maze.com/code-maze-weekly-99/</link>
      <description>Issue #99 of the Code Maze weekly. Check out what’s new this week and enjoy the read. .NET and C# The Hot Reload Debacle [dotnetcoretutorials.com] There has been some drama regarding the hot reload functionality and dotnet watch this week. We think it’s important to know what happened so if you missed it somehow, read […]</description>
      <author> (()x)</author>
      <guid>https://code-maze.com/code-maze-weekly-99/</guid>
      <pubDate>Fri, 29 Oct 2021 13:02:09 GMT</pubDate>
    </item>
    <item>
      <title>4 common C# naming patterns you should know #Shorts</title>
      <link>https://www.youtube.com/watch?v=GQ01PpoqR_E</link>
      <description>There are some unwritten rules when it comes to naming in C#. Here are 4 of them.</description>
      <author> (Nick Chapsas
  
  
  
    Nick Chapsas
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=GQ01PpoqR_E</guid>
      <pubDate>Fri, 29 Oct 2021 13:02:08 GMT</pubDate>
    </item>
    <item>
      <title>Rockin’ The Code World with dotNetDave – Special Guest: J&amp;#233;r&amp;#244;me Laban</title>
      <link>https://dotnettips.wordpress.com/2021/07/19/rockin-the-code-world-with-dotnetdave-special-guest-jerome-laban/</link>
      <description>Join me live on Saturday, September 11th, 2021 at 10:00 PST on C# Corner Live for season 2 where I will interview J&amp;#233;r&amp;#244;me Laban, CTO, Uno Platform.</description>
      <author> (Published by dotNetDave
		

		
			I live in San Diego, Ca USA			
				View all posts by dotNetDave)</author>
      <guid>https://dotnettips.wordpress.com/2021/07/19/rockin-the-code-world-with-dotnetdave-special-guest-jerome-laban/</guid>
      <pubDate>Fri, 29 Oct 2021 13:02:07 GMT</pubDate>
    </item>
    <item>
      <title>The Staff Engineer&amp;#39;s Path</title>
      <link>https://www.oreilly.com/library/view/the-staff-engineers/9781098118723/</link>
      <description>For years, companies have rewarded their most effective engineers by suggesting they move to a management position. But treating management as the default — or only — path for an …  - Selection from The Staff Engineer&amp;#39;s Path [Book]</description>
      <author> (by Tanya Reilly)</author>
      <guid>https://www.oreilly.com/library/view/the-staff-engineers/9781098118723/</guid>
      <pubDate>Fri, 29 Oct 2021 13:02:07 GMT</pubDate>
    </item>
    <item>
      <title>New Acronym for FAANG after Facebook&amp;#39;s rename to &amp;quot;Meta&amp;quot; is MANGA | @techtalk | Ayedot</title>
      <link>https://ayedot.com/464/MiniBlog/New-Acronym-for-FAANG-after-Facebooks-rename-to-%22Meta%22-is-MANGA</link>
      <description>After Facebook has officially changed its name to Meta, FAANG is remaned to MANGA. </description>
      <author> (https://ayedot.com/319/Writer/techtalk)</author>
      <guid>https://ayedot.com/464/MiniBlog/New-Acronym-for-FAANG-after-Facebooks-rename-to-%22Meta%22-is-MANGA</guid>
      <pubDate>Fri, 29 Oct 2021 09:02:13 GMT</pubDate>
    </item>
    <item>
      <title>Collection Performance:  Adding Items to a Collection</title>
      <link>https://dotnettips.wordpress.com/2021/10/29/collection-performance-adding-items-to-a-collection/</link>
      <description>The most popular way to add an item to a collection is by using Add(). The other way is by using Insert()&amp;#160;or Prepend(). This article shows performance results for these three methods.</description>
      <author> (Published by dotNetDave
		

		
			I live in San Diego, Ca USA			
				View all posts by dotNetDave)</author>
      <guid>https://dotnettips.wordpress.com/2021/10/29/collection-performance-adding-items-to-a-collection/</guid>
      <pubDate>Fri, 29 Oct 2021 09:02:10 GMT</pubDate>
    </item>
    <item>
      <title>Everything That Every .NET Developer Needs to Know About Disposable Types: Properly Implementing the IDisposable Interface</title>
      <link>https://dotnettips.wordpress.com/2021/10/29/everything-that-every-net-developer-needs-to-know-about-disposable-types-properly-implementing-the-idisposable-interface/</link>
      <description>In this article, I will show the proper way to implement the IDisposable interface in types that you create that contain disposable fields. In addition, I will show how to implement the dispose pat…</description>
      <author> (Published by dotNetDave
		

		
			I live in San Diego, Ca USA			
				View all posts by dotNetDave)</author>
      <guid>https://dotnettips.wordpress.com/2021/10/29/everything-that-every-net-developer-needs-to-know-about-disposable-types-properly-implementing-the-idisposable-interface/</guid>
      <pubDate>Fri, 29 Oct 2021 09:02:10 GMT</pubDate>
    </item>
    <item>
      <title>Weekly Update 267</title>
      <link>https://www.youtube.com/watch?v=odDm5s-34kQ</link>
      <description>Office Works; Mounting Monitors; The R&amp;#216;DE VideoMic is Garbage; CoinMarketCap Breach; Pwned - The Book; IoT and 3D Printing Dramas</description>
      <author> (Troy Hunt
  
  
  
    Troy Hunt
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=odDm5s-34kQ</guid>
      <pubDate>Fri, 29 Oct 2021 07:02:12 GMT</pubDate>
    </item>
    <item>
      <title>Why You (Probably) Didn&amp;#39;t Get Lost in Metroid Dread</title>
      <link>https://www.youtube.com/watch?v=5pop-cc9kmY</link>
      <description>GMTK is powered by Patreon - https://www.patreon.com/GameMakersToolkitMetroid Dread is a Metroidvania with a sprawling, interconnected map. So how come I alw...</description>
      <author> (Bdog
  
  
  
    Bdog
  






    •
  
  
    
      31K views
    
      4 days ago)</author>
      <guid>https://www.youtube.com/watch?v=5pop-cc9kmY</guid>
      <pubDate>Fri, 29 Oct 2021 07:02:11 GMT</pubDate>
    </item>
    <item>
      <title>.NET App Developer Links - 2021-10-29</title>
      <link>https://links.danrigby.com/2021/10/app-developer-links-2021-10-29/</link>
      <description>The latest news and resources for .NET app developers.</description>
      <author> ()</author>
      <guid>https://links.danrigby.com/2021/10/app-developer-links-2021-10-29/</guid>
      <pubDate>Fri, 29 Oct 2021 07:02:09 GMT</pubDate>
    </item>
    <item>
      <title>File-Scoped Namespaces – A Look at New Language Features in C# 10 | The .NET Tools Blog</title>
      <link>https://blog.jetbrains.com/dotnet/2021/10/28/file-scoped-namespaces-in-csharp-10/</link>
      <description>Welcome to the first part of our series, where we take a closer look at the new C# language features the .NET team has implemented, and how ReSharper and Rider make it easy to adopt them in your codeb</description>
      <author> ()</author>
      <guid>https://blog.jetbrains.com/dotnet/2021/10/28/file-scoped-namespaces-in-csharp-10/</guid>
      <pubDate>Fri, 29 Oct 2021 06:02:24 GMT</pubDate>
    </item>
    <item>
      <title>Act-Verify: Building Bulletproof Functional Tests</title>
      <link>https://www.telerik.com/blogs/act-verify-proven-pattern-building-bulletproof-functional-tests</link>
      <description>Verifying that your application’s UI meets user expectations through automated end-to-end tests recorded in the browser requires adding functional verifications</description>
      <author> ()</author>
      <guid>https://www.telerik.com/blogs/act-verify-proven-pattern-building-bulletproof-functional-tests</guid>
      <pubDate>Fri, 29 Oct 2021 06:02:22 GMT</pubDate>
    </item>
    <item>
      <title>Edge DevTools for Visual Studio Code 1.4.0 – Improved Screencasting, Device Emulation and live, inline issue reporting</title>
      <link>https://christianheilmann.com/2021/10/28/edge-devtools-for-visual-studio-code-1-4-0-improved-screencasting-device-emulation-and-live-inline-issue-reporting/</link>
      <description>The 1.4.0 release of the Microsoft Tools for Visual Studio Code brings a few highly requested features. We improved the screencasting feature, added device emulation and live issue reporting in your source code. You can check the 3 minute highlight reel here .</description>
      <author> ()</author>
      <guid>https://christianheilmann.com/2021/10/28/edge-devtools-for-visual-studio-code-1-4-0-improved-screencasting-device-emulation-and-live-inline-issue-reporting/</guid>
      <pubDate>Fri, 29 Oct 2021 06:02:21 GMT</pubDate>
    </item>
    <item>
      <title>Type | Treat 2021 – Day 4</title>
      <link>https://devblogs.microsoft.com/typescript/type-treat-2021-day-4/</link>
      <description>Type | Treat Challenge 4 Welcome to the fourth Type | Treat challenge! These challenges are a series of blog posts which have 2 code challenges in, one for beginners and one for intermediate TypeScript programmers. We’re on day four, which means going over the answers from yesterday and have 2 new challenges.</description>
      <author> (Orta Therox)</author>
      <guid>https://devblogs.microsoft.com/typescript/type-treat-2021-day-4/</guid>
      <pubDate>Fri, 29 Oct 2021 06:02:21 GMT</pubDate>
    </item>
    <item>
      <title>The Case Of A Stuck LoadLibrary Call</title>
      <link>https://aloiskraus.wordpress.com/2021/10/28/the-case-of-a-stuck-loadlibrary-call/</link>
      <description>I frequently encounter impossible bugs which after full analysis have a reasonable explanation although I have not source code to the problematic library. Todays fault is featured by …. suspe…</description>
      <author> (akraus1)</author>
      <guid>https://aloiskraus.wordpress.com/2021/10/28/the-case-of-a-stuck-loadlibrary-call/</guid>
      <pubDate>Fri, 29 Oct 2021 06:02:20 GMT</pubDate>
    </item>
  </channel>
</rss>