<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>Angular Server Side Rendering on Azure Static Web Apps</title>
      <link>https://dotnetthoughts.net/angular-server-side-rendering-azure-static-webapps/</link>
      <description>This post is about how implement Angular Server side rendering apps on Azure Static Web Apps. What is server-side rendering - A normal Angular application executes within the browser, rendering pages within the DOM in response to user actions. Angular Universal executes on the server, generating static application pages that later get bootstrapped on the consumer. This implies that the appliance usually renders additional quickly, giving users an opportunity to look at the appliance layout before it becomes totally interactive.</description>
      <author> (Anuraj)</author>
      <guid>https://dotnetthoughts.net/angular-server-side-rendering-azure-static-webapps/</guid>
      <pubDate>Sun, 13 Feb 2022 11:03:06 GMT</pubDate>
    </item>
    <item>
      <title>.NET 6 Web API on Lambda with a Custom Runtime | no dogma blog</title>
      <link>https://nodogmablog.bryanhogan.net/2022/02/net-6-web-api-on-lambda-with-custom-a-runtime</link>
      <description>It&amp;#39;s easy to run a .NET 6 Web API application on Lambda using the custom runtime option, this post explains how, and gives the CLI commands to have it up and running in a few minutes.</description>
      <author> ()</author>
      <guid>https://nodogmablog.bryanhogan.net/2022/02/net-6-web-api-on-lambda-with-custom-a-runtime</guid>
      <pubDate>Sun, 13 Feb 2022 09:03:13 GMT</pubDate>
    </item>
    <item>
      <title>Add support for Windows IO completions to the portable thread pool by kouvel &amp;#183; Pull Request #64834 &amp;#183; dotnet/runtime</title>
      <link>https://github.com/dotnet/runtime/pull/64834</link>
      <description>Added an implementation for BindHandle
Polling for IO completions is done in batches on separate threads similarly to what is done on Unixes
Added a high-priority work item queue to have IO complet...</description>
      <author> (dotnet)</author>
      <guid>https://github.com/dotnet/runtime/pull/64834</guid>
      <pubDate>Sun, 13 Feb 2022 08:04:36 GMT</pubDate>
    </item>
    <item>
      <title>Add support for Windows IO completions to the portable thread pool by kouvel &amp;#183; Pull Request #64834 &amp;#183; dotnet/runtime</title>
      <link>https://github.com/dotnet/runtime/pull/64834#issuecomment-1030418098</link>
      <description>Added an implementation for BindHandle
Polling for IO completions is done in batches on separate threads similarly to what is done on Unixes
Added a high-priority work item queue to have IO complet...</description>
      <author> (dotnet)</author>
      <guid>https://github.com/dotnet/runtime/pull/64834#issuecomment-1030418098</guid>
      <pubDate>Sun, 13 Feb 2022 08:04:36 GMT</pubDate>
    </item>
    <item>
      <title>Piped</title>
      <link>https://youtube.censors.us/Fz4hViH5bGc</link>
      <description>An alternative privacy-friendly YouTube frontend which is efficient by design.</description>
      <author> ()</author>
      <guid>https://youtube.censors.us/Fz4hViH5bGc</guid>
      <pubDate>Sun, 13 Feb 2022 05:03:06 GMT</pubDate>
    </item>
    <item>
      <title>Weekly Update 282</title>
      <link>https://www.youtube.com/watch?v=0VwrYiVWR64</link>
      <description>My New Focusrite DAC; Early Workshops; Digicert EV Bullshit; TripIt Wants Your DoB; Travelling and Speaking Again</description>
      <author> (Troy Hunt
  
  
  
    Troy Hunt
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=0VwrYiVWR64</guid>
      <pubDate>Sun, 13 Feb 2022 02:02:52 GMT</pubDate>
    </item>
    <item>
      <title>Interview question &amp;quot;When we use async/await, how does the main thread know when the awaitable task has finished (under the hood)&amp;quot;</title>
      <link>https://old.reddit.com/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/</link>
      <description>I have this question on a list to prepare for and I can&amp;#39;t think of an answer or search for one. Does anyone have any ideas how they&amp;#39;d go about...</description>
      <author> (AttentiveUnicorn)</author>
      <guid>https://old.reddit.com/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/</guid>
      <pubDate>Sun, 13 Feb 2022 01:02:01 GMT</pubDate>
    </item>
    <item>
      <title>Manton Reece - Moving away from App Store-focused development</title>
      <link>https://www.manton.org/2022/02/09/moving-away-from.html</link>
      <description>A few things are happening at once that together are putting some clarity on the direction we should have for Micro.blog development:</description>
      <author> (Manton Reece)</author>
      <guid>https://www.manton.org/2022/02/09/moving-away-from.html</guid>
      <pubDate>Sun, 13 Feb 2022 00:02:46 GMT</pubDate>
    </item>
    <item>
      <title>Call to mediocrity</title>
      <link>https://nikofischer.com/call-to-mediocrity</link>
      <description>This is a call to mediocrity. Do things without intending to hit the big time. Do! Start! Don&amp;#39;t think about the output, but make the way to your goal. Yes: all too often you&amp;#39;ve set out to do it, and yet you&amp;#39;ve failed again and again to meet your standards. Every text, every website, every important email: you&amp;#39;ve twisted words, deleted sentences, and rewritten. Often enough you crumpled things up afterwards and threw them away. But how much didn&amp;#39;t get done in the first place?</description>
      <author> ()</author>
      <guid>https://nikofischer.com/call-to-mediocrity</guid>
      <pubDate>Sun, 13 Feb 2022 00:02:44 GMT</pubDate>
    </item>
    <item>
      <title>Interview question &amp;quot;When we use async/await, how does the main thread know when the awaitable task has finished (under the hood)&amp;quot; : dotnet</title>
      <link>https://teddit.pussthecat.org/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/</link>
      <description>I was one of the designers of the async/await language feature. I probably could not answer this question to the satisfaction of the interviewer, but that is likely because the interviewer has a specific answer in mind that pertains only to a specific scenario. That the question presupposes the existence of a &amp;quot;main thread&amp;quot; implies that there is a second thread involved; that&amp;#39;s common but by no means required or universal. I understand the feature primarily from the language design perspective, not from the behind-the-scenes low-level implementation details of the runtime.</description>
      <author> (Boogeyman_liberal)</author>
      <guid>https://teddit.pussthecat.org/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/</guid>
      <pubDate>Sun, 13 Feb 2022 00:02:44 GMT</pubDate>
    </item>
    <item>
      <title>Crypto Reading</title>
      <link>https://danromero.org/crypto-reading/</link>
      <description>A list of worthwhile posts about cryptocurrency.</description>
      <author> ()</author>
      <guid>https://danromero.org/crypto-reading/</guid>
      <pubDate>Sun, 13 Feb 2022 00:02:43 GMT</pubDate>
    </item>
    <item>
      <title>Dizzying but Invisible Depth</title>
      <link>https://josh.works/dizzying-but-invisible-depth</link>
      <description>tag(s):</description>
      <author> ()</author>
      <guid>https://josh.works/dizzying-but-invisible-depth</guid>
      <pubDate>Sun, 13 Feb 2022 00:02:43 GMT</pubDate>
    </item>
    <item>
      <title>Misadventures of an Early Engineer — Dylan Barth</title>
      <link>https://www.dylanbarth.com/blog/early-engineer/</link>
      <description>The red text beneath the login form read &amp;quot;Unexpected error.&amp;quot; I was looking over the shoulder of a support technician named Eric who had just tried logging in to our product for the first time. His cubicle looked identical to the other eighty or so scattered around the room except for the custom-built mechanical keyboard with unmarked keycaps and neon-backlight sitting on his desk. We&amp;#39;d been getting along great, but now he was looking back at me with an expression of betrayal on his face that told me exactly what he was thinking: “Please tell me you haven’t wasted my entire Saturday.”</description>
      <author> ()</author>
      <guid>https://www.dylanbarth.com/blog/early-engineer/</guid>
      <pubDate>Sun, 13 Feb 2022 00:02:43 GMT</pubDate>
    </item>
    <item>
      <title>David Nicholas Williams</title>
      <link>https://davnicwil.com/sticky-positions/</link>
      <description>In team sports, a common thing that happens is people get &amp;#39;set&amp;#39; in a certain position. This typically happens early on: when you first try the sport, join a team, and get put in a position for your first game.</description>
      <author> ()</author>
      <guid>https://davnicwil.com/sticky-positions/</guid>
      <pubDate>Sun, 13 Feb 2022 00:02:43 GMT</pubDate>
    </item>
    <item>
      <title>Bad hosts, or: how I&amp;#160;learned to stop worrying and love the overlay network</title>
      <link>https://www.robinsloan.com/lab/bad-hosts/</link>
      <description>Stymied by NAT.</description>
      <author> ()</author>
      <guid>https://www.robinsloan.com/lab/bad-hosts/</guid>
      <pubDate>Sun, 13 Feb 2022 00:02:43 GMT</pubDate>
    </item>
    <item>
      <title>jless - Command Line JSON Viewer</title>
      <link>https://pauljuliusmartinez.github.io/</link>
      <description>JLess is a command-line JSON viewer designed for reading, exploring, and searching through JSON data.</description>
      <author> ()</author>
      <guid>https://pauljuliusmartinez.github.io/</guid>
      <pubDate>Sun, 13 Feb 2022 00:02:43 GMT</pubDate>
    </item>
    <item>
      <title>DNS Security, Part VII: Blockchain-based Name Systems and Transparency</title>
      <link>https://educatedguesswork.org/posts/dns-security-blockchain2/</link>
      <description>Posted 2022-02-07</description>
      <author> ()</author>
      <guid>https://educatedguesswork.org/posts/dns-security-blockchain2/</guid>
      <pubDate>Sat, 12 Feb 2022 23:02:54 GMT</pubDate>
    </item>
    <item>
      <title>r/dotnet - Interview question &amp;quot;When we use async/await, how does the main thread know when the awaitable task has finished (under the hood)&amp;quot;</title>
      <link>https://www.reddit.com/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/</link>
      <description>65 votes and 52 comments so far on Reddit</description>
      <author> ()</author>
      <guid>https://www.reddit.com/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/</guid>
      <pubDate>Sat, 12 Feb 2022 22:03:07 GMT</pubDate>
    </item>
    <item>
      <title>Weekly Update 282</title>
      <link>https://youtu.be/0VwrYiVWR64</link>
      <description>My New Focusrite DAC; Early Workshops; Digicert EV Bullshit; TripIt Wants Your DoB; Travelling and Speaking Again</description>
      <author> (Troy Hunt
  
  
  
    Troy Hunt
  






    •)</author>
      <guid>https://youtu.be/0VwrYiVWR64</guid>
      <pubDate>Sat, 12 Feb 2022 20:04:09 GMT</pubDate>
    </item>
    <item>
      <title>WebGL 2.0 is Now Supported in All Major Browsers</title>
      <link>https://80.lv/articles/webgl-2-0-is-now-supported-in-all-major-browsers/</link>
      <description>From Firefox to Safari: all major browsers can now render graphics.</description>
      <author> (TagsNews)</author>
      <guid>https://80.lv/articles/webgl-2-0-is-now-supported-in-all-major-browsers/</guid>
      <pubDate>Sat, 12 Feb 2022 20:04:07 GMT</pubDate>
    </item>
    <item>
      <title>Amazon.com: SignalR on .NET 6 - the Complete Guide: The easiest way to enable real-time two-way HTTP communication on .NET 6 eBook : Sazanavets, Fiodar: Kindle Store</title>
      <link>https://www.amazon.com/SignalR-NET-Complete-real-time-communication-ebook/dp/B09PR8GST4/?tag=linksfordevs-20&amp;lfd=202202</link>
      <description>Amazon.com: SignalR on .NET 6 - the Complete Guide: The easiest way to enable real-time two-way HTTP communication on .NET 6 eBook : Sazanavets, Fiodar: Kindle Store</description>
      <author> (Share                            &amp;lt;Embed&amp;gt;)</author>
      <guid>https://www.amazon.com/SignalR-NET-Complete-real-time-communication-ebook/dp/B09PR8GST4/?tag=linksfordevs-20&amp;lfd=202202</guid>
      <pubDate>Sat, 12 Feb 2022 19:03:34 GMT</pubDate>
    </item>
    <item>
      <title>Languages &amp;amp; Runtime Community Standup - MSBuild with Rainer Sigwald</title>
      <link>https://youtu.be/Fz4hViH5bGc</link>
      <description>Join us in a chat with Rainer Sigwald about how MSBuild affects your work and how you can use it better. You&amp;#39;ll see a demo of effective use of the log viewer...</description>
      <author> (dotNET
  
  
  
    dotNET
  






    •)</author>
      <guid>https://youtu.be/Fz4hViH5bGc</guid>
      <pubDate>Sat, 12 Feb 2022 19:03:33 GMT</pubDate>
    </item>
    <item>
      <title>Interview question &amp;quot;When we use async/await, how does the main thread know when the awaitable task has finished (under the hood)&amp;quot; : dotnet</title>
      <link>https://teddit.net/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/</link>
      <description>I figured this is worth I shot. I knew some of this but figured I&amp;#39;d do some digging because I don&amp;#39;t know everything and why tf not? So with the help of the debugger in Rider and sharplab.io...here we go...</description>
      <author> (Boogeyman_liberal)</author>
      <guid>https://teddit.net/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/</guid>
      <pubDate>Sat, 12 Feb 2022 19:03:32 GMT</pubDate>
    </item>
    <item>
      <title>GitHub - blowdart/dotnetSigningWithKeyVaultCertificates: Demonstrating how to sign .net assemblies and nuget packages in azdo</title>
      <link>https://github.com/blowdart/dotnetSigningWithKeyVaultCertificates</link>
      <description>Demonstrating how to sign .net assemblies and nuget packages in azdo - GitHub - blowdart/dotnetSigningWithKeyVaultCertificates: Demonstrating how to sign .net assemblies and nuget packages in azdo</description>
      <author> (blowdart)</author>
      <guid>https://github.com/blowdart/dotnetSigningWithKeyVaultCertificates</guid>
      <pubDate>Sat, 12 Feb 2022 19:03:31 GMT</pubDate>
    </item>
    <item>
      <title>Server-Sent Events: the alternative to WebSockets you should be using</title>
      <link>https://germano.dev/sse-websockets/</link>
      <description>WebSockets are the most used technology for real-time web apps. However, Server Sent Events (SSE) are a simpler alternative that is often superior.
</description>
      <author> (Random thoughts
		TwitterGitHubKeybase)</author>
      <guid>https://germano.dev/sse-websockets/</guid>
      <pubDate>Sat, 12 Feb 2022 19:03:31 GMT</pubDate>
    </item>
    <item>
      <title>Calling Windows APIs from React Native just got easier &amp;#183; React Native for Windows + macOS</title>
      <link>https://microsoft.github.io/react-native-windows/blog/2022/02/11/rnwinrt</link>
      <description>We are excited to announce the [React Native WinRT](http://aka.ms/reactnativewinrt) project, a new extension that makes it easier for [React Native for Windows](https://microsoft.github.io/react-native-windows/) developers to call Windows Runtime APIs directly from JavaScript! With React Native WinRT, developers can light up experiences that take advantage of unique platform features on Windows. </description>
      <author> ()</author>
      <guid>https://microsoft.github.io/react-native-windows/blog/2022/02/11/rnwinrt</guid>
      <pubDate>Sat, 12 Feb 2022 19:03:30 GMT</pubDate>
    </item>
    <item>
      <title>React Native for Windows is helping Settings improve more quickly &amp;#183; React Native for Windows + macOS</title>
      <link>https://microsoft.github.io/react-native-windows/blog/2022/02/11/settings</link>
      <description>React Native isn’t just for mobile! Check out how the Windows 11 Settings app is leveraging React Native for Windows to deliver new features and capabilities to users faster and with the same great visual fidelity as Windows 11. </description>
      <author> ()</author>
      <guid>https://microsoft.github.io/react-native-windows/blog/2022/02/11/settings</guid>
      <pubDate>Sat, 12 Feb 2022 19:03:30 GMT</pubDate>
    </item>
    <item>
      <title>The Factorio Mindset</title>
      <link>https://www.thediff.co/p/the-factorio-mindset</link>
      <description>Plus! The Carbon Rally; The Bridge; Housing and Rates; Full Stack Media; Buying Out Contracts; Diff Jobs</description>
      <author> (Byrne Hobart)</author>
      <guid>https://www.thediff.co/p/the-factorio-mindset</guid>
      <pubDate>Sat, 12 Feb 2022 18:04:19 GMT</pubDate>
    </item>
    <item>
      <title>Let&amp;#39;s Make Some Art - Part 1</title>
      <link>https://hyr.mn/blog/lets-make-art-pt1/</link>
      <description>I saw a tweet from @James_M_South, creator of the amazing ImageSharp library where he mentioned there wasn&amp;#39;t a lot of public chatter about said library. Now, I know nothing about image processing or graphics. But, I&amp;#39;ve been wanting to learn more about creating Algorithmic Art, or Generative Art, for a while. And, James&amp;#39; tweet inspired me to dive in.</description>
      <author> ()</author>
      <guid>https://hyr.mn/blog/lets-make-art-pt1/</guid>
      <pubDate>Sat, 12 Feb 2022 18:04:17 GMT</pubDate>
    </item>
    <item>
      <title>Staking</title>
      <link>https://gazzini.com/projects/posts/stake/</link>
      <description>Last year, I raised $100k from friends to run fully-staked validator nodes on 3 different blockchains. We made $300k and learned a lot. Here’s the stuff I found interesting:
Inconsistent Rewards These networks weren’t designed explicitly to infuriate little node operators, but it can seem that way. This is a general problem with proof-of-stake blockchains:
 They incentivize computers to do useful things Because distributed state is hard, they pseudo-randomly elect a little group of computers at any given time to actually do the useful thing Therefore, the computers spend very little time doing the useful thing, so the earnings are sporadic  Every proof-of-stake system has this randomness in the earnings.</description>
      <author> (gazzini)</author>
      <guid>https://gazzini.com/projects/posts/stake/</guid>
      <pubDate>Sat, 12 Feb 2022 18:04:17 GMT</pubDate>
    </item>
    <item>
      <title>Creating Multiple Resources with a Single Request in ASP.NET Core</title>
      <link>https://code-maze.com/aspnetcore-creating-multiple-resources-with-single-request/</link>
      <description>Guided example of creating multiple resources with a POST request implemented with the ASP.NET 6 Minimal Web API.</description>
      <author> (()x)</author>
      <guid>https://code-maze.com/aspnetcore-creating-multiple-resources-with-single-request/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:27 GMT</pubDate>
    </item>
    <item>
      <title>Product Design Resources</title>
      <link>https://blog.awaxman.com/product-design-resources/</link>
      <description>Refine your product design taste and abilities.</description>
      <author> ()</author>
      <guid>https://blog.awaxman.com/product-design-resources/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:24 GMT</pubDate>
    </item>
    <item>
      <title>Melb.NET Feb 2022 ONLINE Meetup | Meetup</title>
      <link>https://www.meetup.com/Melb-NET-Meetup/events/283849331/</link>
      <description>Tue, 15 Feb, 6:30 pm AEDT: First event for 2022!

We will start the night by celebrating &amp;#127881; the 20th anniversary of .NET and have some prize giveaways. Then welcome our first speaker for the year Lac</description>
      <author> ()</author>
      <guid>https://www.meetup.com/Melb-NET-Meetup/events/283849331/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:24 GMT</pubDate>
    </item>
    <item>
      <title>Announcing TypeScript 4.6 RC - TypeScript</title>
      <link>https://devblogs.microsoft.com/typescript/announcing-typescript-4-6-rc/</link>
      <description>Today we’re excited to announce our Release Candidate (RC) of TypeScript 4.6! Between now and the stable release of TypeScript 4.6, we expect no further changes apart from critical bug fixes. To get started using the RC, you can get it&amp;#160;through NuGet,</description>
      <author> (Daniel Rosenwasser)</author>
      <guid>https://devblogs.microsoft.com/typescript/announcing-typescript-4-6-rc/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:23 GMT</pubDate>
    </item>
    <item>
      <title>A Rust match made in hell</title>
      <link>https://fasterthanli.me/articles/a-rust-match-made-in-hell</link>
      <description>I often write pieces that showcase how well Rust can work for you, and how it
can let you build powerful abstractions, and prevent you from a bunch of
mistakes. And that makes m...</description>
      <author> ()</author>
      <guid>https://fasterthanli.me/articles/a-rust-match-made-in-hell</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:22 GMT</pubDate>
    </item>
    <item>
      <title>.NET Rocks! vNext</title>
      <link>https://www.dotnetrocks.com/default.aspx</link>
      <description>.NET Rocks! is a weekly talk show for anyone interested in programming on the Microsoft .NET platform. The shows range from introductory information to hardcore geekiness.</description>
      <author> ()</author>
      <guid>https://www.dotnetrocks.com/default.aspx</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:22 GMT</pubDate>
    </item>
    <item>
      <title>Radar Interference Tracker: A New Open Source Tool to Locate Active Military Radar Systems - bellingcat</title>
      <link>https://www.bellingcat.com/resources/2022/02/11/radar-interference-tracker-a-new-open-source-tool-to-locate-active-military-radar-systems/</link>
      <description>Many military radars interfere with open source satellite imagery when they&amp;#39;re turned on. A new tool lets anyone monitor when and where these radars are deployed.</description>
      <author> ()</author>
      <guid>https://www.bellingcat.com/resources/2022/02/11/radar-interference-tracker-a-new-open-source-tool-to-locate-active-military-radar-systems/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:20 GMT</pubDate>
    </item>
    <item>
      <title>Startup Kama Sutra: Why positioning matters</title>
      <link>https://philipjoubert.com/positioning/</link>
      <description>I&amp;#39;ve been thinking a lot about positioning for the last few weeks. Not the kind of positioning you might associate with the Kama Sutra, but rather positioning in the sense of where a product stands in relation to others offering similar products. In particular, I&amp;#39;ve been thinking about why some</description>
      <author> ()</author>
      <guid>https://philipjoubert.com/positioning/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:20 GMT</pubDate>
    </item>
    <item>
      <title>On the Malleability of ECDSA Signatures</title>
      <link>https://cronokirby.com/posts/2022/01/on-the-malleability-of-ecdsa/</link>
      <description>- Read more: https://cronokirby.com/posts/2022/01/on-the-malleability-of-ecdsa/</description>
      <author> ()</author>
      <guid>https://cronokirby.com/posts/2022/01/on-the-malleability-of-ecdsa/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:19 GMT</pubDate>
    </item>
    <item>
      <title>Host your static 11ty site on Google Cloud</title>
      <link>https://hyr.mn/blog/eleventy-on-google-cloud/</link>
      <description>I am working on a fake product for a fake business. Of course, I need a marketing site for my fake app! It&amp;#39;s a static web site so I&amp;#39;m using my favorite site generator, 11ty. Of course, you could use the same approaches below with any static site generator or hand-rolled HTML. Many of the same steps apply.</description>
      <author> ()</author>
      <guid>https://hyr.mn/blog/eleventy-on-google-cloud/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:19 GMT</pubDate>
    </item>
    <item>
      <title>Steam Deck / Hardware</title>
      <link>https://gitlab.steamos.cloud/SteamDeck/hardware</link>
      <description>GitLab Enterprise Edition</description>
      <author> ()</author>
      <guid>https://gitlab.steamos.cloud/SteamDeck/hardware</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:19 GMT</pubDate>
    </item>
    <item>
      <title>Latest Beeping Busy Beaver Results</title>
      <link>https://nickdrozd.github.io/2022/02/11/latest-beeping-busy-beaver-results.html</link>
      <description>The Busy Beaver question asks: what is the longest that a Turing machine program of n states and k colors can run when started on the blank tape before halting? The function that maps from (n, k) to the longest run length is uncomputable and grows faster than any computable function.</description>
      <author> ()</author>
      <guid>https://nickdrozd.github.io/2022/02/11/latest-beeping-busy-beaver-results.html</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:19 GMT</pubDate>
    </item>
    <item>
      <title>The case for time-tracking</title>
      <link>https://domgoodw.in/post/case-for-timetracking/</link>
      <description>Time tracking has a bad reputation, it invokes images of managers watching over your shoulder or pay being docked as you punched in minutes before your shift ended. Due to these, and many more, if you suggest to someone to start tracking their time they’re likely to look at you like you’ve gone mad.
</description>
      <author> ()</author>
      <guid>https://domgoodw.in/post/case-for-timetracking/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:19 GMT</pubDate>
    </item>
    <item>
      <title>In Praise of &amp;#39;Line Goes Up&amp;#39;</title>
      <link>https://www.stephendiehl.com/blog/line.html</link>
      <description>Personal Blog</description>
      <author> (Stephen Diehl)</author>
      <guid>https://www.stephendiehl.com/blog/line.html</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:19 GMT</pubDate>
    </item>
    <item>
      <title>A nice story about Unix processes &amp;quot;infecting&amp;quot; each other</title>
      <link>http://rachelbythebay.com/w/2022/02/09/nice/</link>
      <description>I once worked at a place that had an interesting little problem stemming 
from the way they managed machines and some of the fun side-effects 
processes can have on each other.  This is back in the pre-systemd days 
of running services, such that things tended to be started or restarted 
by someone or something that itself ran as root.  That is, if you 
started something, it might inherit one or more things from your 
environment.  Likewise, if you ran something with an unusual 
environment, it might bestow those &amp;quot;gifts&amp;quot; onto anything it happened to 
touch.</description>
      <author> ()</author>
      <guid>http://rachelbythebay.com/w/2022/02/09/nice/</guid>
      <pubDate>Sat, 12 Feb 2022 18:03:18 GMT</pubDate>
    </item>
  </channel>
</rss>