<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>GitHub - Jaennaet/pISSStream: macOS menu bar app that shows how full the International Space Station&amp;#39;s urine tank is in real time</title>
      <link>https://github.com/Jaennaet/pISSStream</link>
      <description>macOS menu bar app that shows how full the International Space Station&amp;#39;s urine tank is in real time - Jaennaet/pISSStream</description>
      <author> ()</author>
      <guid>https://github.com/Jaennaet/pISSStream</guid>
      <pubDate>Wed, 25 Dec 2024 01:01:29 GMT</pubDate>
    </item>
    <item>
      <title>Jujutsu Megamerges and jj absorb — Sympolymathesy, by Chris Krycho</title>
      <link>https://v5.chriskrycho.com/journal/jujutsu-megamerges-and-jj-absorb/</link>
      <description>A really handy approach for splitting apart changes into multiple branches but working on their combination.</description>
      <author> ()</author>
      <guid>https://v5.chriskrycho.com/journal/jujutsu-megamerges-and-jj-absorb/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:13 GMT</pubDate>
    </item>
    <item>
      <title>Talking To Your Mailserver Is Not as Hard as You Think!</title>
      <link>https://blog.lohr.dev/imap-introduction</link>
      <description>Learning how the IMAP protocol actually works</description>
      <author> (https://hashnode.com/@michidk)</author>
      <guid>https://blog.lohr.dev/imap-introduction</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:12 GMT</pubDate>
    </item>
    <item>
      <title>RAG + Semantic Markup</title>
      <link>https://flounder.dev/posts/rag-semantic-markup/</link>
      <description>Build documentation-powered features using retrieval-augmented generation and semantic markup</description>
      <author> ()</author>
      <guid>https://flounder.dev/posts/rag-semantic-markup/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:12 GMT</pubDate>
    </item>
    <item>
      <title>Automating the Search for Artificial Life with Foundation Models</title>
      <link>https://pub.sakana.ai/asal/</link>
      <description></description>
      <author> ()</author>
      <guid>https://pub.sakana.ai/asal/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:12 GMT</pubDate>
    </item>
    <item>
      <title>Ways to use torch.export : ezyang’s blog</title>
      <link>http://blog.ezyang.com/2024/12/ways-to-use-torch-export/</link>
      <description>Previously, I discussed the value proposition of torch.compile.  While doing so, I observed a number of downsides (long compile time, complicated operational model, lack of packaging) that were intrinsic to torch.compile&amp;#39;s API contract, which emphasized being able to work on Python code as is, with minimal intervention from users.  torch.export occupies a different spot in the tradeoff space: in exchange for more upfront work making a model exportable, it allows for use of PyTorch models in environments where using torch.compile as is would be impossible.</description>
      <author> ()</author>
      <guid>http://blog.ezyang.com/2024/12/ways-to-use-torch-export/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:12 GMT</pubDate>
    </item>
    <item>
      <title>Symbolic Execution by Overloading __bool__</title>
      <link>https://www.philipzucker.com/overload_bool/</link>
      <description>A few months ago I saw a talk on buildit, https://buildit.so/ a really neat project that achieves staged metaprogramming as a C++ library. I love the central tenets of being in a mainstream language and not requiring a modified compiler. Right on, brother. One thing I came away with was a neat trick for getting non-overloadable syntax to be overloadable.</description>
      <author> ()</author>
      <guid>https://www.philipzucker.com/overload_bool/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:12 GMT</pubDate>
    </item>
    <item>
      <title>a society-level forever clinical trial – Kyunghyun Cho</title>
      <link>https://kyunghyuncho.me/an-outrageous-idea-a-society-level-forever-clinical-trial/</link>
      <description>when i got tenure earlier, i thought that would change how i work and live. it was true, but it wasn’t because of tenure but because of my thyroid cancer (see https://kyunghyuncho.me/sharing-some-good-news-and-some-bad-news/ if you’re curious.) when i was promoted to become a full professor, i thought that would change how i work and live, but to be frank, it didn’t. though, i started to think about what i should be able to think about, now that i have become a full professor with tenure, implying (at least in my mind) that i have an obligation not only to carry on as usual but also to think out of box. for the past year and counting, this has been inconvenient because my status quo isn’t bad at all but also interesting because i feel like i am perhaps at the right stage of my career to not only think carefully but also think somewhat outrageously (though, to be strict, whatever i think of or execute tends to be too little and often too late always.) anyhow, i thought i’d share one such thought an airport (SFO) while waiting to board my flight in … let’s see .. 25 minutes.</description>
      <author> ()</author>
      <guid>https://kyunghyuncho.me/an-outrageous-idea-a-society-level-forever-clinical-trial/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:12 GMT</pubDate>
    </item>
    <item>
      <title>Finetuning CLIP to Predict Art Styles in Image Generation Websites</title>
      <link>https://www.njkumar.com/finetuning-clip-to-analyze-art-styles-in-stable-diffusion-playgroundai-and-midjourney/</link>
      <description>This past week, I came across the  dataset curated by the Polo Club of Data Science at Georgia Tech. They scraped over 14 million image-prompt pairs collecte...</description>
      <author> ()</author>
      <guid>https://www.njkumar.com/finetuning-clip-to-analyze-art-styles-in-stable-diffusion-playgroundai-and-midjourney/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:12 GMT</pubDate>
    </item>
    <item>
      <title>Charity Calculator</title>
      <link>https://lucaspauker.com/articles/charity-calculator/</link>
      <description>Introduction With holiday season in full swing, people may be more enticed to give to charity. However, there is a question of how to optimize your charitable donations. Specifically, I would like to optimize charitable donations for maximum impact. It seems to me that there are two parts to this equation:
Which charity(ies)/cause(s) should I give to How much should I give? The answer to the first question is deeply personal, so I want to focus on the second question.</description>
      <author> ()</author>
      <guid>https://lucaspauker.com/articles/charity-calculator/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:12 GMT</pubDate>
    </item>
    <item>
      <title>Trying out QvQ—Qwen’s new visual reasoning model</title>
      <link>https://simonwillison.net/2024/Dec/24/qvq/</link>
      <description>I thought we were done for major model releases in 2024, but apparently not: Alibaba’s Qwen team just dropped the Apache 2.0 licensed QvQ-72B-Preview, “an experimental research model focusing on …</description>
      <author> ()</author>
      <guid>https://simonwillison.net/2024/Dec/24/qvq/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:12 GMT</pubDate>
    </item>
    <item>
      <title>Potentially Useful | Vim is a cast iron skillet</title>
      <link>https://www.eamoncaddigan.net/posts/vim/</link>
      <description>Year-end thoughts on why I like my text editor</description>
      <author> ()</author>
      <guid>https://www.eamoncaddigan.net/posts/vim/</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:11 GMT</pubDate>
    </item>
    <item>
      <title>Idempotent database inserts: Getting it right</title>
      <link>https://dnnsthnnr.com/blog/idempotent-database-inserts-getting-it-right</link>
      <description>Idempotence is the basis of resilient distributed systems. This blog post explores a common solution for idempotent database inserts and its flaws and proposes an improved version.</description>
      <author> ()</author>
      <guid>https://dnnsthnnr.com/blog/idempotent-database-inserts-getting-it-right</guid>
      <pubDate>Wed, 25 Dec 2024 00:02:09 GMT</pubDate>
    </item>
    <item>
      <title>John Carlos Baez (@johncarlosbaez@mathstodon.xyz)</title>
      <link>https://mathstodon.xyz/@johncarlosbaez/113703444230936435</link>
      <description>Attached: 1 image

The number pi has an evil twin!   It&amp;#39;s a number called ϖ with many properties similar to π.  There are even mutant trig functions connected to this number, called sl and cl.   

So maybe while you were studying trig in high school, some kid in another galaxy was having to memorize all the identities for these other functions.

I doubt it.  Just as pi and trig functions are connected to the circle, this number ϖ and its mutant trig functions are connected to a curve shaped like the symbol for infinity, ∞.   But this curve is just less important than the circle.  I&amp;#39;m not enough of a cultural relativist to believe there&amp;#39;s a civilization that cares more about the shape ∞ than the shape ◯.

This ∞-shaped curve is called a &amp;#39;leminscate&amp;#39;, and ϖ is called the &amp;#39;lemniscate constant&amp;#39;.   I&amp;#39;ll show you the leminiscate in my next post.   

A civilization will probably only get interested in ϖ when it gets interested in the lemniscate.... or the deeper math it&amp;#39;s connected to.   On our planet, it was Bernoulli, Euler and Gauss who discovered this math.

(Why does unicode even have the symbol ϖ?   Here&amp;#39;s why: it&amp;#39;s a script version of the Greek letter pi, sometimes called &amp;#39;varpi&amp;#39; or &amp;#39;pomega&amp;#39;.)

(1/n)</description>
      <author> ()</author>
      <guid>https://mathstodon.xyz/@johncarlosbaez/113703444230936435</guid>
      <pubDate>Tue, 24 Dec 2024 15:01:58 GMT</pubDate>
    </item>
    <item>
      <title>38th Chaos Communication Congress Infos</title>
      <link>https://events.ccc.de/congress/2024/infos/index.html</link>
      <description>Infos, news, links and more</description>
      <author> ()</author>
      <guid>https://events.ccc.de/congress/2024/infos/index.html</guid>
      <pubDate>Tue, 24 Dec 2024 14:01:55 GMT</pubDate>
    </item>
    <item>
      <title>Clean Input Validation With FluentValidation in .NET</title>
      <link>https://youtube.com/watch?v=vaDDB7BpEgQ</link>
      <description>Want to master Clean Architecture? Go here: https://bit.ly/3PupkOJ
Want to unlock Modular Monoliths? Go here: https://bit.ly/3SXlzSt
Join a community of 1000+ .NET developers: https://www.patreon.com/milanjovanovic

Ever get tired of writing messy validation code that&amp;#39;s scattered all over your codebase? In this video, I&amp;#39;ll show you how to use FluentValidation in .NET to write clean, maintainable validation logic that actually makes sense. We&amp;#39;ll start with installing the package and setting up basic validators, then dive into practical examples, including using RuleFor() and the handy InlineValidator for quick validation needs. You&amp;#39;ll learn everything you need to start using FluentValidation in your own projects, with real-world examples you can actually use.

CQRS Validation with MediatR Pipeline and FluentValidation
https://www.milanjovanovic.tech/blog/cqrs-validation-with-mediatr-pipeline-and-fluentvalidation

Check out my courses:
https://www.milanjovanovic.tech/courses

Read my Blog here:
https://www.milanjovanovic.tech/blog

Join my weekly .NET newsletter:
https://www.milanjovanovic.tech

Chapters
0:00 Initial validation setup
2:55 Installing FluentValidation
4:25 Building the Validators
13:50 Using the validator with IValidator
18:17 Bonus: InlineValidator</description>
      <author> (Milan Jovanović)</author>
      <guid>https://youtube.com/watch?v=vaDDB7BpEgQ</guid>
      <pubDate>Tue, 24 Dec 2024 14:01:48 GMT</pubDate>
    </item>
    <item>
      <title>Azure Service Bus Finally Doesn’t Suck</title>
      <link>https://youtube.com/watch?v=NPF4iF58P-c</link>
      <description>Check out my courses on Dometrain: https://dometrain.com
Subscribe to my weekly newsletter: https://nickchapsas.com

Become a Patreon and get special perks: https://www.patreon.com/nickchapsas

Hello, everybody. I&amp;#39;m Nick, and in this video, I will introduce you to the newly launched Azure Service Bus emulator.

Workshops: https://bit.ly/nickworkshops

Don&amp;#39;t forget to comment, like and subscribe :)

Social Media:
Follow me on GitHub: https://github.com/Elfocrash
Follow me on Twitter: https://twitter.com/nickchapsas
Connect on LinkedIn: https://www.linkedin.com/in/nick-chapsas

Keep coding merch: https://keepcoding.shop

#csharp #dotnet</description>
      <author> (Nick Chapsas)</author>
      <guid>https://youtube.com/watch?v=NPF4iF58P-c</guid>
      <pubDate>Tue, 24 Dec 2024 12:01:35 GMT</pubDate>
    </item>
  </channel>
</rss>