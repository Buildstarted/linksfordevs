<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>GitHub Quick Reviews</title>
      <link>https://www.youtube.com/watch?v=AaZ8PB7LS7M</link>
      <description>Powered by Restream https://restream.io/</description>
      <author> (.NET Foundation
  
  
  
    .NET Foundation
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=AaZ8PB7LS7M</guid>
      <pubDate>Tue, 13 Jul 2021 19:04:12 GMT</pubDate>
    </item>
    <item>
      <title>83% of Developers Suffer From Burnout, Haystack Analytics Study Finds</title>
      <link>https://www.usehaystack.io/blog/83-of-developers-suffer-from-burnout-haystack-analytics-study-finds</link>
      <description>San Francisco &amp;amp; London; 12th July 2021 - Technology has played a key role in our society, especially during the pandemic, but little is understood about the engineers who build the software that powers the modern world. A new study&amp;#185; has found that 83% of software developers suffer from workplace burnout. The top reasons cited for burnout included high workload (47%), inefficient process (31%) alongside unclear goals and targets (29%).</description>
      <author> (Junade AliJuly 13, 2021)</author>
      <guid>https://www.usehaystack.io/blog/83-of-developers-suffer-from-burnout-haystack-analytics-study-finds</guid>
      <pubDate>Tue, 13 Jul 2021 19:04:07 GMT</pubDate>
    </item>
    <item>
      <title>GitHub Quick Reviews</title>
      <link>https://www.youtube.com/watch?v=K9jWLvN9bts</link>
      <description>Powered by Restream https://restream.io/</description>
      <author> (Milan Kainth)</author>
      <guid>https://www.youtube.com/watch?v=K9jWLvN9bts</guid>
      <pubDate>Tue, 13 Jul 2021 19:04:04 GMT</pubDate>
    </item>
    <item>
      <title>GitHub Quick Reviews</title>
      <link>https://www.youtube.com/watch?v=QuUMh4Xm_EU</link>
      <description>Powered by Restream https://restream.io/</description>
      <author> (.NET Foundation
  
  
  
    .NET Foundation
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=QuUMh4Xm_EU</guid>
      <pubDate>Tue, 13 Jul 2021 19:03:59 GMT</pubDate>
    </item>
    <item>
      <title>pwa-builder/pwa-install</title>
      <link>https://github.com/pwa-builder/pwa-install</link>
      <description>Web Component from the PWABuilder team that brings an awesome &amp;quot;install&amp;quot; experience to your Progressive Web App! - pwa-builder/pwa-install</description>
      <author> ()</author>
      <guid>https://github.com/pwa-builder/pwa-install</guid>
      <pubDate>Tue, 13 Jul 2021 19:03:54 GMT</pubDate>
    </item>
    <item>
      <title>Google Releases Visual Studio Tool for Android Game Development -- Visual Studio Magazine</title>
      <link>https://visualstudiomagazine.com/articles/2021/07/13/vs-android-game-tool.aspx</link>
      <description>Google released a Visual Studio extension for creating gaming apps for Android, targeting C++ developers.</description>
      <author> (By David Ramel07/13/2021)</author>
      <guid>https://visualstudiomagazine.com/articles/2021/07/13/vs-android-game-tool.aspx</guid>
      <pubDate>Tue, 13 Jul 2021 19:03:51 GMT</pubDate>
    </item>
    <item>
      <title>TypeScript 4.4 Beta Boosts Performance, Suggests JavaScript Spelling -- Visual Studio Magazine</title>
      <link>https://visualstudiomagazine.com/articles/2021/07/13/typescript-4-4-beta.aspx</link>
      <description>Microsoft has shipped a TypeScript v4.4 beta release, with new features ranging from performance improvements to spelling suggestions for JavaScript.</description>
      <author> (By David Ramel07/13/2021)</author>
      <guid>https://visualstudiomagazine.com/articles/2021/07/13/typescript-4-4-beta.aspx</guid>
      <pubDate>Tue, 13 Jul 2021 19:03:48 GMT</pubDate>
    </item>
    <item>
      <title>Featured | Powered 4 TV</title>
      <link>https://powered4.tv/</link>
      <description>Indie Wrestling On Demand</description>
      <author> ()</author>
      <guid>https://powered4.tv/</guid>
      <pubDate>Tue, 13 Jul 2021 18:04:08 GMT</pubDate>
    </item>
    <item>
      <title>GitHub’s Commercial AI Tool Copilot Facing Criticism From Open-Source Community For Blind Copying Of Blocks Of Code</title>
      <link>https://www.theinsaneapp.com/2021/07/github-copilot-ai-facing-criticism.html</link>
      <description>AI Copilot is pitched as a helpful aid to programmers. But some developers object to the blind copying of blocks of code used to train the algorithm.</description>
      <author> ()</author>
      <guid>https://www.theinsaneapp.com/2021/07/github-copilot-ai-facing-criticism.html</guid>
      <pubDate>Tue, 13 Jul 2021 18:04:02 GMT</pubDate>
    </item>
    <item>
      <title>Building a Vision of Life Without Work</title>
      <link>https://livingafi.com/2015/03/09/building-a-vision-of-life-without-work/</link>
      <description>The number one question that people ask once you tell them you’re considering early retirement is: &amp;#160;What will you do with your time?</description>
      <author> (Posted on)</author>
      <guid>https://livingafi.com/2015/03/09/building-a-vision-of-life-without-work/</guid>
      <pubDate>Tue, 13 Jul 2021 18:03:59 GMT</pubDate>
    </item>
    <item>
      <title>Beating TimSort at Merging</title>
      <link>https://earthly.dev/blog/python-timsort-merge/</link>
      <description>Here is a problem. You are tasked with improving the hot loop of a Python program: maybe it is an in-memory sequential index of some sort. The slow part is the updating, where you are adding a new sorted list of items to the already sorted index. You need to combine two sorted lists and keep the result sorted. How do you do that update?   Yes, this sounds like a LeetCode problem, and maybe in the real-world you would reach for some existing sorted set data structure, but if you were working with python lists, you might do something like this1:   def merge_sorted_lists(l1, l2):     sorted_list = []      while (l1 and l2):         if (l1[0] &amp;lt;= l2[0]): # Compare both heads             item = l1.pop(0) # Pop from the head             sorted_list.append(item)         else:             item = l2.pop(0)             sorted_list.append(item)      # Add the remaining of the lists     sorted_list.extend(l1 if l1 else l2)      return sorted_list   Python has a built-in method in heapq.merge that does this. It takes advantage of the fact that our lists are already sorted, so we can get a new sorted list linear time rather than the n*log(n) time it would take for combining and sorting two unsorted lists.   Imagine my surprise then when I saw this performance graph from Stack Overflow:       Python’s sort is beating merge at merging sorted lists!    Sorting the list is faster than just merging the list in almost all cases! That doesn’t sound right, but I checked it, and it’s true. As Stack Overflow user JFS puts it:    Long story short, unless len(l1 + l2) &amp;gt;= 1,000,000 use sort    The reason sort beats merge in most cases is because of a man named Tim Peters.   TimSort   Python’s list.sort is the original implementation of a hybrid sorting algorithm called TimSort, named after its author, Tim Peters.    [Here is] stable, natural merge sort, modestly called Timsort (hey, I earned it ). It has supernatural performance on many kinds of partially ordered arrays (less than lg(N!) comparisons needed, and as few as N-1), yet as fast as Python’s previous highly tuned sample sort hybrid on random arrays.    Tim Peters explaining TimSort   Timsort is designed to find runs of sequential numbers and merge them together:    The main routine marches over the array once, left to right, alternately identifying the next run, then merging it into the previous runs “intelligently”. Everything else is complication for speed, and some hard-won measure of memory efficiency.    This is why list(x + y).sort() can be surprisingly fast: once it finds the sequential runs of numbers, it functions like our merge algorithm: combining the two sorted lists in linear time.   Timsort does have to do extra work, though. It needs to do a pass over the data to find these sequential runs, and heapq.merge knows where the runs are ahead of time. Timsort overcomes this disadvantage by being written in C rather than Python. Or as ShawdowRanger on Stack Overflow explains it:    CPython’s list.sort is implemented in C (avoiding interpreter overhead), while heapq.merge is mostly implemented in Python, and optimizes for the “many iterables” case in a way that slows the “two iterables” case.    This means that if I drop down to C and write a C extension I should be able to beat Timsort. This turned out to be easier than I thought it would be2.   The C Extension   The bulk of the C Extension, whose performance I’m going to cover in a minute, is just the pop the stack algorithm discussed before, but using an index to point to the head of the stack:     //New List   PyObject* mergedList = PyList_New( n1 + n2 );    for( i = 0;; ) {     elem1 = PyList_GetItem( listObj1, i1 );     elem2 = PyList_GetItem( listObj2, i2 );     result = PyObject_RichCompareBool(v, w, Py_LT);     switch( result ) {       // List1 has smallest, Pop from list 1       case 1:         PyList_SetItem( mergedList, i++, elem1 );         i1++;         break;        case 0:           // List2 has smallest, Pop from list 2         PyList_SetItem( mergedList, i++, elem2 );         i2++;         break;     }     if( i2 &amp;gt;= n2 || i1 &amp;gt;= n1 )) {     //One list is empty, add remainder of other list to result     ...     break;     }  }  return mergedList;   C merge (full and final version on GitHub)   The nice thing about C extensions in Python is that they are easy to use. Once compiled, I can just import merge and use my new merge method:   import merge  # create some sorted lists a = list(range(-100, 1700)) b = list(range(1400, 1800))  # merge them merge.merge(a, b)   Testing It   Testing my new merge with a list of integers and floats, we can see that we are beating Timsort, especially for long lists:   import merge import timeit  a = list(range(-100, 1700)) + [0.1] b = list(range(1400, 1800))  def merge_test():    m1 = merge.merge(a, b)  def sort_test():    m2 = list(a + b)    m2.sort()  sort_time = timeit.timeit(&amp;quot;sort_test()&amp;quot;, setup=&amp;quot;from __main__ import sort_test&amp;quot;, number=100000) merge_time = timeit.timeit(&amp;quot;merge_test()&amp;quot;, setup=&amp;quot;from __main__ import merge_test&amp;quot;,number=100000)  print(f&amp;#39;timsort took {sort_time} seconds&amp;#39;) print(f&amp;#39;merge took {merge_time} seconds&amp;#39;)   timsort took 3.9523325259999997 seconds merge took 3.0547665259999994 seconds   Graphing the performance we get this:       We are beating Timsort with our merge    But if we switch to a list of only integers sort is beating us for small lists and even on big lists our performance improvement is thin at best:       With lists of all int or all float we lose our advantage.    What is going on here?   Timsort’s Special Comparisons   It turns out that Timsort has some extra tricks up its sleeves in the case of a list of integers. In that initial pass over the list, it checks the types of the elements, and if they are all uniform it tries to use a cheaper comparison operation.   Specifically, if your list is all longs, floats, or Latin strings Timsort will save a lot of cycles on the comparison operations.   Learning from Timsort we can bring in these comparison operations ourselves. We don’t want to do a full pass over the list, or we will lose our advantage, so we can just specialize our merge by offering separate calls for longs, floats, and Latin alphabet strings like so:   //Default comparison PyObject* merge( PyObject*, PyObject* );  //Compare assuming ints PyObject* merge_int( PyObject*, PyObject* );  //Compare assuming floats PyObject* merge_float( PyObject*, PyObject* );  //Compare assuming latin PyObject* merge_latin( PyObject*, PyObject* )   merge.h   Beating TimSort   Doing that, we now can finally beat Timsort at merging sorted lists, not just when the list is a heterogeneous mix of elements, but also when it’s all integers, or floating-point numbers, or one byte per char strings.       merge vs TimSort for int.        merge vs TimSort for float.        merge vs TimSort for Latin alphabet strings.        merge vs TimSort for everything without a specialized compare.    The default merge beats Timsort for heterogeneous lists, and the specialized versions are there for when you have uniform types in your list, and you need to go fast.   TimSort Is Good   There, I have beat Timsort for merging sorting lists, although I had to pull in some code from TimSort itself to get here. I’m not sure how valuable this is: if you need to go fast, you might not choose Python, but it was a fun learning project.   Also, I learned that dropping down to C isn’t as scary as it sounds. The build steps are a bit more involved, but with the included Earthfile, the build is a one-liner and works cross-platform. You can find the code on GitHub and an intro to Earthly on this very site, and with that example, you can build your own C extension reasonably quickly.   The surprising thing, though, is how good Timsort still is. It wasn’t designed for merging sorted lists but for sorting real-world data. It turns out real-world data is often partially sorted, just like our use case.   Timsort on partially sorted data shows us where Big O notation can misinform us. If your input always keeps you near the median or best-case performance, then the worst-case performance doesn’t matter much. It’s no wonder then that since its first creation, Timsort has spread from Python to JavaScript, Swift, and Rust. Thank you, Tim Peters!        Practically, you might not want to use pop, but just track an index of where the head of the stack should be, like the C code shown later.↩︎     It was easier because my teammate Alex has experience writing C extensions for Python, so by the time I had found the Python header files, Alex had already put together a prototype solution.↩︎</description>
      <author> (Adam Gordon Bell)</author>
      <guid>https://earthly.dev/blog/python-timsort-merge/</guid>
      <pubDate>Tue, 13 Jul 2021 18:03:57 GMT</pubDate>
    </item>
    <item>
      <title>The ASP.NET Team @TheASPNETTeam</title>
      <link>https://www.pscp.tv/w/c7xsfzFyYWpaeUJKTE9aS3p8MVprS3plYnBrQnl4doGWVHO7FoeNM5axhLef1QJY8SsIvq0oqAI8VqKwubAg</link>
      <description>ASP.NET Community Standup - Building with Blazor: Powered4.tv - Chat live at https://live.dot.net</description>
      <author> (Twitter Inc)</author>
      <guid>https://www.pscp.tv/w/c7xsfzFyYWpaeUJKTE9aS3p8MVprS3plYnBrQnl4doGWVHO7FoeNM5axhLef1QJY8SsIvq0oqAI8VqKwubAg</guid>
      <pubDate>Tue, 13 Jul 2021 18:03:54 GMT</pubDate>
    </item>
    <item>
      <title>YouTube</title>
      <link>https://www.youtube.com/watch?v=se3NEf4qKcY</link>
      <description>Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube.</description>
      <author> ()</author>
      <guid>https://www.youtube.com/watch?v=se3NEf4qKcY</guid>
      <pubDate>Tue, 13 Jul 2021 18:03:50 GMT</pubDate>
    </item>
    <item>
      <title>Writing a Bash Builtin in C to Parse INI Configs</title>
      <link>https://mbuki-mvuki.org/posts/2021-07-12-writing-a-bash-builtin-in-c-to-parse-ini-configs/</link>
      <description>Why Not Just Parse INI Configs With Bash? Shell languages such as Bash excel at certain tasks, such as gluing programs together or quickly automating a set of command line steps. In contrast to those strengths, using a Shell to parse an INI config file is a bit like writing a poem in mud, you might succeed, but the result will probably be inscrutable and your swear jar will be full!</description>
      <author> ()</author>
      <guid>https://mbuki-mvuki.org/posts/2021-07-12-writing-a-bash-builtin-in-c-to-parse-ini-configs/</guid>
      <pubDate>Tue, 13 Jul 2021 16:04:36 GMT</pubDate>
    </item>
    <item>
      <title>You Really Shouldn&amp;#39;t Roll Your Own Crypto: An Empirical Study of Vulnerabilities in Cryptographic Libraries</title>
      <link>https://arxiv.org/abs/2107.04940</link>
      <description>The security of the Internet rests on a small number of open-source
cryptographic libraries: a vulnerability in any one of them threatens to
compromise a significant percentage of web traffic. Despite this potential for
security impact, the characteristics and causes of vulnerabilities in
cryptographic software are not well understood. In this work, we conduct the
first comprehensive analysis of cryptographic libraries and the vulnerabilities
affecting them. We collect data from the National Vulnerability Database,
individual project repositories and mailing lists, and other relevant sources
for eight widely used cryptographic libraries.
  Among our most interesting findings is that only 27.2% of vulnerabilities in
cryptographic libraries are cryptographic issues while 37.2% of vulnerabilities
are memory safety issues, indicating that systems-level bugs are a greater
security concern than the actual cryptographic procedures. In our investigation
of the causes of these vulnerabilities, we find evidence of a strong
correlation between the complexity of these libraries and their (in)security,
empirically demonstrating the potential risks of bloated cryptographic
codebases. We further compare our findings with non-cryptographic systems,
observing that these systems are, indeed, more complex than similar
counterparts, and that this excess complexity appears to produce significantly
more vulnerabilities in cryptographic libraries than in non-cryptographic
software.</description>
      <author> ([Submitted on 11 Jul 2021])</author>
      <guid>https://arxiv.org/abs/2107.04940</guid>
      <pubDate>Tue, 13 Jul 2021 16:04:34 GMT</pubDate>
    </item>
    <item>
      <title>How did copying and renaming with wildcards work in MS-DOS?</title>
      <link>https://devblogs.microsoft.com/oldnewthing/20210713-00/?p=105433</link>
      <description>Some time ago, I described how wildcards worked in MS-DOS, specifically how wildcards participate in pattern matching. Today, I’ll look at how wildcards participate in copying and renaming. First, the source and destination patterns are expanded into the eleven-character FCB format by the algorithm I described in that earlier article.</description>
      <author> (Raymond Chen)</author>
      <guid>https://devblogs.microsoft.com/oldnewthing/20210713-00/?p=105433</guid>
      <pubDate>Tue, 13 Jul 2021 15:06:31 GMT</pubDate>
    </item>
    <item>
      <title>My Silly JavaScript Mistake - I FORGOT ABOUT FOR LOOPS!</title>
      <link>https://www.youtube.com/watch?v=etdj4qtsYN0</link>
      <description>I completely forgot about for loops... I tried to get fancy and use the forEach method with an array when it was completely unnecessary.Image Gallery Video -...</description>
      <author> (James Q Quick
  
  
  
    James Q Quick
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=etdj4qtsYN0</guid>
      <pubDate>Tue, 13 Jul 2021 15:06:28 GMT</pubDate>
    </item>
    <item>
      <title>Postmortem: The case of the pauses, the fault and the GC</title>
      <link>https://ayende.com/blog/194177-A/postmortem-the-case-of-the-pauses-the-fault-and-the-gc?Key=01e08ec5-4e36-4293-a58a-1343784f8d0e</link>
      <description>A RavenDB customer called us with an interesting issue. Every now and then, RavenDB will stop process any and all requests. These pauses could last for as lo...</description>
      <author> ()</author>
      <guid>https://ayende.com/blog/194177-A/postmortem-the-case-of-the-pauses-the-fault-and-the-gc?Key=01e08ec5-4e36-4293-a58a-1343784f8d0e</guid>
      <pubDate>Tue, 13 Jul 2021 15:06:24 GMT</pubDate>
    </item>
    <item>
      <title>The End is Nigh</title>
      <link>https://np.reddit.com/user/SaveVideo/comments/oimo6y/the_end_is_nigh/</link>
      <description>Hello users,It has been a great pleasure to serve you all in the past few months. However, as they say, **All good things must come to an...</description>
      <author> (u/SaveVideo)</author>
      <guid>https://np.reddit.com/user/SaveVideo/comments/oimo6y/the_end_is_nigh/</guid>
      <pubDate>Tue, 13 Jul 2021 14:05:58 GMT</pubDate>
    </item>
    <item>
      <title>Highlights from Microsoft Build 2021</title>
      <link>https://www.meetup.com/fr-FR/msdevmtl/events/279441111/</link>
      <description>jeu. 15 juil. 2021 &amp;#224; 18:00: Microsoft Build 2021 , an annual event for developers by developers just concluded and this year’s virtual experience allowed developers around the globe to meet the Micros</description>
      <author> ()</author>
      <guid>https://www.meetup.com/fr-FR/msdevmtl/events/279441111/</guid>
      <pubDate>Tue, 13 Jul 2021 14:05:53 GMT</pubDate>
    </item>
    <item>
      <title>Converting Images and Videos to ASCII</title>
      <link>https://www.youtube.com/watch?v=Ad_T9uC9uCg</link>
      <description>I&amp;#39;m sure this has been done before, but here is my take on a program that converts images and webcam video into ASCII representations. It uses Python and the...</description>
      <author> (Dylan Kai Lau
  
  
  
    Dylan Kai Lau
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=Ad_T9uC9uCg</guid>
      <pubDate>Tue, 13 Jul 2021 14:04:09 GMT</pubDate>
    </item>
    <item>
      <title>The overall design and a first look at the internals: A deep dive on StringBuilder - Part 1</title>
      <link>https://andrewlock.net/a-deep-dive-on-stringbuilder-part-1-the-overall-design-and-first-look-at-the-internals/</link>
      <description>In this post I take an initial look at the StringBuilder type, show how it&amp;#39;s designed, and dive into the source code to see how it works</description>
      <author> ()</author>
      <guid>https://andrewlock.net/a-deep-dive-on-stringbuilder-part-1-the-overall-design-and-first-look-at-the-internals/</guid>
      <pubDate>Tue, 13 Jul 2021 13:04:52 GMT</pubDate>
    </item>
    <item>
      <title>What is Span in C# and why you should be using it</title>
      <link>https://www.youtube.com/watch?v=FM5dpxJMULY</link>
      <description>Subscribe: http://bit.ly/ChapsasSubBecome a Patreon and get source code access: https://www.patreon.com/nickchapsasHello everybody I&amp;#39;m Nick and in this video...</description>
      <author> (Nick Chapsas
  
  
  
    Nick Chapsas
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=FM5dpxJMULY</guid>
      <pubDate>Tue, 13 Jul 2021 13:04:49 GMT</pubDate>
    </item>
    <item>
      <title>Episode 19: Blazor with Chris Sainty</title>
      <link>https://unhandledexceptionpodcast.com/posts/0019-blazor/</link>
      <description>In this episode, I was thrilled to be joined by Chris Sainty to chat all about Blazor! Blazor is a new .NET technology allowing you to build SPA-like frontend web UIs in C#! Very focused on developer productivity and componentisation - Blazor is certainly going to become my go-to for frontends moving forward! And chatting with Chris in this episode, has shown me even more reasons why Blazor is becoming so immensely popular!</description>
      <author> (Dan Clarke)</author>
      <guid>https://unhandledexceptionpodcast.com/posts/0019-blazor/</guid>
      <pubDate>Tue, 13 Jul 2021 11:04:31 GMT</pubDate>
    </item>
    <item>
      <title>TinyPICO</title>
      <link>https://www.tinypico.com/</link>
      <description>TinyPICO has been designed with two isolated power paths: a 5 V path and a 3.3 V path. Any components that are not needed for operation via battery or via the 3.3 V power pin are isolated within the 5 V power path, and are totally shut down when no USB cable is plugged in.</description>
      <author> ()</author>
      <guid>https://www.tinypico.com/</guid>
      <pubDate>Tue, 13 Jul 2021 10:03:43 GMT</pubDate>
    </item>
    <item>
      <title>The Internet of Things is a Complete Mess (and how to Fix it)</title>
      <link>https://www.troyhunt.com/the-internet-of-things-is-a-complete-mess-and-how-to-fix-it/</link>
      <description>I&amp;#39;ve spent more time IoT&amp;#39;ing my house over the last year than any sane person ever should. But hey, it&amp;#39;s been strange times for all of us and it&amp;#39;s kept me entertained whilst no longer travelling. Plus, it&amp;#39;s definitely added to our lives in terms of the things it enables</description>
      <author> (https://www.facebook.com/troyahunt)</author>
      <guid>https://www.troyhunt.com/the-internet-of-things-is-a-complete-mess-and-how-to-fix-it/</guid>
      <pubDate>Tue, 13 Jul 2021 10:03:40 GMT</pubDate>
    </item>
    <item>
      <title>Guide to Reinforcement Learning with Python and TensorFlow</title>
      <link>https://rubikscode.net/2021/07/13/deep-q-learning-with-python-and-tensorflow-2-0/</link>
      <description>What happens when we introduce deep neural networks to Q-Learning? The new way to solve reinforcement learning problems - Deep Q-Learning!</description>
      <author> ()</author>
      <guid>https://rubikscode.net/2021/07/13/deep-q-learning-with-python-and-tensorflow-2-0/</guid>
      <pubDate>Tue, 13 Jul 2021 09:03:38 GMT</pubDate>
    </item>
    <item>
      <title>End to end testing web apps using Playwright and Azure DevOps</title>
      <link>https://dotnetthoughts.net/end-to-end-testing-web-apps-using-playwright-and-azure-devops/</link>
      <description>This article will discuss about testing web applications with the help of Playwright.NET. And run the tests in Azure DevOps as part of CI/CD pipeline. Few months back I wrote an article on Testing Web Applications with PlayWright and C#, this was using a non Microsoft package - PlaywrightSharp. Right now Microsoft is offering an official package - Microsoft.Playwright. In this article you will learn about how to write test case using Microsoft.Playwright nuget package and how to deploy the test app and execute it as part of the CI / CD pipeline in Azure DevOps.</description>
      <author> (Anuraj)</author>
      <guid>https://dotnetthoughts.net/end-to-end-testing-web-apps-using-playwright-and-azure-devops/</guid>
      <pubDate>Tue, 13 Jul 2021 07:04:18 GMT</pubDate>
    </item>
    <item>
      <title>.NET App Developer Links - 2021-07-13</title>
      <link>https://links.danrigby.com/2021/07/app-developer-links-2021-07-13/</link>
      <description>The latest news and resources for .NET app developers.</description>
      <author> ()</author>
      <guid>https://links.danrigby.com/2021/07/app-developer-links-2021-07-13/</guid>
      <pubDate>Tue, 13 Jul 2021 07:04:14 GMT</pubDate>
    </item>
    <item>
      <title>Jason Bock on Mutation Testing</title>
      <link>https://www.davidgiard.com/2021/07/12/JasonBockOnMutationTesting.aspx</link>
      <description>Episode 670 Jason Bock on Mutation Testing Mutation Testing involves modifying code that should break tests in order to validate the quality of these tests. ...</description>
      <author> (David Giard)</author>
      <guid>https://www.davidgiard.com/2021/07/12/JasonBockOnMutationTesting.aspx</guid>
      <pubDate>Tue, 13 Jul 2021 06:04:54 GMT</pubDate>
    </item>
    <item>
      <title>Mutation Testing - The Long Walk</title>
      <link>https://www.pmichaels.net/2021/07/10/mutation-testing/</link>
      <description>Some time ago, I heard Dan Clarke from the Unhandled Exception podcast mention Mutation testing – the latest episode on this can be found here. I thought this definitely warranted some investigation. If you skip to the bottom of this post, you’ll see some links to the official docs for Stryker, and to a video […]</description>
      <author> (by pcmichaels)</author>
      <guid>https://www.pmichaels.net/2021/07/10/mutation-testing/</guid>
      <pubDate>Tue, 13 Jul 2021 06:04:43 GMT</pubDate>
    </item>
    <item>
      <title>webpack? esbuild? Why not both?</title>
      <link>https://icanmakethiswork.blogspot.com/2021/07/webpack-esbuild-why-not-both.html</link>
      <description>Builds can be made faster using tools like esbuild . However, if you&amp;#39;re invested in webpack  but would still like to take advantage of speed...</description>
      <author> ()</author>
      <guid>https://icanmakethiswork.blogspot.com/2021/07/webpack-esbuild-why-not-both.html</guid>
      <pubDate>Tue, 13 Jul 2021 06:04:27 GMT</pubDate>
    </item>
    <item>
      <title>A reading of Extensibility for the Masses</title>
      <link>https://blog.ploeh.dk/2021/07/12/a-reading-of-extensibility-for-the-masses/</link>
      <description>A paper read and translated to C#.</description>
      <author> (Mark Seemann)</author>
      <guid>https://blog.ploeh.dk/2021/07/12/a-reading-of-extensibility-for-the-masses/</guid>
      <pubDate>Tue, 13 Jul 2021 06:04:24 GMT</pubDate>
    </item>
    <item>
      <title>Advancing application reliability with the Azure Well-Architected Framework</title>
      <link>https://azure.microsoft.com/en-us/blog/advancing-application-reliability-with-the-azure-wellarchitected-framework/</link>
      <description>We created the Azure Well-Architected Framework to help improve the quality of your workloads, and reliability is one of its five core pillars so for the latest post in our series, I have asked Cloud Advocate David Blank-Edelman to run through how best to approach using the framework to guide ...</description>
      <author> (Mark Russinovich
            Chief Technology Officer and Technical Fellow, Microsoft Azure)</author>
      <guid>https://azure.microsoft.com/en-us/blog/advancing-application-reliability-with-the-azure-wellarchitected-framework/</guid>
      <pubDate>Tue, 13 Jul 2021 06:04:22 GMT</pubDate>
    </item>
    <item>
      <title>[Last Week in .NET #50] – Copilot or JEDI?</title>
      <link>https://georgestocker.com/2021/07/12/last-week-in-net-50-copilot-or-jedi/</link>
      <description>&amp;#127812; Jetbrains’ Simon Cropp is hosting an “OSS Power-ups: Verify” event and I have no fracking idea what any of these words put together means. Which, if you think about it is entire…</description>
      <author> ()</author>
      <guid>https://georgestocker.com/2021/07/12/last-week-in-net-50-copilot-or-jedi/</guid>
      <pubDate>Tue, 13 Jul 2021 05:03:49 GMT</pubDate>
    </item>
    <item>
      <title>nothings/stb</title>
      <link>https://github.com/nothings/stb/blob/master/tests/truetype_test_win32.c</link>
      <description>stb single-file public domain libraries for C/C++. Contribute to nothings/stb development by creating an account on GitHub.</description>
      <author> ()</author>
      <guid>https://github.com/nothings/stb/blob/master/tests/truetype_test_win32.c</guid>
      <pubDate>Tue, 13 Jul 2021 05:03:46 GMT</pubDate>
    </item>
    <item>
      <title>Adam Storr - Target Typed New Expressions in C# 9 - Are They The Future?</title>
      <link>https://adamstorr.azurewebsites.net/blog/target-typed-new-expressions-in-csharp-9-are-they-the-future</link>
      <description>Adam Storr - Powered by coffee!</description>
      <author> ()</author>
      <guid>https://adamstorr.azurewebsites.net/blog/target-typed-new-expressions-in-csharp-9-are-they-the-future</guid>
      <pubDate>Tue, 13 Jul 2021 03:03:58 GMT</pubDate>
    </item>
    <item>
      <title>dotnet/installer</title>
      <link>https://github.com/dotnet/installer#installers-and-binaries</link>
      <description>.NET SDK Installer. Contribute to dotnet/installer development by creating an account on GitHub.</description>
      <author> ()</author>
      <guid>https://github.com/dotnet/installer#installers-and-binaries</guid>
      <pubDate>Tue, 13 Jul 2021 00:06:22 GMT</pubDate>
    </item>
    <item>
      <title>DamianEdwards/MinimalApiPlayground</title>
      <link>https://github.com/DamianEdwards/MinimalApiPlayground</link>
      <description>A place I&amp;#39;m trying out the new ASP.NET Core minimal APIs features. - DamianEdwards/MinimalApiPlayground</description>
      <author> ()</author>
      <guid>https://github.com/DamianEdwards/MinimalApiPlayground</guid>
      <pubDate>Tue, 13 Jul 2021 00:06:13 GMT</pubDate>
    </item>
    <item>
      <title>Languages &amp;amp; Runtime Community Standup - Breaking changes &amp;amp; .NET 6 Preview 6 and 7</title>
      <link>https://www.youtube.com/watch?v=J0LTqwTojlA</link>
      <description>We&amp;#39;re going to talk about breaking changes and how we approach them. Also, we&amp;#39;ll cover what&amp;#39;s new in .NET 6 previews 6 and 7.Featuring: Richard Lander (@runf...</description>
      <author> (dotNET
  
  
  
    dotNET
  






    •)</author>
      <guid>https://www.youtube.com/watch?v=J0LTqwTojlA</guid>
      <pubDate>Mon, 12 Jul 2021 23:04:39 GMT</pubDate>
    </item>
    <item>
      <title>Tesla’s $16,000 Quote for a $700 Fix Is Why Right to Repair Matters</title>
      <link>https://www.thedrive.com/news/41493/teslas-16000-quote-for-a-700-fix-is-why-right-to-repair-matters</link>
      <description>This is what people are fighting for.</description>
      <author> (Rob Stumpf)</author>
      <guid>https://www.thedrive.com/news/41493/teslas-16000-quote-for-a-700-fix-is-why-right-to-repair-matters</guid>
      <pubDate>Mon, 12 Jul 2021 22:05:15 GMT</pubDate>
    </item>
    <item>
      <title>Do nothing | Paul Copplestone</title>
      <link>https://paul.copplest.one/blog/do-nothing.html</link>
      <description>The unreasonable effectiveness of doing nothing.</description>
      <author> ()</author>
      <guid>https://paul.copplest.one/blog/do-nothing.html</guid>
      <pubDate>Mon, 12 Jul 2021 21:05:58 GMT</pubDate>
    </item>
    <item>
      <title>Topological Teleportation</title>
      <link>https://mareknarozniak.com/2021/07/09/topological-teleportation/</link>
      <description>A tutorial on how to teleport the topological qubit from one Kitaev chain onto another by applying nothing else but braiding operation between the domain edges.</description>
      <author> (Marek Narozniak)</author>
      <guid>https://mareknarozniak.com/2021/07/09/topological-teleportation/</guid>
      <pubDate>Mon, 12 Jul 2021 21:05:56 GMT</pubDate>
    </item>
    <item>
      <title>New .NET MAUI Workload Installation Detailed in &amp;#39;Final Xamarin Podcast&amp;#39; -- Visual Studio Magazine</title>
      <link>https://visualstudiomagazine.com/articles/2021/07/12/last-xamarin-podcast.aspx</link>
      <description>As Xamarin is being evolved into the new .NET MAUI mobile/desktop dev framework, Microsoft last week explained features such as a new command-line SDK workload installation experience during what the company called &amp;#39;The Final Xamarin Podcast.&amp;#39;</description>
      <author> (By David Ramel07/12/2021)</author>
      <guid>https://visualstudiomagazine.com/articles/2021/07/12/last-xamarin-podcast.aspx</guid>
      <pubDate>Mon, 12 Jul 2021 21:05:53 GMT</pubDate>
    </item>
    <item>
      <title>Physical Minimalism</title>
      <link>https://www.nicolasbustamante.com/p/physical-minimalism</link>
      <description>Stuff - Storage - Buying More - Throwing Away - Social Pressure - Happiness</description>
      <author> (Nicolas Bustamante)</author>
      <guid>https://www.nicolasbustamante.com/p/physical-minimalism</guid>
      <pubDate>Mon, 12 Jul 2021 21:05:48 GMT</pubDate>
    </item>
    <item>
      <title>Every company is a shit show</title>
      <link>https://jaredhecht.com/2021/07/08/every-company-is-a-shit-show/</link>
      <description>One of the things I continually find myself saying to friends, founders, and colleagues is that every single company is a shit show.* Founders, execs, and employees like to think that there’s a bet…</description>
      <author> ()</author>
      <guid>https://jaredhecht.com/2021/07/08/every-company-is-a-shit-show/</guid>
      <pubDate>Mon, 12 Jul 2021 21:05:44 GMT</pubDate>
    </item>
    <item>
      <title>A Sombre Goodbye To Linux - Kev Quirk</title>
      <link>https://kevq.uk/a-sombre-goodbye-to-linux/</link>
      <description>I recently wrote about why I think complaints about the stability of Windows are unfounded. Since then, I&amp;#39;ve actually said goodbye to Linux.</description>
      <author> ()</author>
      <guid>https://kevq.uk/a-sombre-goodbye-to-linux/</guid>
      <pubDate>Mon, 12 Jul 2021 21:05:42 GMT</pubDate>
    </item>
    <item>
      <title>What Does It Take To Be a Tech Giant?</title>
      <link>https://miguelrochefort.com/blog/tech-giant/</link>
      <description>Software developer based in Montr&amp;#233;al, Canada</description>
      <author> ()</author>
      <guid>https://miguelrochefort.com/blog/tech-giant/</guid>
      <pubDate>Mon, 12 Jul 2021 21:05:39 GMT</pubDate>
    </item>
    <item>
      <title>If You Want To Transform IT, Start With Finance</title>
      <link>https://zwischenzugs.com/2021/07/12/if-you-want-to-transform-it-start-with-finance/</link>
      <description>tl;dr – ‘Money Flows Rule Everything Around Me’ When talking about IT transformation, we often we often talk about ‘culture’ being the problem in making change, but wh…</description>
      <author> (zwischenzugs)</author>
      <guid>https://zwischenzugs.com/2021/07/12/if-you-want-to-transform-it-start-with-finance/</guid>
      <pubDate>Mon, 12 Jul 2021 21:05:35 GMT</pubDate>
    </item>
    <item>
      <title>The Tools and Techniques I Use to Build Simple Static Websites</title>
      <link>https://matthewhoelter.com/2021/07/09/how-i-build-static-websites.html</link>
      <description>July 9th, 2021 The Tools and Techniques I Use to Build Simple Static Websites</description>
      <author> (Matthew Hoelter)</author>
      <guid>https://matthewhoelter.com/2021/07/09/how-i-build-static-websites.html</guid>
      <pubDate>Mon, 12 Jul 2021 21:05:32 GMT</pubDate>
    </item>
    <item>
      <title>.NET 5 + Blazor = Blazor WebAssembly✅</title>
      <link>https://dev.to/dotnetsafer/net-5-blazor-blazor-webassembly-2a1f</link>
      <description>Since the last release of .NET 5 at .NET Conf 2020, all of your users have seen first-hand how to...</description>
      <author> ()</author>
      <guid>https://dev.to/dotnetsafer/net-5-blazor-blazor-webassembly-2a1f</guid>
      <pubDate>Mon, 12 Jul 2021 20:04:18 GMT</pubDate>
    </item>
    <item>
      <title>The Ultimate Guide to Onboarding New Developers: Industry Best Practices</title>
      <link>https://codesubmit.io/blog/guide-to-onboarding-developers/</link>
      <description>Onboarding new hires requires taking their perspective into account and designing the best possible experience to get your new teammate assimilated and contributing as quickly as possible.</description>
      <author> (Gemma Harvey)</author>
      <guid>https://codesubmit.io/blog/guide-to-onboarding-developers/</guid>
      <pubDate>Mon, 12 Jul 2021 20:04:16 GMT</pubDate>
    </item>
    <item>
      <title>Manawyrm/fxIP</title>
      <link>https://github.com/Manawyrm/fxIP#readme</link>
      <description>TCP/IP for Casio fx-9860 graphical calculators (with SLIP support, uIP stack) - Manawyrm/fxIP</description>
      <author> ()</author>
      <guid>https://github.com/Manawyrm/fxIP#readme</guid>
      <pubDate>Mon, 12 Jul 2021 20:04:12 GMT</pubDate>
    </item>
  </channel>
</rss>