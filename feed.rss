<?xml version="1.0" encoding="utf-16"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link rel="self" type="application/rss+xml" href="https://linksfor.dev/" />
    <title>linksfor.dev(s)</title>
    <link>https://linksfor.dev/</link>
    <description>Curated links for devs</description>
    <language>en</language>
    <item>
      <title>Machine Learning With ML.NET - Evaluation Metrics</title>
      <link>https://rubikscode.net/2021/04/12/machine-learning-with-ml-net-evaluation-metrics/</link>
      <description>In this article, we explore popular metrics for measuring and quantifying the performance of machine learning models with ML.NET.</description>
      <author> ()</author>
      <guid>https://rubikscode.net/2021/04/12/machine-learning-with-ml-net-evaluation-metrics/</guid>
      <pubDate>Mon, 12 Apr 2021 03:07:17 GMT</pubDate>
    </item>
    <item>
      <title>Lobster Bisque Recipe</title>
      <link>https://www.seriouseats.com/recipes/2017/05/lobster-bisque-recipe.html</link>
      <description>This recipe streamlines the traditionally complicated process of making a bisque, while still delivering a deeply rich and flavorful soup, velvety-smooth and packed with tender chunks of lobster meat.</description>
      <author> ()</author>
      <guid>https://www.seriouseats.com/recipes/2017/05/lobster-bisque-recipe.html</guid>
      <pubDate>Mon, 12 Apr 2021 01:03:59 GMT</pubDate>
    </item>
    <item>
      <title>The Simplicity of Making Librem 5 Apps – Purism</title>
      <link>https://puri.sm/posts/the-simplicity-of-making-librem-5-apps/</link>
      <description>Purism makes premium phones, laptops, mini PCs and servers running free software on PureOS. Purism products respect people&amp;#39;s privacy and freedom while protecting their security.</description>
      <author> ()</author>
      <guid>https://puri.sm/posts/the-simplicity-of-making-librem-5-apps/</guid>
      <pubDate>Mon, 12 Apr 2021 00:05:07 GMT</pubDate>
    </item>
    <item>
      <title>Release v1.0.0-rc1 &amp;#183; event-driven-dotnet/EventDriven.EventBus.Dapr</title>
      <link>https://github.com/event-driven-dotnet/EventDriven.EventBus.Dapr/releases/tag/v1.0.0-rc1</link>
      <description>v1 RC1 release
Renamed and separated EventBus.Abstractions from Dapr project.
Renamed Dapr project to EventDriven.EventBus.Dapr.
Packages
EventDriven.EventBus.Abstractions: https://www.nuget.org/pa...</description>
      <author> (event-driven-dotnet)</author>
      <guid>https://github.com/event-driven-dotnet/EventDriven.EventBus.Dapr/releases/tag/v1.0.0-rc1</guid>
      <pubDate>Mon, 12 Apr 2021 00:05:04 GMT</pubDate>
    </item>
    <item>
      <title>My Next Film</title>
      <link>https://wildermuth.com/2021/04/11/My-Next-Film</link>
      <description>My Next Film</description>
      <author> ()</author>
      <guid>https://wildermuth.com/2021/04/11/My-Next-Film</guid>
      <pubDate>Sun, 11 Apr 2021 23:06:49 GMT</pubDate>
    </item>
    <item>
      <title>Bypass ISP’s UDP Proxy</title>
      <link>https://ahmetozer.org/Bypass-ISP-UDP-proxy.html</link>
      <description>Transparent proxies are widely used for tracking, blocking, optimizing and analyzing. These applications vary from company to company and protocol.</description>
      <author> (Ahmet Ozer)</author>
      <guid>https://ahmetozer.org/Bypass-ISP-UDP-proxy.html</guid>
      <pubDate>Sun, 11 Apr 2021 22:05:20 GMT</pubDate>
    </item>
    <item>
      <title>How I started my programming journey - Filip Iulian Pacurar (Filipac)</title>
      <link>https://pacurar.dev/how-i-started-my-programming-journey/</link>
      <description>I always had a thing for computers now that I think about it. I was maybe 5 years old when my dad bought a 386 computer with MS-DOS on it and I was blown away by it. I used to have two “games” in MS-DOS that I could play: a starship shooting bullets and floating...</description>
      <author> (filipacro)</author>
      <guid>https://pacurar.dev/how-i-started-my-programming-journey/</guid>
      <pubDate>Sun, 11 Apr 2021 22:05:17 GMT</pubDate>
    </item>
    <item>
      <title>Something doesn&amp;#39;t add up here</title>
      <link>https://mco.dev/something-doesnt-add-up-here/</link>
      <description>My friend Gus shared this ingenious demo of an old puzzle on twitter. Check out the short video below and see if you can tell what’s happening.</description>
      <author> (Marc Cohen)</author>
      <guid>https://mco.dev/something-doesnt-add-up-here/</guid>
      <pubDate>Sun, 11 Apr 2021 22:05:13 GMT</pubDate>
    </item>
    <item>
      <title>Working Around the Inherent Slowness of Debugger Conditional Breakpoints</title>
      <link>https://suszter.com/reversingonwindows/working-around-the-inherent-slowness-of-debugger-conditional-breakpoints</link>
      <description>Why Do Conditional Breakpoints Slow Down Debugging?</description>
      <author> (Attila Suszter)</author>
      <guid>https://suszter.com/reversingonwindows/working-around-the-inherent-slowness-of-debugger-conditional-breakpoints</guid>
      <pubDate>Sun, 11 Apr 2021 22:05:10 GMT</pubDate>
    </item>
    <item>
      <title>On Stallman</title>
      <link>https://edsantos.eu/on-stalman/</link>
      <description>As a lawyer/attorney I have some kind of professional bias towards always trying to see things in the best possible light, even (and specially) the kind of things that society in general disapproves the most: crimes. Presenting things in the best possible light doesn&amp;#39;t change…</description>
      <author> ()</author>
      <guid>https://edsantos.eu/on-stalman/</guid>
      <pubDate>Sun, 11 Apr 2021 22:05:08 GMT</pubDate>
    </item>
    <item>
      <title>Yuval Ishai - Real World Cryptographers Podcast</title>
      <link>https://rwcpodcast.buzzsprout.com/1393207/7860298-yuval-ishai</link>
      <description>In this episode with Yuval Ishai (Computer Science Professor at the Technion), we discuss the crypto community culture, teaching, multi-party computation, &amp;quot;how low can we go,&amp;quot; and other topics.&amp;#160;</description>
      <author> ()</author>
      <guid>https://rwcpodcast.buzzsprout.com/1393207/7860298-yuval-ishai</guid>
      <pubDate>Sun, 11 Apr 2021 22:05:04 GMT</pubDate>
    </item>
    <item>
      <title>Societal Donatism</title>
      <link>https://bastian.rieck.me/blog/posts/2021/donatism/</link>
      <description>It has been said that you should never try to meet your heroes, lest
they be found to have feet of clay.</description>
      <author> ()</author>
      <guid>https://bastian.rieck.me/blog/posts/2021/donatism/</guid>
      <pubDate>Sun, 11 Apr 2021 22:05:00 GMT</pubDate>
    </item>
    <item>
      <title>TECH Stop using JPA/Hibernate</title>
      <link>https://www.stemlaur.com/blog/2021/03/30/tech-hibern-hate/</link>
      <description>Introduction &amp;#128008; 15 years of that, during my master, a teacher taught us a new technology, allowing, I quote: You will not have to write SQL queries anymore! If you are like me, and you hate writing SQL queries you are going to love this framework! This is how, for the first time, a framework that was growing in popularity was sold to me. No more complexity of writing SQL queries, we replaced a scripting language with object-oriented programming. JPA and its best-known Hibernate implementation are thus among the most widely used technologies in the JAVA ecosystem today. Thousands of projects exist on GitHub using them. Although so many projects use these technologies, in this article I will try to convince you to stop using them in your next projects. Before I jump into my take about JPA and Hibern-HATE, let me talk about documentation. Documentation and complexity &amp;#128049; It seems undeniable to me that many who read this article will be able to offer solutions or even counterarguments to some of my reasons for hating JPA / Hibernate. I would of course be happy to hear them. However, I would like us to dwell on the official 3.6 Hibernate documentation. This document is 406 pages long. This is not the most recent version, but one of the latest version still offering the full PDF to download. To compare: The Lord of The Rings: The Fellowship of the Ring is 231 pages long (in the same PDF format as Hibernate) Version 2 of the Data Management: Structured Query Language (SQL) specification is 288 pages long The first and most important argument I could have against JPA / Hibernate is this: I don’t want to have to pass a master to perform database queries. Mutability &amp;#128569; Default empty constructor must be present Invariant means something that does not change or vary. In Object Oriented Design, a common practice, is to couple the object invariants with its life cycle. An Order cannot be placed without an Item? Therefore, an Order should NOT be created if an Item is not provided. A simple example of the implementation of an invariant would be: public class Order { private final String id; private final Set&amp;lt;Item&amp;gt; items; public Order(final String uuid, final Set&amp;lt;Item&amp;gt; items) throws AtLeastOneItemShouldBeProvided { this.id = uuid; if(items == null || items.isEmpty()) throw new AtLeastOneItemShouldBeProvided(); } public static class AtLeastOneItemShouldBeProvided extends Exception {} } In this example, Order without an item, CANNOT be instantiated. And a domain exception is thrown at you. Hibernate, on the other end, REQUIRES you to write a default constructor, meaning that an Order object can be instantiated with no Item and in this example, even without an id! Getters and setters must be present Hibernate relies on JavaBean specification. It means that hibernate will (behind the scene) use setters to re-hydrate its entities after fetching the data from the database, and getter to construct its queries on insert or update. This forces the developers to implement getter and setter methods for each field that are mapped as a column of a join. The thing is, getters and setters are EVIL. Instead of that, one should use domain specific language. Here an example of what a bad implementation of JPA / Hibernate prevents us to do: public class Order { private final String id; private final Set&amp;lt;Item&amp;gt; items; private OrderStatus orderStatus; public Order(final String uuid, final Set&amp;lt;Item&amp;gt; items) { // removed for clarity } public void confirm() { this.orderStatus = CONFIRMED; } // removed for clarity } Entity classes cannot be final A practice I learned to follow is to make a class either final or abstract, this allows multiple things: favor composition instead of inheritance whenever possible avoid breaking the Liskov principle This practice might have downsides it is really sad having a framework relying on proxies to construct entities preventing us to do that. Reflection (or Introspection) Reflection is anti-OOP An object is not a data structure with methods Introspection is a workaround for bad design Let’s say that we are starting a new company called ‘Encapsulation’, building secured doors for apartments. These special kind of doors has two main features: do not let people from the outside know what is inside your apartment do not let people from the outside enter your house without your consent Would you be interested in a new feature called ‘Reflection’ allowing to bypass this security? This is what ‘Reflection’ is, a superpower allowing your application to open doors, or access content. Numerous security breaches have been discovered in frameworks using ‘Reflection’ because it allows unwanted people to enter your house. Impossible to return a copy or unmodifiable collection in accessors Ok, so now we are forced to implement getter and setters, so at least let’s try and protect our data from being modified by the clients: public class Order { // removed for clarity private final Set&amp;lt;Item&amp;gt; items; public Order(final String uuid, final Set&amp;lt;Item&amp;gt; items) { // removed for clarity } public Set&amp;lt;Item&amp;gt; getItems() { this.orderStatus = Collections.unmodifiableSet(items); } // removed for clarity } Hum… but this will work only if you use field access with hibernate, if you don’t, another developer can easily do: public class Client { public void myEvilMethod(final Order order) { order.getItems().clear(); } } I let you read the documentation for further information about that. In the meanwhile, let’s talk about lazy loading. LAZY LOADING and CACHE &amp;#128575; Laziness I will not deep-dive too much about this one, LAZY LOADING mechanism in Hibernate is a nightmare for newcomers. If you end-up using the @Lazy annotation, it simply means one thing: the design of your entities is wrong. This is as simple as that, but there are two possibilities here: you followed the design of your domain, but unfortunately they are not compatible with Hibernate, so you had to add those mappings you wanted to write queries, but could not, so you had to add those mappings This is most frustrating point about this framework, you are doomed to adapt your domain model to fit for some simple needs. Cache Nobody understands the cache mechanism, you end up de-activating it. Worse, those understanding it are not caching query responses, they are caching entities. Flush &amp;#128574; Schrodinger’s cat dies each time hibernate performs a flush(), is it dead or alive? flush() synchronizes your database with the current state of object/objects held in the memory, by default, flush is performed automatically and can occur between the moment you save an entity to the moment the transaction is committed. This leads us to two pitfalls: this makes developers unable to use another persistent tool than Hibernate, because writes are done in memory until they are flushed this leads to horrible and untraceable stack traces when conflicts emerge during a flush, those stack traces are indeed never related to your code Accessing a single table field &amp;#128571; One good practice regarding API’s customer, described in this article is the notion of Tolerant Reader. Let me quote Martin Fowler on that: My recommendation is to be as tolerant as possible when reading data from a service. If you’re consuming an XML file, then only take the elements you need, ignore anything you don’t. Furthermore, make the minimum assumptions about the structure of the XML you’re consuming. I agree, this recommendation leads to minimizing coupling between a customer and a provider. What I would argue here, is that a database IS an API. Because it has its own lifecycle, a database can evolve independently of the client versions using it. Imagine that you need the url of an image stored in the database, what is the difference between: select url from image where id = &amp;#39;F462E8D9-9DF7-4A58-9112-EDE0434B4ACE&amp;#39;; and select id, url, content_type, digest from image where id = &amp;#39;F462E8D9-9DF7-4A58-9112-EDE0434B4ACE&amp;#39;; ? The first query only consumes the needed table fields url and id. The second consumes all the fields from the table, which is comparable to run a select * from .... I argue that we should favor the first option: if we had to rename one other column, we would not break this simple feature. But what about hibernate? If you want to do that you have to use complicated projections. If instead, you fetch the JPA entity representing Image, it will fetch all the columns the same way as the second query. Constraints &amp;#128568; public class User { // removed for clarity @NotNull @NotEmpty @Email private String email; // removed for clarity } This is the worst. Honestly, never use those annotations. In this example, we are introducing business rules using javax validation annotations. This is wrong for multiple reasons: you cannot unit-test your conditions they are checked too late in the process (during the flush) the exceptions which are thrown are generic, though unusable they treat business rules as if they were technical rules Strategic level pitfalls &amp;#128573; Hibernate and Spring are frameworks It is time to be honest here, Frameworks are great, but they are evil. Framework updates are horrible Frameworks do not keep retro-compatibility They WANT you to keep using them I love open source, really, but big companies sponsoring open-source projects get most of their income from support or third party tools. They NEED to monopolise the market, and one way to do that, is to make you believe that it is mandatory to use their frameworks. How many developers refuse to work in companies because they are not using a certain framework? How many companies refuse to hire developers because they do NOT know a certain framework? This loop has to stop, what defines the value of the projects we are working on has nothing to do with technologies and frameworks. I WANT to solve business problems, I do not want to keep solving technical issues. To go fast is to go wrong But type any framework here is great to develop a quick proof of concept. No, this is wrong. A proof-of-concept aims to see if we can solve a business problem: it does not only validate technical feasibility Using type any framework here just in the Proof-of-concept is a non-sense, you will have to re-do everything in the end We should bear in mind that “throwing a proof of concept in the garbage” is never an option You learned things during the POC that you will never unlearn You will end-up re-using what you learned anyway In particular, if you used JPA/Hibernate in the POC, you biased your perception of the domain models The premature architecture decisions we make are WRONG. Whenever this is possible, a POC should be started without persistence and minimal interfaces. What is wrong with SQL? &amp;#128585; Known by everyone (hopefully as well by those who use JPA/Hibernate) When a developer writes vanilla SQL: He knows what is being done He can check missing indexes by doing an explain on the query He can cache data by query He does not require framework update of SQL Let’s stop using JPA/Hibernate in our projects when simple vanilla SQL can do the work. But my manager forces me to use Hibernate on my new project &amp;#128584; Ok, that sucks. Quit your job… … or try this: Implement anything JPA/hibernate related outside your domain package or module. Hide those nasty JPA DAOs and hibernate entities in the infrastructure layer Make your domain layer as framework-free as possible You can use inversion of control for that, just keep in mind that the task will not be easy, that you will write a lot of mappers to navigate between your domain models and your database related JPA entities. But at least, you will simplify the job for the next developers to get rid of it. I mean… when your manager will be gone. But my project is already well started with JPA/Hibernate in the domain &amp;#128584; Well… that sucks even more. I will try to give some piece of advice about that. Stop having public default constructor and setters Here an example of a JPA entity (using Lombok for simplicity): @Entity @Table(&amp;quot;offer&amp;quot;) @EqualsAndHashcode @NoArgsConstructor // for Hibernate @Setter // for Hibernate @Getter public class BankAccount { @Id @Column(&amp;quot;id&amp;quot;) private String id; @Column(&amp;quot;opened&amp;quot;) private boolean opened; @OneToMany(fetch = LAZY) // ...simplified private Set&amp;lt;Long&amp;gt; ownerIds; } In this entity, the default constructor, setters and getters are public. Now let’s take a look at the service, creating a bank account: public class BankAccountService { private BankAccountJPARepository bankAccountJPARepository; public void createBankAccount(final Set&amp;lt;Long&amp;gt; ownerIds) { final BankAccount bankAccount = new BankAccount(); bankAccount.setId(UUID.randomUUID().toString()) bankAccount.setOpened(true); if(ownerIds == null || ownerIds.isEmpty()) { throw new IllegalStateException(); } bankAccount.setOwnerIds(ownerIds); this.bankAccountJPARepository.saveAndFlush(bankAccount); } } With these two classes, there are multiple problems: the entity BankAccount is anemic, it only contains only data and connections to other entities a result of that is that the service instantiating require to call a series of setter with the risk than a developer forgets to set something one condition checking that a bank account should not exist with have an owner specified is outside of the entity itself I think we can do better, keeping in mind that Hibernate requires default constructor and setters: @Entity @Table(&amp;quot;bank_account&amp;quot;) @EqualsAndHashcode @NoArgsConstructor(access = PACKAGE) // for Hibernate only, please do not use @Setter(value = PACKAGE) // for Hibernate, please do not use @Getter public class BankAccount { @Id @Column(&amp;quot;id&amp;quot;) private String id; @Column(&amp;quot;opened&amp;quot;) private boolean opened; @OneToMany(fetch = LAZY) // ...simplified private Set&amp;lt;Long&amp;gt; ownerIds; public BankAccount(final String id, final Collection&amp;lt;Long&amp;gt; ownerIds) { if(ownerIds == null || ownerIds.isEmpty()) { throw new AtLeastOneOwnerIsRequired(); } this.id = validateNotBlank(id); this.ownerIds = new HashSet(ownerIds); this.opened = true; } } There are multiple things to see in the new implementation: the default contructor and setters now have package visibility the only public constructor now accepts two parameters: id and a collection of ownerIds the type for ownerIds is not required to be a Set the condition checking ownerIds is BankAccount’s responsibility, this is now an invariant the flag opened is marked as true in the constructor, ensuring it is not forgotten the previous runtime exception IllegalStateException has been replaced by a checked Exception with a meaningful name the exception list its suffix Exception, as the sentence AtLeastOneOwnerIsRequired suffices to mean that something wrong happened The service class will now look like: public class BankAccountService { private BankAccountJPARepository bankAccountJPARepository; public void createBankAccount(final Set&amp;lt;Long&amp;gt; ownerIds) throws AtLeastOneOwnerIsRequired { final BankAccount bankAccount = new BankAccount(UUID.randomUUID().toString(), ownerIds); this.bankAccountJPARepository.saveAndFlush(bankAccount); } } Stop using SQL generated id Whenever possible, you should align-up your entities “primary keys” with the business concept of identity. A User can be considered unique in one context by its email address, or by its social security number Anyway, because your domain model would be bound to your database model with hibernate, think it as a good opportunity for your new entity to own a business identifier instead of a technical auto-generated id. If this is impossible (for example, a bank account does not have a functional identifier), prefer using string type instead of numerical IDs. It is easier to adapt and migrate string that numerical values, plus, having incremental IDs, expose you to having those leaked through the interface, in URLs, and it would allow hackers to guess them. Rename your JPA Repositories to JPA DAOs I really dislike the fact that spring decided to call the interfaces responsible to manage the collection of data model objects XXXRepositories. IMHO, naming them XXXDao emphasizes the fact that they belong to the infrastructure. Do not let Hibernate generate IDs Do not use @SequenceGenerator in your @Id primary key. Instead, use an explicit service generating them. With spring-data-jpa, for example: public interface XXXDao extends CrudRepository { @Query(value = &amp;quot;SELECT nextval(&amp;#39;xxxx_sequence&amp;#39;)&amp;quot;, nativeQuery = true) BigInteger generateNewId(); } This for multiple reasons: if an id is generated, it should be done knowingly you will be able to change the implementation later without changing the entity you will be able to test this generation To summarize, you should have control to your IDs, if one day you want to change them it will be easier. Keep JPA DAOs outside of the domain as much as you can You still have a big coupling between your “domain” entities and JPA annotations. Sorry, but it will not change easily. But what you could do, it to mitigate the coupling between your domain layer and spring data. Once again, JPA DAOs are not domain repositories. You should have an intermediate layer between the domain services and the JPA DAOs. Let’s go back to our BankAccountService to try and improve it: public class BankAccountService { private BankAccountJPARepository bankAccountJPARepository; public void createBankAccount(final Set&amp;lt;Long&amp;gt; ownerIds) throws AtLeastOneOwnerIsRequired { final BankAccount bankAccount = new BankAccount(UUID.randomUUID().toString(), ownerIds); this.bankAccountJPARepository.saveAndFlush(bankAccount); } } Let’s build an interface in our domain layer which will be our domain repository: public interface BankAccounts { void save(BankAccount bankAccount); } and use it: public class BankAccountService { private BankAccounts bankAccounts; public void createBankAccount(final Set&amp;lt;Long&amp;gt; ownerIds) throws AtLeastOneOwnerIsRequired { final BankAccount bankAccount = new BankAccount(UUID.randomUUID().toString(), ownerIds); this.bankAccounts.save(bankAccount); } } You already note two things: There is no mention of Repository, here we have the plural form of the entity we want to save, because the domain expert does not know what a Repository is. For example, for an entity Customer, the plural could be Market or Customers, let the domain decide. The strange method name saveAndFlush is replaced by a less technical save method Now that we have introduced a new interface, we create an instance of it! This class can be located in your infrastructure layer, far from the domain models: public class BankAccountsJPAImpl implements BankAccounts { private BankAccountJPARepository bankAccountJPARepository; public void save(BankAccount bankAccount) { this.bankAccountJPARepository.saveAndFlush(bankAccount); } } This class BankAccountsJPAImpl can be injected to your service BankAccountService via the constructor. If one day you need to update spring-data-jpa and the upgrade breaks your code, you will not need to touch your domain layer. Stop adding multi-directional association Let’s say now that we introduce the concept of transactions to our BankAccount: @Entity @Table(&amp;quot;bank_account&amp;quot;) // ...removed for clarity public class BankAccount { // ...removed for clarity @OneToMany(fetch = LAZY) // ...simplified private List&amp;lt;Transaction&amp;gt; transactions; } the Transaction entity being: @Entity @Table(&amp;quot;bank_account_transaction&amp;quot;) // ...removed for clarity public class Transaction { // ...removed for clarity } It would be tempting to add the many-to-one relationship to Transaction, giving us access to its BankAccount, right? We would have the possibility to navigate easily between BankAccount objects to their Transactions back and forth. My take is that this should be forbidden. The association in your JPA entities should be the logical WRITE association of your aggregate. Meaning that, if the association is useless when your intention is to represent the intention of an actor, it means it should be avoided. A BankAccount owns a bunch of Transactions. Transaction is NOT linked to a BankAccount. Stop adding entity mappings whenever its possible In my example, you could note that BankAccount is not mapped to Owner, it only has its IDs. Why? The answer is simple, the only invariant (or business rule) that I have between a BankAccount and Owner is that there should be at least one. In other words, the mapping with Owner is useless. I would even say that this mapping could be dangerous. See, I could argue that the concept of Owner, even if it has a meaning in my code base, does not belong to the banking context, maybe it belongs to the sales context. Having an unnecessary relationship between these two classes would arguably bound two contexts which have nothing to do together. What if I needed to split my databases in two? In order to scale the sales application? Or change the persistence layer underneath? My mapping BankAccount &amp;lt;-&amp;gt; Owner would need to break. If you do not need more than an id, do not create a mapping. Conclusion Don’t make the same mistake again, next time, drop it: You’ll have less documentation to read and more time to worry about business related problems Do not take early architectural decisions, you do not need JPA/Hibernate Have mercy on the next developers, the code you write today is another developer’s nightmare tomorrow</description>
      <author> (Laurent Stemmer)</author>
      <guid>https://www.stemlaur.com/blog/2021/03/30/tech-hibern-hate/</guid>
      <pubDate>Sun, 11 Apr 2021 22:04:57 GMT</pubDate>
    </item>
    <item>
      <title>The Ponzi Career</title>
      <link>https://www.drorpoleg.com/the-ponzi-career/</link>
      <description>The future of work is a pyramid scheme, where every person sells his favorite person to the next person.</description>
      <author> (Dror Poleg)</author>
      <guid>https://www.drorpoleg.com/the-ponzi-career/</guid>
      <pubDate>Sun, 11 Apr 2021 22:04:55 GMT</pubDate>
    </item>
    <item>
      <title>To-Do List is a Time Management Tool - Yigit Cakar</title>
      <link>https://yigitcakar.com/to-do-list-is-a-time-management-tool/</link>
      <description>Even though the prevailing feeling is that most of the resources are limited, the only finite resource is time. Sadly, it is also the resource we tend to waste the most. Of course, we can’t, and we shouldn’t spend every waking moment with bustling activity, but at least we can try to be mindful about […]</description>
      <author> (Yigit Cakar
					
											

					
						View all posts)</author>
      <guid>https://yigitcakar.com/to-do-list-is-a-time-management-tool/</guid>
      <pubDate>Sun, 11 Apr 2021 22:04:51 GMT</pubDate>
    </item>
    <item>
      <title>A Simple, Probably-Not-Exp-Time Disjoint Set in Coq</title>
      <link>https://www.philipzucker.com/simple-coq-union-find/</link>
      <description>Hot Leaves in a Cold Worlds.</description>
      <author> ()</author>
      <guid>https://www.philipzucker.com/simple-coq-union-find/</guid>
      <pubDate>Sun, 11 Apr 2021 22:04:48 GMT</pubDate>
    </item>
    <item>
      <title>About Focuses on Results &amp;#183; Nicolas Paris</title>
      <link>https://nsirap.com/posts/028-focuses-on-results/</link>
      <description>Nicolas Paris&amp;#39;s developer website</description>
      <author> (Nicolas Paris)</author>
      <guid>https://nsirap.com/posts/028-focuses-on-results/</guid>
      <pubDate>Sun, 11 Apr 2021 22:04:46 GMT</pubDate>
    </item>
    <item>
      <title>DIY bike fit with the MyVeloFit app - CyclingTips</title>
      <link>https://cyclingtips.com/2021/04/diy-bike-fit-with-the-myvelofit-app/</link>
      <description>MyVeloFit is an app promising motion-sensing bike-fitting from the comfort of your home.</description>
      <author> (by Ronan Mc Laughlin
					photography by MyVeloFit
				April 10, 2021
		
		3 minute read)</author>
      <guid>https://cyclingtips.com/2021/04/diy-bike-fit-with-the-myvelofit-app/</guid>
      <pubDate>Sun, 11 Apr 2021 22:04:44 GMT</pubDate>
    </item>
    <item>
      <title>How to Live with Chronic Imposter Syndrome</title>
      <link>https://eugeneyan.com/writing/imposter-syndrome/</link>
      <description>More education, achievements, and awards don&amp;#39;t shoo away imposter syndrome. Here&amp;#39;s what might help.</description>
      <author> (https://eugeneyan.com/about/)</author>
      <guid>https://eugeneyan.com/writing/imposter-syndrome/</guid>
      <pubDate>Sun, 11 Apr 2021 22:04:40 GMT</pubDate>
    </item>
    <item>
      <title>Which type of novelty-seeking web developer are you?</title>
      <link>https://www.baldurbjarnason.com/2021/which-kind-of-web-developer-are-you/</link>
      <description>I’m noodling around at home and taking stock after having left a job of four years.</description>
      <author> (Baldur Bjarnason)</author>
      <guid>https://www.baldurbjarnason.com/2021/which-kind-of-web-developer-are-you/</guid>
      <pubDate>Sun, 11 Apr 2021 22:04:37 GMT</pubDate>
    </item>
    <item>
      <title>Using PyTorch + NumPy? You&amp;#39;re making a mistake.</title>
      <link>https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects/</link>
      <description>A bug that plagues thousands of open-source ML projects.</description>
      <author> (Tanel P&amp;#228;rnamaa)</author>
      <guid>https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects/</guid>
      <pubDate>Sun, 11 Apr 2021 20:04:31 GMT</pubDate>
    </item>
    <item>
      <title>Use console.log() like a pro</title>
      <link>https://markodenic.com/use-console-log-like-a-pro/</link>
      <description>Using console.log() for JavaScript debugging is the most common practice. But, there is more.</description>
      <author> (Marko Denic)</author>
      <guid>https://markodenic.com/use-console-log-like-a-pro/</guid>
      <pubDate>Sun, 11 Apr 2021 19:03:49 GMT</pubDate>
    </item>
    <item>
      <title>When Google&amp;#39;s Fancy Lawyers Screw Up and Jeopardize Sheryl Sandberg, at $1500/Hour</title>
      <link>https://mattstoller.substack.com/p/when-googles-fancy-lawyers-screw</link>
      <description>A redacted document showed extremely sensitive information. Google&amp;#39;s lawyer accidentally made it public.</description>
      <author> (Matt Stoller)</author>
      <guid>https://mattstoller.substack.com/p/when-googles-fancy-lawyers-screw</guid>
      <pubDate>Sun, 11 Apr 2021 19:03:45 GMT</pubDate>
    </item>
    <item>
      <title>Hackers develop open source firmware for the PinePhone modem, use it to make phone calls - Linux Smartphones</title>
      <link>https://linuxsmartphones.com/hackers-develop-open-source-firmware-for-the-pinephone-modem-use-it-to-make-phone-calls/</link>
      <description>Hackers develop open source firmware for the PinePhone modem, use it to make phone calls</description>
      <author> ()</author>
      <guid>https://linuxsmartphones.com/hackers-develop-open-source-firmware-for-the-pinephone-modem-use-it-to-make-phone-calls/</guid>
      <pubDate>Sun, 11 Apr 2021 18:04:36 GMT</pubDate>
    </item>
    <item>
      <title>The Exceptional Exceptions in .NET</title>
      <link>https://adamsitnik.com/files/ExceptionalExceptions.pdf</link>
      <description />
      <author> (Adam Sitnik)</author>
      <guid>https://adamsitnik.com/files/ExceptionalExceptions.pdf</guid>
      <pubDate>Sun, 11 Apr 2021 17:04:22 GMT</pubDate>
    </item>
    <item>
      <title>.NET Internals Cookbook Part 1 — Exceptions, filters and corrupted processes – Random IT Utensils</title>
      <link>https://blog.adamfurmanek.pl/2019/02/16/net-internals-cookbook-part-1/#4_Is_it_possible_that_finally_block_is_not_executed_Is_it_possible_that_only_some_of_them_are_not_executed</link>
      <description>This is the first part of the .NET Internals Cookbook series. For your convenience you can find other parts in the table of contents in Part 0 – Table of contents</description>
      <author> ()</author>
      <guid>https://blog.adamfurmanek.pl/2019/02/16/net-internals-cookbook-part-1/#4_Is_it_possible_that_finally_block_is_not_executed_Is_it_possible_that_only_some_of_them_are_not_executed</guid>
      <pubDate>Sun, 11 Apr 2021 17:04:22 GMT</pubDate>
    </item>
    <item>
      <title>Amazon.com: .NET Internals Cookbook eBook: Furmanek, Adam: Kindle Store</title>
      <link>https://www.amazon.com/dp/B07RQ4ZCJR?tag=linksfordevs-20&amp;lfd=202104</link>
      <description>Buy .NET Internals Cookbook: Read Kindle Store Reviews - Amazon.com</description>
      <author> (Share



























&amp;lt;Embed&amp;gt;)</author>
      <guid>https://www.amazon.com/dp/B07RQ4ZCJR?tag=linksfordevs-20&amp;lfd=202104</guid>
      <pubDate>Sun, 11 Apr 2021 17:04:18 GMT</pubDate>
    </item>
    <item>
      <title>r/IAmA - Comment by u/ivanhoe90 on ”I made a free alternative to Photoshop, that is used by 7 million people. Ask me Anything!”</title>
      <link>https://www.reddit.com/r/IAmA/comments/i8j5te/i_made_a_free_alternative_to_photoshop_that_is/g18ush0/</link>
      <description>59,453 votes and 2,971 comments so far on Reddit</description>
      <author> ()</author>
      <guid>https://www.reddit.com/r/IAmA/comments/i8j5te/i_made_a_free_alternative_to_photoshop_that_is/g18ush0/</guid>
      <pubDate>Sun, 11 Apr 2021 15:04:42 GMT</pubDate>
    </item>
    <item>
      <title>Pokemon or BigData</title>
      <link>http://pixelastic.github.io/pokemonorbigdata/</link>
      <description>Is it a Pokemon or a BigData tech?</description>
      <author> ()</author>
      <guid>http://pixelastic.github.io/pokemonorbigdata/</guid>
      <pubDate>Sun, 11 Apr 2021 15:04:36 GMT</pubDate>
    </item>
    <item>
      <title>Developers, Developers, Developers: Welcome to Developer Week 2021</title>
      <link>https://blog.cloudflare.com/developers-developers-developers/</link>
      <description>This week, like we have done in previous Innovation Weeks (such as Security Week or Privacy Week), we will be making many (about 20) announcements of products and features to make developers’ lives easier.</description>
      <author> (John Graham-Cumming)</author>
      <guid>https://blog.cloudflare.com/developers-developers-developers/</guid>
      <pubDate>Sun, 11 Apr 2021 13:04:16 GMT</pubDate>
    </item>
    <item>
      <title>1.0.16 &amp;#183; Discussion #364 &amp;#183; egil/bUnit</title>
      <link>https://github.com/egil/bUnit/discussions/364</link>
      <description>1.0.16</description>
      <author> (egil)</author>
      <guid>https://github.com/egil/bUnit/discussions/364</guid>
      <pubDate>Sun, 11 Apr 2021 13:04:13 GMT</pubDate>
    </item>
    <item>
      <title>I Made A Mobile App for my Significant Other (And She Doesn&amp;#39;t Use It)</title>
      <link>https://jerseyfonseca.com/blogs/wewatch</link>
      <description>&amp;#128546;</description>
      <author> ()</author>
      <guid>https://jerseyfonseca.com/blogs/wewatch</guid>
      <pubDate>Sun, 11 Apr 2021 12:04:18 GMT</pubDate>
    </item>
    <item>
      <title>The Cursed Computer Iceberg Meme</title>
      <link>https://suricrasia.online/iceberg/</link>
      <description>Blackle Mori (@suricrasia) - 2021</description>
      <author> ()</author>
      <guid>https://suricrasia.online/iceberg/</guid>
      <pubDate>Sun, 11 Apr 2021 09:04:29 GMT</pubDate>
    </item>
    <item>
      <title>In defense of Signal</title>
      <link>https://yorple.medium.com/in-defense-of-signal-45dd3395ba51</link>
      <description>Although much of the concern and criticism surrounding Signal’s integration of MobileCoin is understandable, I’d like to offer an…</description>
      <author> (https://yorple.medium.com)</author>
      <guid>https://yorple.medium.com/in-defense-of-signal-45dd3395ba51</guid>
      <pubDate>Sun, 11 Apr 2021 09:04:27 GMT</pubDate>
    </item>
    <item>
      <title>StarCraft: Emulating a buffer overflow for fun and profit – REcon Brussels, 2018</title>
      <link>https://0xeb.net/2018/02/starcraft-emulating-a-buffer-overflow-for-fun-and-profit-recon-brussels-2018/</link>
      <description>Today I present my talk at REcon Brussels. It was about a problem I had to solve at work. Basically, the classic StarCraft 1.16.1 had a buffer overflow that was exploited to create impressive maps …</description>
      <author> ()</author>
      <guid>https://0xeb.net/2018/02/starcraft-emulating-a-buffer-overflow-for-fun-and-profit-recon-brussels-2018/</guid>
      <pubDate>Sun, 11 Apr 2021 09:04:24 GMT</pubDate>
    </item>
    <item>
      <title>Epitaph</title>
      <link>https://mkremins.github.io/epitaph/</link>
      <description>Guqi</description>
      <author> ()</author>
      <guid>https://mkremins.github.io/epitaph/</guid>
      <pubDate>Sun, 11 Apr 2021 07:04:07 GMT</pubDate>
    </item>
    <item>
      <title>Securing Local Privileged Accounts in Active Directory –</title>
      <link>https://safepass.me/2021/04/08/securing-local-privileged-accounts-in-active-directory/</link>
      <description>LAPS is a Microsoft product and requires nothing more than a functional Active Directory to implement onto Windows endpoints. There is no cost associated with</description>
      <author> (James Tusini)</author>
      <guid>https://safepass.me/2021/04/08/securing-local-privileged-accounts-in-active-directory/</guid>
      <pubDate>Sun, 11 Apr 2021 07:04:05 GMT</pubDate>
    </item>
    <item>
      <title></title>
      <link>https://nitter.snopyta.org/i/lists/1380986023446933504</link>
      <description></description>
      <author> ()</author>
      <guid>https://nitter.snopyta.org/i/lists/1380986023446933504</guid>
      <pubDate>Sun, 11 Apr 2021 05:04:15 GMT</pubDate>
    </item>
    <item>
      <title>HomeAssistant-Mods/home-assistant-miele</title>
      <link>https://github.com/HomeAssistant-Mods/home-assistant-miele</link>
      <description>Miele integration for Home assistant. Contribute to HomeAssistant-Mods/home-assistant-miele development by creating an account on GitHub.</description>
      <author> (HomeAssistant-Mods)</author>
      <guid>https://github.com/HomeAssistant-Mods/home-assistant-miele</guid>
      <pubDate>Sun, 11 Apr 2021 05:04:09 GMT</pubDate>
    </item>
    <item>
      <title>Evaluating Modest SaaS Business Ideas</title>
      <link>https://greaterdanorequalto.com/evaluating-modest-saas-business-ideas/</link>
      <description>I&amp;#39;m evaluating new SaaS business ideas, and I wanted to share a little bit about exactly how I&amp;#39;m evaluating them.</description>
      <author> (Dan Hulton)</author>
      <guid>https://greaterdanorequalto.com/evaluating-modest-saas-business-ideas/</guid>
      <pubDate>Sun, 11 Apr 2021 05:04:06 GMT</pubDate>
    </item>
  </channel>
</rss>