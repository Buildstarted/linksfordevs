[
  {
    "Title": "What CTOs Really Think About Vibe Coding",
    "Url": "https://www.finalroundai.com/blog/what-ctos-think-about-vibe-coding",
    "Timestamp": "2025-08-16T13:02:15",
    "Domain": "www.finalroundai.com",
    "Description": "We asked 18 CTOs about vibe coding. 16 reported production disasters. Here's why AI-generated code is creating more problems than it solves for real engineering teams.",
    "Confidence": 0.82106435
  },
  {
    "Title": "Everything I know about good system design",
    "Url": "https://www.seangoedecke.com/good-system-design/",
    "Timestamp": "2025-08-16T13:02:07",
    "Domain": "www.seangoedecke.com",
    "Description": "I see a lot of bad system design advice. One classic is the LinkedIn-optimized “bet you never heard of queues” style of post, presumably aimed at people who are…",
    "Confidence": 0.99392545
  },
  {
    "Title": "PuTTY",
    "Url": "https://putty.software/",
    "Timestamp": "2025-08-16T12:02:16",
    "Domain": "putty.software",
    "Description": "Free software SSH client for Windows and also Unix, including an xterm-style terminal emulator.",
    "Confidence": 0.9173743
  },
  {
    "Title": "The future of large files in Git is Git",
    "Url": "https://tylercipriani.com/blog/2025/08/15/git-lfs/",
    "Timestamp": "2025-08-16T05:02:05",
    "Domain": "tylercipriani.com",
    "Description": "If Git had a nemesis, it’d be large files.",
    "Confidence": 0.99237704
  },
  {
    "Title": "Do Things that Don't Scale",
    "Url": "https://paulgraham.com/ds.html",
    "Timestamp": "2025-08-16T02:02:09",
    "Domain": "paulgraham.com",
    "Description": "July 2013One of the most common types of advice we give at Y Combinator is\nto do things that don't scale.  A lot of would-be founders believe\nthat startups either take off or don't.  You build something, make\nit available, and if you've made a better mousetrap, people beat a\npath to your door as promised.  Or they don't, in which case the\nmarket must not exist.\n[1]Actually startups take off because the founders make them take off.\nThere may be a handful that just grew by themselves, but usually\nit takes some sort of push to get them going.  A good metaphor would\nbe the cranks that car engines had before they got electric starters.\nOnce the engine was going, it would keep going, but there was a\nseparate and laborious process to get it going.RecruitThe most common unscalable thing founders have to do at the start\nis to recruit users manually.  Nearly all startups have to.  You\ncan't wait for users to come to you.  You have to go out and get\nthem.Stripe is one of the most successful startups we've funded, and the\nproblem they solved was an urgent one.   If anyone could have sat\nback and waited for users, it was Stripe.  But in fact they're\nfamous within YC for aggressive early user acquisition.Startups building things for other startups have a big pool of\npotential users in the other companies we've funded, and none took\nbetter advantage of it than Stripe.  At YC we use the term \"Collison\ninstallation\" for the technique they invented.  More diffident\nfounders ask \"Will you try our beta?\" and if the answer is yes,\nthey say \"Great, we'll send you a link.\"  But the Collison brothers\nweren't going to wait. When anyone agreed to try Stripe they'd say\n\"Right then, give me your laptop\" and set them up on the spot.There are two reasons founders resist going out and recruiting users\nindividually.  One is a combination of shyness and laziness.  They'd\nrather sit at home writing code than go out and talk to a bunch of\nstrangers and probably be rejected by most of them.  But for a\nstartup to succeed, at least one founder (usually the CEO) will\nhave to spend a lot of time on sales and marketing.\n[2]The other reason founders ignore this path is that the absolute\nnumbers seem so small at first.  This can't be how the big, famous\nstartups got started, they think. The mistake they make is to\nunderestimate the power of compound growth.  We encourage every\nstartup to measure their progress by weekly growth\nrate.  If you have 100 users, you need to get 10 more next week\nto grow 10% a week.  And while 110 may not seem much better than\n100, if you keep growing at 10% a week you'll be surprised how big\nthe numbers get.  After a year you'll have 14,000 users, and after\n2 years you'll have 2 million.You'll be doing different things when you're acquiring users a\nthousand at a time, and growth has to slow down eventually.  But\nif the market exists you can usually start by recruiting users\nmanually and then gradually switch to less manual methods. \n[3]Airbnb is a classic example of this technique.  Marketplaces are\nso hard to get rolling that you should expect to take heroic measures\nat first. In Airbnb's case, these consisted of going door to door\nin New York, recruiting new users and helping existing ones improve\ntheir listings.  When I remember the Airbnbs during YC, I picture\nthem with rolly bags, because when they showed up for tuesday dinners\nthey'd always just flown back from somewhere.FragileAirbnb now seems like an unstoppable juggernaut, but early on it\nwas so fragile that about 30 days of going out and engaging in\nperson with users made the difference between success and failure.That initial fragility was not a unique feature of Airbnb.  Almost\nall startups are fragile initially.  And that's one of the biggest\nthings inexperienced founders and investors (and reporters and\nknow-it-alls on forums) get wrong about them.  They unconsciously\njudge larval startups by the standards of established ones.  They're\nlike someone looking at a newborn baby and concluding \"there's no\nway this tiny creature could ever accomplish anything.\"It's harmless if reporters and know-it-alls dismiss your startup.\nThey always get things wrong.   It's even ok if investors dismiss\nyour startup; they'll change their minds when they see growth.  The\nbig danger is that you'll dismiss your startup yourself.  I've seen\nit happen.  I often have to encourage founders who don't see the\nfull potential of what they're building.  Even Bill Gates made that\nmistake.  He returned to Harvard for the fall semester after starting\nMicrosoft.  He didn't stay long, but he wouldn't have returned at\nall if he'd realized Microsoft was going to be even a fraction of\nthe size it turned out to be. \n[4]The question to ask about an early stage startup is not \"is this\ncompany taking over the world?\"  but \"how big could this company\nget if the founders did the right things?\"  And the right things\noften seem both laborious and inconsequential at the time. Microsoft\ncan't have seemed very impressive when it was just a couple guys\nin Albuquerque writing Basic interpreters for a market of a few\nthousand hobbyists (as they were then called), but in retrospect\nthat was the optimal path to dominating microcomputer software.\nAnd I know Brian Chesky and Joe Gebbia didn't feel like they were\nen route to the big time as they were taking \"professional\" photos\nof their first hosts' apartments.  They were just trying to survive.\nBut in retrospect that too was the optimal path to dominating a big\nmarket.How do you find users to recruit manually?  If you build something\nto solve your own problems, then\nyou only have to find your peers, which is usually straightforward.\nOtherwise you'll have to make a more deliberate effort to locate\nthe most promising vein of users.  The usual way to do that is to\nget some initial set of users by doing a comparatively untargeted\nlaunch, and then to observe which kind seem most enthusiastic, and\nseek out more like them.  For example, Ben Silbermann noticed that\na lot of the earliest Pinterest users were interested in design,\nso he went to a conference of design bloggers to recruit users, and\nthat worked well. \n[5]DelightYou should take extraordinary measures not just to acquire users,\nbut also to make them happy.  For as long as they could (which\nturned out to be surprisingly long), Wufoo sent each new user a\nhand-written thank you note.  Your first users should feel that\nsigning up with you was one of the best choices they ever made.\nAnd you in turn should be racking your brains to think of new ways\nto delight them.Why do we have to teach startups this?  Why is it counterintuitive\nfor founders?  Three reasons, I think.One is that a lot of startup founders are trained as engineers,\nand customer service is not part of the training of engineers.\nYou're supposed to build things that are robust and elegant, not\nbe slavishly attentive to individual users like some kind of\nsalesperson.  Ironically, part of the reason engineering is\ntraditionally averse to handholding is that its traditions date\nfrom a time when engineers were less powerful — when they were\nonly in charge of their narrow domain of building things, rather\nthan running the whole show.  You can be ornery when you're Scotty,\nbut not when you're Kirk.Another reason founders don't focus enough on individual customers\nis that they worry it won't scale.  But when founders of larval\nstartups worry about this, I point out that in their current state\nthey have nothing to lose.  Maybe if they go out of their way to\nmake existing users super happy, they'll one day have too many to\ndo so much for.  That would be a great problem to have.  See if you\ncan make it happen.  And incidentally, when it does, you'll find\nthat delighting customers scales better than you expected.  Partly\nbecause you can usually find ways to make anything scale more than\nyou would have predicted, and partly because delighting customers\nwill by then have permeated your culture.I have never once seen a startup lured down a blind alley by trying\ntoo hard to make their initial users happy.But perhaps the biggest thing preventing founders from realizing\nhow attentive they could be to their users is that they've never\nexperienced such attention themselves.  Their standards for customer\nservice have been set by the companies they've been customers of,\nwhich are mostly big ones.  Tim Cook doesn't send you a hand-written\nnote after you buy a laptop.  He can't.  But you can.  That's one\nadvantage of being small: you can provide a level of service no big\ncompany can. \n[6]Once you realize that existing conventions are not the upper bound\non user experience, it's interesting in a very pleasant way to think\nabout how far you could go to delight your users.ExperienceI was trying to think of a phrase to convey how extreme your attention\nto users should be, and I realized Steve Jobs had already done it:\ninsanely great.  Steve wasn't just using \"insanely\" as a synonym\nfor \"very.\"  He meant it more literally — that one should focus\non quality of execution to a degree that in everyday life would be\nconsidered pathological.All the most successful startups we've funded have, and that probably\ndoesn't surprise would-be founders.  What novice founders don't get\nis what insanely great translates to in a larval startup.  When\nSteve Jobs started using that phrase, Apple was already an established\ncompany.  He meant the Mac (and its documentation and even\npackaging — such is the nature of obsession) should be insanely\nwell designed and manufactured.  That's not hard for engineers to\ngrasp.  It's just a more extreme version of designing a robust and\nelegant product.What founders have a hard time grasping (and Steve himself might\nhave had a hard time grasping) is what insanely great morphs into\nas you roll the time slider back to the first couple months of a\nstartup's life.  It's not the product that should be insanely great,\nbut the experience of being your user.  The product is just one\ncomponent of that.  For a big company it's necessarily the dominant\none.  But you can and should give users an insanely great experience\nwith an early, incomplete, buggy product, if you make up the\ndifference with attentiveness.Can, perhaps, but should?  Yes.  Over-engaging with early users is\nnot just a permissible technique for getting growth rolling.  For\nmost successful startups it's a necessary part of the feedback loop\nthat makes the product good.  Making a better mousetrap is not an\natomic operation.  Even if you start the way most successful startups\nhave, by building something you yourself need, the first thing you\nbuild is never quite right.  And except in domains with big penalties\nfor making mistakes, it's often better not to aim for perfection\ninitially.  In software, especially, it usually works best to get\nsomething in front of users as soon as it has a quantum of utility,\nand then see what they do with it.  Perfectionism is often an excuse\nfor procrastination, and in any case your initial model of users\nis always inaccurate, even if you're one of them. \n[7]The feedback you get from engaging directly with your earliest users\nwill be the best you ever get.  When you're so big you have to\nresort to focus groups, you'll wish you could go over to your users'\nhomes and offices and watch them use your stuff like you did when\nthere were only a handful of them.FireSometimes the right unscalable trick is to focus on a deliberately\nnarrow market.  It's like keeping a fire contained at first to get\nit really hot before adding more logs.That's what Facebook did.  At first it was just for Harvard students.\nIn that form it only had a potential market of a few thousand people,\nbut because they felt it was really for them, a critical mass of\nthem signed up.  After Facebook stopped being for Harvard students,\nit remained for students at specific colleges for quite a while.\nWhen I interviewed Mark Zuckerberg at Startup School, he said that\nwhile it was a lot of work creating course lists for each school,\ndoing that made students feel the site was their natural home.Any startup that could be described as a marketplace usually has\nto start in a subset of the market, but this can work for other\nstartups as well.  It's always worth asking if there's a subset of\nthe market in which you can get a critical mass of users quickly.\n[8]Most startups that use the contained fire strategy do it unconsciously.\nThey build something for themselves and their friends, who happen\nto be the early adopters, and only realize later that they could\noffer it to a broader market.  The strategy works just as well if\nyou do it unconsciously.  The biggest danger of not being consciously\naware of this pattern is for those who naively discard part of it.\nE.g. if you don't build something for yourself and your friends,\nor even if you do, but you come from the corporate world and your\nfriends are not early adopters, you'll no longer have a perfect\ninitial market handed to you on a platter.Among companies, the best early adopters are usually other startups.\nThey're more open to new things both by nature and because, having\njust been started, they haven't made all their choices yet.  Plus\nwhen they succeed they grow fast, and you with them.  It was one\nof many unforeseen advantages of the YC model (and specifically of\nmaking YC big) that B2B startups now have an instant market of\nhundreds of other startups ready at hand.MerakiFor hardware startups there's a variant of\ndoing things that don't scale that we call \"pulling a Meraki.\"\nAlthough we didn't fund Meraki, the founders were Robert Morris's\ngrad students, so we know their history.  They got started by doing\nsomething that really doesn't scale: assembling their routers\nthemselves.Hardware startups face an obstacle that software startups don't.\nThe minimum order for a factory production run is usually several\nhundred thousand dollars.  Which can put you in a catch-22: without\na product you can't generate the growth you need to raise the money\nto manufacture your product.  Back when hardware startups had to\nrely on investors for money, you had to be pretty convincing to\novercome this.  The arrival of crowdfunding (or more precisely,\npreorders) has helped a lot.  But even so I'd advise startups to\npull a Meraki initially if they can.  That's what Pebble did.  The\nPebbles \nassembled\n the first several hundred watches themselves. If\nthey hadn't gone through that phase, they probably wouldn't have\nsold $10 million worth of watches when they did go on Kickstarter.Like paying excessive attention to early customers, fabricating\nthings yourself turns out to be valuable for hardware startups.\nYou can tweak the design faster when you're the factory, and you\nlearn things you'd never have known otherwise.  Eric Migicovsky of\nPebble said one of the things he learned was \"how valuable it was to\nsource good screws.\"   Who knew?ConsultSometimes we advise founders of B2B startups to take over-engagement\nto an extreme, and to pick a single user and act as if they were\nconsultants building something just for that one user.   The initial\nuser serves as the form for your mold; keep tweaking till you fit\ntheir needs perfectly, and you'll usually find you've made something\nother users want too.  Even if there aren't many of them, there are\nprobably adjacent territories that have more.  As long as you can\nfind just one user who really needs something and can act on that\nneed, you've got a toehold in making something people want, and\nthat's as much as any startup needs initially. \n[9]Consulting is the canonical example of work that doesn't scale.\nBut (like other ways of bestowing one's favors liberally) it's safe\nto do it so long as you're not being paid to.  That's where companies\ncross the line.  So long as you're a product company that's merely\nbeing extra attentive to a customer, they're very grateful even if\nyou don't solve all their problems.  But when they start paying you\nspecifically for that attentiveness — when they start paying\nyou by the hour — they expect you to do everything.Another consulting-like technique for recruiting initially lukewarm\nusers is to use your software yourselves on their behalf.  We\ndid that at Viaweb.  When we approached merchants asking if they\nwanted to use our software to make online stores, some said no, but\nthey'd let us make one for them.  Since we would do anything to get\nusers, we did.  We felt pretty lame at the time.  Instead of\norganizing big strategic e-commerce partnerships, we were trying\nto sell luggage and pens and men's shirts.  But in retrospect it\nwas exactly the right thing to do, because it taught us how it would\nfeel to merchants to use our software.  Sometimes the feedback loop\nwas near instantaneous: in the middle of building some merchant's\nsite I'd find I needed a feature we didn't have, so I'd spend a\ncouple hours implementing it and then resume building the site.ManualThere's a more extreme variant where you don't just use your software,\nbut are your software.  When you only have a small number of users,\nyou can sometimes get away with doing by hand things that you plan\nto automate later.  This lets you launch faster, and when you do\nfinally automate yourself out of the loop, you'll know exactly what\nto build because you'll have muscle memory from doing it yourself.When manual components look to the user like software, this technique\nstarts to have aspects of a practical joke.  For example, the way\nStripe delivered \"instant\" merchant accounts to its first users was\nthat the founders manually signed them up for traditional merchant\naccounts behind the scenes.Some startups could be entirely manual at first. If you can find\nsomeone with a problem that needs solving and you can solve it\nmanually, go ahead and do that for as long as you can, and then\ngradually automate the bottlenecks.  It would be a little frightening\nto be solving users' problems in a way that wasn't yet automatic,\nbut less frightening than the far more common case of having something\nautomatic that doesn't yet solve anyone's problems.BigI should mention one sort of initial tactic that usually doesn't\nwork: the Big Launch.  I occasionally meet founders who seem to\nbelieve startups are projectiles rather than powered aircraft, and\nthat they'll make it big if and only if they're launched with\nsufficient initial velocity.  They want to launch simultaneously\nin 8 different publications, with embargoes.  And on a tuesday, of\ncourse, since they read somewhere that's the optimum day to launch\nsomething.It's easy to see how little launches matter.  Think of some successful\nstartups.  How many of their launches do you remember?\nAll you need from a launch is some initial core of users.  How well\nyou're doing a few months later will depend more on how happy you\nmade those users than how many there were of them.\n[10]So why do founders think launches matter?  A combination of solipsism\nand laziness.  They think what they're building is so great that\neveryone who hears about it will immediately sign up.  Plus it would\nbe so much less work if you could get users merely by broadcasting\nyour existence, rather than recruiting them one at a time.  But\neven if what you're building really is great, getting users will\nalways be a gradual process — partly because great things\nare usually also novel, but mainly because users have other things\nto think about.Partnerships too usually don't work.  They don't work for startups\nin general, but they especially don't work as a way to get growth\nstarted.  It's a common mistake among inexperienced founders to\nbelieve that a partnership with a big company will be their big\nbreak.  Six months later they're all saying the same thing: that\nwas way more work than we expected, and we ended up getting practically\nnothing out of it. \n[11]It's not enough just to do something extraordinary initially.  You\nhave to make an extraordinary effort initially.  Any strategy\nthat omits the effort — whether it's expecting a big launch to\nget you users, or a big partner — is ipso facto suspect.VectorThe need to do something unscalably laborious to get started is so\nnearly universal that it might be a good idea to stop thinking of\nstartup ideas as scalars.  Instead we should try thinking of them\nas pairs of what you're going to build, plus the unscalable thing(s)\nyou're going to do initially to get the company going.It could be interesting to start viewing startup ideas this way,\nbecause now that there are two components you can try to be imaginative\nabout the second as well as the first.  But in most cases the second\ncomponent will be what it usually is — recruit users manually\nand give them an overwhelmingly good experience — and the main\nbenefit of treating startups as vectors will be to remind founders\nthey need to work hard in two dimensions.\n[12]In the best case, both components of the vector contribute to your\ncompany's DNA: the unscalable things you have to do to get started\nare not merely a necessary evil, but change the company permanently\nfor the better.  If you have to be aggressive about user acquisition\nwhen you're small, you'll probably still be aggressive when you're\nbig.  If you have to manufacture your own hardware, or use your\nsoftware on users's behalf, you'll learn things you couldn't have\nlearned otherwise.  And most importantly, if you have to work hard\nto delight users when you only have a handful of them, you'll keep\ndoing it when you have a lot.Notes[1]\nActually Emerson never mentioned mousetraps specifically.  He\nwrote \"If a man has good corn or wood, or boards, or pigs, to sell,\nor can make better chairs or knives, crucibles or church organs,\nthan anybody else, you will find a broad hard-beaten road to his\nhouse, though it be in the woods.\"[2]\nThanks to Sam Altman for suggesting I make this explicit.\nAnd no, you can't avoid doing sales by hiring someone to do it for\nyou.  You have to do sales yourself initially.  Later you can hire\na real salesperson to replace you.[3]\nThe reason this works is that as you get bigger, your size\nhelps you grow.  Patrick Collison wrote \"At some point, there was\na very noticeable change in how Stripe felt. It tipped from being\nthis boulder we had to push to being a train car that in fact had\nits own momentum.\"[4]\nOne of the more subtle ways in which YC can help founders\nis by calibrating their ambitions, because we know exactly how a\nlot of successful startups looked when they were just getting\nstarted.[5]\nIf you're building something for which you can't easily get\na small set of users to observe — e.g. enterprise software — and\nin a domain where you have no connections, you'll have to rely on\ncold calls and introductions.  But should you even be working on\nsuch an idea?[6]\nGarry Tan pointed out an interesting trap founders fall into\nin the beginning.  They want so much to seem big that they imitate\neven the flaws of big companies, like indifference to individual\nusers.  This seems to them more \"professional.\"  Actually it's\nbetter to embrace the fact that you're small and use whatever\nadvantages that brings.[7]\nYour user model almost couldn't be perfectly accurate, because\nusers' needs often change in response to what you build for them.\nBuild them a microcomputer, and suddenly they need to run spreadsheets\non it, because the arrival of your new microcomputer causes someone\nto invent the spreadsheet.[8]\nIf you have to choose between the subset that will sign up\nquickest and those that will pay the most, it's usually best to\npick the former, because those are probably the early adopters.\nThey'll have a better influence on your product, and they won't\nmake you expend as much effort on sales.  And though they have less\nmoney, you don't need that much to maintain your target growth rate\nearly on.[9]\nYes, I can imagine cases where you could end up making\nsomething that was really only useful for one user.  But those are\nusually obvious, even to inexperienced founders.  So if it's not\nobvious you'd be making something for a market of one, don't worry\nabout that danger.[10]\nThere may even be an inverse correlation between launch\nmagnitude and success.  The only launches I remember are famous\nflops like the Segway and Google Wave.  Wave is a particularly\nalarming example, because I think it was actually a great idea that\nwas killed partly by its overdone launch.[11]\nGoogle grew big on the back of Yahoo, but that wasn't a\npartnership.  Yahoo was their customer.[12]\nIt will also remind founders that an idea where the second\ncomponent is empty — an idea where there is nothing you can do\nto get going, e.g. because you have no way to find users to recruit\nmanually — is probably a bad idea, at least for those founders.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Kevin\nHale, Steven Levy, Jessica Livingston, Geoff Ralston, and Garry Tan for reading\ndrafts of this.",
    "Confidence": 0.96805847
  },
  {
    "Title": "The Hidden Drivers of HRM's Performance on ARC-AGI",
    "Url": "https://arcprize.org/blog/hrm-analysis",
    "Timestamp": "2025-08-16T01:04:06",
    "Domain": "arcprize.org",
    "Description": "We scored on hidden tasks, ran ablations, and found that performance from the Hierarchical Reasoning Model comes from an unexpected source",
    "Confidence": 0.98813206
  },
  {
    "Title": "Lean Claude Code for Production | Nizar's Blog",
    "Url": "https://nizar.se/lean-claude-code-for-production/",
    "Timestamp": "2025-08-16T01:04:02",
    "Domain": "nizar.se",
    "Description": "Many agentic coding demos showcase landing pages, one-off scripts, or greenfield projects. While technically impressive, they often produce single files with little thought for maintainability. Even OpenAI's ChatGPT 5 launch demo followed this pattern. At the other extreme, some content focuses almost entirely on elaborate integrations and orchestrations.",
    "Confidence": 0.9940357
  },
  {
    "Title": "I’m sorry, but the solution to Online Safety Act Age-Verification age-gating & censorship blocks is *not* to call on platforms to “ban the UK”; here I shall respectfully explain why…",
    "Url": "https://alecmuffett.com/article/114445",
    "Timestamp": "2025-08-16T01:03:59",
    "Domain": "alecmuffett.com",
    "Description": "Some folk, including Thomas Pearson with 115k followers on TikTok, are calling for big global platforms to shun the UK in order to “…make the UK Government lose money, and fast”. In thi…",
    "Confidence": 0.72960734
  },
  {
    "Title": "There Is No Bubble",
    "Url": "https://mattwie.se/there-is-no-bubble",
    "Timestamp": "2025-08-16T01:03:52",
    "Domain": "mattwie.se",
    "Description": "My thoughts on data center buildout and demand for compute, and how that relates to the 'tech bubble'",
    "Confidence": 0.8116515
  },
  {
    "Title": "What I wish I'd done differently with AbstractOps",
    "Url": "https://blog.hari.ooo/p/what-i-wish-id-done-differently-with",
    "Timestamp": "2025-08-16T01:03:49",
    "Domain": "blog.hari.ooo",
    "Description": "All successful startups are alike; each failed startup is a failure in its own way",
    "Confidence": 0.96527106
  },
  {
    "Title": "Talking to ChatGPT costs 5ml of water, not 500ml",
    "Url": "https://www.seangoedecke.com/water-impact-of-ai/",
    "Timestamp": "2025-08-16T01:03:45",
    "Domain": "www.seangoedecke.com",
    "Description": "Summarizing a whole lot of internet argument about the water usage impact of language models",
    "Confidence": 0.97820187
  },
  {
    "Title": "Interviewing your laptop - Biased and Inefficient",
    "Url": "https://notstatschat.rbind.io/2025/08/15/interviewing-your-laptop/",
    "Timestamp": "2025-08-16T01:03:42",
    "Domain": "notstatschat.rbind.io",
    "Description": "There’s increasing interest in (or, at least, coverage of) the idea that surveying large language models could substitute for surveying people. This has obvious advantages: to repurpose a Heinlein quote “it’s cheap, clean, convenient, and free of any possibility of wrongdoing–and you don’t have to go home in the cold”. The problem is I can’t see how it could possibly work.",
    "Confidence": 0.94961524
  },
  {
    "Title": "Lessons Learned from Rewriting UltraGraph",
    "Url": "https://deepcausality.com/blog/lessons-learned-from-rewriting-ultragraph/",
    "Timestamp": "2025-08-16T01:03:39",
    "Domain": "deepcausality.com",
    "Description": "This post summarizes the lessons learned from rewriting UltraGraph v.0.8",
    "Confidence": 0.9882058
  },
  {
    "Title": "The Art of the Talk",
    "Url": "https://elijahpotter.dev/articles/the_art_of_the_talk",
    "Timestamp": "2025-08-16T01:03:36",
    "Domain": "elijahpotter.dev",
    "Description": "I've given dozens of talks over the years, yet I still feel like I have much to learn about public speaking. Preparing for my upcoming talk at WordCamp US has me stopping to reflect on what I already know.",
    "Confidence": 0.9293911
  },
  {
    "Title": "Making Claude Behave",
    "Url": "https://julesrosser.com/blog/Making-Claude-Behave.html",
    "Timestamp": "2025-08-16T01:03:32",
    "Domain": "julesrosser.com",
    "Description": "After hearing great things about the Claude code agent, I made the switch from Cursor, but becoming efficient was a bit of a struggle. So here are some notes to help other beginners get started with Claude code.",
    "Confidence": 0.9926147
  },
  {
    "Title": "TextKit 2 - the promised land",
    "Url": "https://blog.krzyzanowskim.com/2025/08/14/textkit-2-the-promised-land/",
    "Timestamp": "2025-08-16T01:03:29",
    "Domain": "blog.krzyzanowskim.com",
    "Description": "After 4 years with Apple's TextKit 2: The promised 'better' text engine has unstable scrolling, unreliable height estimates, and viewport issues so bad that even Apple's TextEdit suffers from them. Good architecture, but the implementation makes it frustratingly difficult for real-world apps.",
    "Confidence": 0.9982566
  },
  {
    "Title": "The Electric Fence Stopped Working Years Ago",
    "Url": "https://soonly.com/electric-fences/",
    "Timestamp": "2025-08-16T01:03:25",
    "Domain": "soonly.com",
    "Description": "\"Don't worry, he won't leave the porch. The electric fence hasn't worked in years, but he still won't go past it.\"",
    "Confidence": 0.57440084
  },
  {
    "Title": "This is how the Swiss would have done HS2 — Freewheeling",
    "Url": "https://www.freewheeling.info/blog/swiss-hs2",
    "Timestamp": "2025-08-16T01:03:21",
    "Domain": "www.freewheeling.info",
    "Description": "HS2 has become a case study in how not to build infrastructure. But what if we’d taken a different path entirely?  In this post, I imagine how the Swiss would have done it:  starting with the timetable, not the project. It’s a counterfactual, but it’s not a fantasy.",
    "Confidence": 0.9776957
  },
  {
    "Title": "I'm really happy with my Pinetime",
    "Url": "https://whynothugo.nl/journal/2025/08/09/im-really-happy-with-my-pinetime/",
    "Timestamp": "2025-08-16T01:03:16",
    "Domain": "whynothugo.nl",
    "Description": "I’ve been using my Pinetime with InfiniTime since 2021. It’s not perfect,\nbut it’s definitely great. I’m quite happy with it, and wouldn’t trade it for\nany other existing watch or smartwatch.",
    "Confidence": 0.98483115
  },
  {
    "Title": "Self-hosted Forgejo Actions Runner",
    "Url": "https://dbushell.com/2025/08/15/self-hosted-forgejo-actions-runner/",
    "Timestamp": "2025-08-16T01:03:12",
    "Domain": "dbushell.com",
    "Description": "The one where it works on my machine",
    "Confidence": 0.9785615
  },
  {
    "Title": "Dependency Hell Is a Real Place",
    "Url": "https://systemsandsociety.com/2025/05/01/dependency-hell-is-a-real-place/",
    "Timestamp": "2025-08-16T01:03:08",
    "Domain": "systemsandsociety.com",
    "Description": "Software dependencies is not primarily a technical problem. It’s a problem of people with misaligned interests. Understand this—or go to dependency hell.",
    "Confidence": 0.9491043
  },
  {
    "Title": "On waste — bayindirh",
    "Url": "https://blog.bayindirh.io/blog/on-waste/",
    "Timestamp": "2025-08-16T01:03:05",
    "Domain": "blog.bayindirh.io",
    "Description": "Lately, I have been pondering the waste we generate as we live and the ways to reduce it. As I scale down, I fill trash bags with things I can’t use, which bothers me. The items that can be donated and have a second life are strictly excluded from this definition, though. They’re donated to people who need them.",
    "Confidence": 0.870298
  },
  {
    "Title": "Expanded file type support for issue attachments [GA] · community · Discussion #169478",
    "Url": "https://github.com/orgs/community/discussions/169478",
    "Timestamp": "2025-08-16T01:03:00",
    "Domain": "github.com",
    "Description": "Hello Community! 👋 uploading.mp4 You can now upload a wider range of file types to issues, pull requests, discussions, and comments, making it easier to share code, data, logs, and more. New suppor...",
    "Confidence": 0.9512474
  },
  {
    "Title": "Your Review: Dating Men In The Bay Area",
    "Url": "https://www.astralcodexten.com/p/your-review-dating-men-in-the-bay",
    "Timestamp": "2025-08-16T01:02:56",
    "Domain": "www.astralcodexten.com",
    "Description": "Finalist #8 in the Review Contest",
    "Confidence": 0.95200586
  },
  {
    "Title": "Why I Switched to JSON Prompting and Why You Should Too",
    "Url": "https://www.analyticsvidhya.com/blog/2025/08/json-prompting/",
    "Timestamp": "2025-08-16T01:02:46",
    "Domain": "www.analyticsvidhya.com",
    "Description": "Learn how JSON prompting can transform your interactions with large language models for more accurate and efficient results.",
    "Confidence": 0.9608315
  },
  {
    "Title": "Why Game Devs Don't Merge Files",
    "Url": "https://www.kuril.in/blog/why-game-devs-dont-merge-files/",
    "Timestamp": "2025-08-16T01:02:40",
    "Domain": "www.kuril.in",
    "Description": "Why game developers can't merge files like regular software teams: the reality of working with terabytes of binary assets, exclusive file locks, Perforce workflows, and the human coordination rituals that emerge when two artists edit the same texture.",
    "Confidence": 0.9871374
  },
  {
    "Title": "Edka Digital | Reduce Kubernetes Complexity | Deploy anything\n",
    "Url": "https://edka.io/",
    "Timestamp": "2025-08-16T00:02:24",
    "Domain": "edka.io",
    "Description": "Enterprise Kubernetes Management Platform - Simplify cloud operations and accelerate application delivery on Kubernetes\n",
    "Confidence": 0.97802424
  },
  {
    "Title": "The beauty of a text only webpage",
    "Url": "https://albanbrooke.com/the-beauty-of-a-text-only-webpage/",
    "Timestamp": "2025-08-16T00:02:21",
    "Domain": "albanbrooke.com",
    "Description": "There's something I love about opening a text-only webpage. \n\nThey're a refuge from the GDPR cookie banners, the trashy ads, the email opt-ins, and the god...",
    "Confidence": 0.98042774
  },
  {
    "Title": "Planning – The Core Reason Why Gameplay Feels Good – Frictional Games",
    "Url": "https://frictionalgames.com/2017-05-planning-the-core-reason-why-gameplay-feels-good/",
    "Timestamp": "2025-08-16T00:02:17",
    "Domain": "frictionalgames.com",
    "Description": "In this post I dig into planning, and how it is a fundamental part of what makes a game engaging. Planning affects many aspects of what is so special about games and why we enjoy playing them. This post will go over the reasons behind this, and explains why planning is so important for narrative games.",
    "Confidence": 0.9849446
  },
  {
    "Title": "Alex Charlton — Dithering on the GPU",
    "Url": "https://alex-charlton.com/posts/Dithering_on_the_GPU/",
    "Timestamp": "2025-08-16T00:02:13",
    "Domain": "alex-charlton.com",
    "Description": "Wherein I describe a novel algorithm for ordered dithering based on an arbitrary palette, which may be executed on systems such as – but not limited to – graphics processing units.",
    "Confidence": 0.98222387
  },
  {
    "Title": "Our Workflow with Blender and Godot - Blender Studio",
    "Url": "https://studio.blender.org/blog/our-workflow-with-blender-and-godot/",
    "Timestamp": "2025-08-15T23:02:16",
    "Domain": "studio.blender.org",
    "Description": "For DOGWALK we set up a pipeline between Blender and Godot. Here is how we did it.",
    "Confidence": 0.98800266
  },
  {
    "Title": "» Bullfrog in the Dungeon The Digital Antiquarian",
    "Url": "https://www.filfre.net/2025/08/bullfrog-in-the-dungeon/",
    "Timestamp": "2025-08-15T22:02:31",
    "Domain": "www.filfre.net",
    "Description": "In January of 1995, Electronic Arts bought the prestigious British games studio Bullfrog Productions for an undisclosed sum that was rumored to be in the neighborhood of $45 million. The lives of the 35 or so people who worked at Bullfrog were transformed overnight. Peter Molyneux, the man who had build the studio’s reputation on the back of his “god game” Populous six years earlier, woke up the morning after the contract was signed with real money to spend for the first time in his life. For him and his colleagues, the new situation was gratifying, but also vaguely unsettling.",
    "Confidence": 0.72851247
  },
  {
    "Title": "2,178 Occult Books Now Digitized & Put Online, Thanks to the Ritman Library and Da Vinci Code Author Dan Brown",
    "Url": "https://www.openculture.com/2025/08/2178-occult-books-now-digitized-put-online.html",
    "Timestamp": "2025-08-15T22:02:25",
    "Domain": "www.openculture.com",
    "Description": "In 2018 we brought you some exciting news.",
    "Confidence": 0.55922234
  },
  {
    "Title": "New trend: extreme hours at AI startups",
    "Url": "https://blog.pragmaticengineer.com/new-trend-extreme-hours-at-ai-startups/",
    "Timestamp": "2025-08-15T20:02:10",
    "Domain": "blog.pragmaticengineer.com",
    "Description": "Pulling 80+ hour work weeks – including weekends – is becoming the norm across AI startups, and is unlikely to stop while AI is so hot.",
    "Confidence": 0.8629231
  }
]