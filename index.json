[
  {
    "Title": "Akita Software - Developer Advocate",
    "Url": "https://jobs.lever.co/akitasoftware/4f5816d9-f8e1-4e7f-ab57-66de786619db",
    "Timestamp": "2021-12-21T01:01:38",
    "Domain": "jobs.lever.co",
    "Description": "Developer experience crucial to Akita's vision of one-click observability: making it not only easy, but delightful, for developers to understand the hairy complexities of their services and APIs. ✨ Akita is looking for our first developer advocate to take the lead on realizing this vision. We're looking for someone passionate about communicating with our developer community to understand their needs and where Akita can be most valuable. What is Akita? What part of my system is falling down? Why is my endpoint slow? What services am I calling? Today, answering these questions requires developers to dig into logs, metrics, and traces—and this scavenger hunt is only if you're lucky enough to have observability installed! At Akita, we're building the first API-centric observability platform to make observability accessible for all developers. Two of the coolest parts of Akita's approach are 1) the ability to observe system behavior simply by dropping in and watching API traffic and 2)",
    "Confidence": 0.96729636
  },
  {
    "Title": "Monte Carlo Options Pricing · Sasha Kuznetsov's Blog",
    "Url": "https://blog.skz.dev/monte-carlo-options-pricing",
    "Timestamp": "2021-12-21T00:02:24",
    "Domain": "blog.skz.dev",
    "Description": "The options casino",
    "Confidence": 0.85099363
  },
  {
    "Title": "Hello World - Let's talk about .NET and .NET Conf",
    "Url": "https://www.youtube.com/watch?v=m032k9Dpg-s",
    "Timestamp": "2021-12-21T00:02:20",
    "Domain": "www.youtube.com",
    "Description": "Join Frank Boucher and Jeff Fritz to hear all things .Net 6 and .Net Conf.Why/ How use .NET today-----------------------.NET 6 has reached release candidate ...",
    "Confidence": 0.99855334
  },
  {
    "Title": "Reflecting on wasted effort :: Sacha Chua",
    "Url": "https://sachachua.com/blog/2021/12/reflecting-on-wasted-effort/",
    "Timestamp": "2021-12-21T00:02:18",
    "Domain": "sachachua.com",
    "Description": "One way to look for ways to improve is to think about where the waste might be. I wanted to reflect on how I'm currently doing things and where I might be wasting effort.",
    "Confidence": 0.7724753
  },
  {
    "Title": "Consuming Articles Offline",
    "Url": "http://blog.nawaz.org/posts/2021/Dec/consuming-articles-offline/",
    "Timestamp": "2021-12-21T00:02:18",
    "Domain": "blog.nawaz.org",
    "Description": "My desktop is my portal to the Internet. [1] Lately, I’ve needed to spend significant amounts of time away from my machine. So I took to...",
    "Confidence": 0.7589596
  },
  {
    "Title": "Self arrest on the Slippery Slope of Addiction",
    "Url": "https://dimitarsimeonov.com/2021/12/20/self-arrest-on-the-slippery-slope-of-addiction",
    "Timestamp": "2021-12-21T00:02:18",
    "Domain": "dimitarsimeonov.com",
    "Description": "20 December 2021",
    "Confidence": 0.666373
  },
  {
    "Title": "Simple server alerts on a need-to-know basis",
    "Url": "https://nbailey.ca/post/simple-alerts/",
    "Timestamp": "2021-12-21T00:02:18",
    "Domain": "nbailey.ca",
    "Description": "give your server a voice to scream with",
    "Confidence": 0.9615615
  },
  {
    "Title": "Lies, Damn Lies, and Software You Rent",
    "Url": "https://den.dev/blog/software-rentals/",
    "Timestamp": "2021-12-21T00:02:18",
    "Domain": "den.dev",
    "Description": "Why it's a bad thing that we don't get to use perpetual licenses and instead rely on software subscriptions.",
    "Confidence": 0.9599396
  },
  {
    "Title": "How a Web Design Goes Straight to Hell - The Oatmeal",
    "Url": "https://theoatmeal.com/comics/design_hell",
    "Timestamp": "2021-12-20T23:07:22",
    "Domain": "theoatmeal.com",
    "Description": "This is for all the web designers out there who have suffered as I have suffered.",
    "Confidence": 0.7780006
  },
  {
    "Title": "Home | European alternatives",
    "Url": "https://european-alternatives.eu/",
    "Timestamp": "2021-12-20T23:01:41",
    "Domain": "european-alternatives.eu",
    "Description": "Helping you find european alternatives for digital service and products, like cloud services and SASS products.",
    "Confidence": 0.7159678
  },
  {
    "Title": "PullRequest | Code Review as a Service",
    "Url": "https://www.pullrequest.com/",
    "Timestamp": "2021-12-20T22:02:14",
    "Domain": "www.pullrequest.com",
    "Description": "PullRequest’s on-demand code review helps developers identify bugs and ship more features. Our network of professional reviewers can help your team write cleaner code, faster.",
    "Confidence": 0.93181014
  },
  {
    "Title": "There's never been a better time to build websites | simeonGriggs.dev",
    "Url": "https://www.simeongriggs.dev/there-has-never-been-a-better-time-to-build-websites",
    "Timestamp": "2021-12-20T22:02:14",
    "Domain": "www.simeongriggs.dev",
    "Description": "We're closing in on the end of 2021 and I'm as excited now about building websites as I've been in ~25 years.",
    "Confidence": 0.9404552
  },
  {
    "Title": "GitHub - swc-project/swc: swc is a super-fast compiler written in rust; producing widely-supported javascript from modern standards and typescript.",
    "Url": "https://github.com/swc-project/swc",
    "Timestamp": "2021-12-20T21:06:42",
    "Domain": "github.com",
    "Description": "swc is a super-fast compiler written in rust; producing widely-supported javascript from modern standards and typescript. - GitHub - swc-project/swc: swc is a super-fast compiler written in rust; p...",
    "Confidence": 0.99272007
  },
  {
    "Title": "British police give Have I Been Pwned 226 million new passwords - IT Pro - News",
    "Url": "https://www.thecherawchronicle.com/british-police-give-have-i-been-pwned-226-million-new-passwords-it-pro-news/",
    "Timestamp": "2021-12-20T21:01:50",
    "Domain": "www.thecherawchronicle.com",
    "Description": "The National Cybercrime Unit, part of the UK’s National Crime Agency, shared nearly 586 million...",
    "Confidence": 0.6487375
  },
  {
    "Title": "Learn Accounting Online for Free | AccountingCoach",
    "Url": "https://www.accountingcoach.com/",
    "Timestamp": "2021-12-20T20:07:53",
    "Domain": "www.accountingcoach.com",
    "Description": "Are you looking for a great accounting program? With the AccountingCoach large number of free online courses, you can start learning today and get an accounting certificate!",
    "Confidence": 0.5929858
  },
  {
    "Title": "Immunity",
    "Url": "https://xkcd.com/2557/",
    "Timestamp": "2021-12-20T20:02:01",
    "Domain": "xkcd.com",
    "Description": "",
    "Confidence": 0.8522955
  },
  {
    "Title": "Test tools for .NET and cross-platform apps",
    "Url": "https://devblogs.microsoft.com/visualstudio/vs22-test-tools-for-net-and-cross-platform-apps/",
    "Timestamp": "2021-12-20T19:02:17",
    "Domain": "devblogs.microsoft.com",
    "Description": "Visual Studio 2022 brings better test tools to your everyday development with Show in Test Explorer, Remote Testing, Test audio cues, Playwright, and more!",
    "Confidence": 0.99003243
  },
  {
    "Title": "[Last Week in .NET #73] – Holiday Road Part Deux",
    "Url": "https://georgestocker.com/2021/12/20/last-week-in-net-73-holiday-road-part-deux/",
    "Timestamp": "2021-12-20T19:02:17",
    "Domain": "georgestocker.com",
    "Description": "This is part two of 2021’s greatest clicks on Last Week in .NET. Today we’ll cover July-Present, and speaking of Presents… have you bought yours yet? Yea, that’s a Christmas…",
    "Confidence": 0.87548906
  },
  {
    "Title": "Cancelling IAsyncEnumerable in C#",
    "Url": "https://jeremybytes.blogspot.com/2021/12/cancelling-iasyncenumerable-in-c.html",
    "Timestamp": "2021-12-20T19:02:17",
    "Domain": "jeremybytes.blogspot.com",
    "Description": "   IAsyncEnumerable combines the power of IEnumerable (which lets us \"foreach\"   through items) with the joys of async code (that we can \"aw...",
    "Confidence": 0.8792195
  },
  {
    "Title": "The Download: .NET 6, VS Code, WinApp SDK, and XBox at 20",
    "Url": "https://www.youtube.com/watch?app=desktop&v=wAOgAUvC9kY",
    "Timestamp": "2021-12-20T18:02:05",
    "Domain": "www.youtube.com",
    "Description": "Welcome to The Download!  Christina's back with a new take on an old concept, bringing you the latest developer news of the week, including:0:00 Intro01:28 A...",
    "Confidence": 0.9969644
  },
  {
    "Title": "Windows UI Library (WinUI) - Windows apps",
    "Url": "https://docs.microsoft.com/en-us/windows/apps/winui/?WT.mc_id=onedevquestion-c9-winui",
    "Timestamp": "2021-12-20T17:03:00",
    "Domain": "docs.microsoft.com",
    "Description": "WinUI Libraries for Windows app development.",
    "Confidence": 0.67757803
  },
  {
    "Title": "HTTP Toolkit",
    "Url": "https://httptoolkit.tech/",
    "Timestamp": "2021-12-20T16:15:17",
    "Domain": "httptoolkit.tech",
    "Description": "Beautiful, cross-platform & open-source tools for debugging, testing and building with HTTP(S), on Windows, Linux & Mac.",
    "Confidence": 0.9874306
  },
  {
    "Title": "In 2021, the Internet went for TikTok, space and beyond",
    "Url": "https://blog.cloudflare.com/popular-domains-year-in-review-2021/",
    "Timestamp": "2021-12-20T16:02:18",
    "Domain": "blog.cloudflare.com",
    "Description": "Join us in our Year in Review 2021 focused on the most popular domains-websites.",
    "Confidence": 0.6759417
  },
  {
    "Title": "Supercharging your cloud applications with Orleans",
    "Url": "https://www.youtube.com/watch?app=desktop&v=wYXSZ9VAQCM",
    "Timestamp": "2021-12-20T15:02:05",
    "Domain": "www.youtube.com",
    "Description": "This session will show you how to build cloud native applications using Orleans. It does not require prior knowledge of Orleans or concepts such as actors. I...",
    "Confidence": 0.9970317
  },
  {
    "Title": "Getting Roslyn (C# compiler) and Language versions - Gérald Barré",
    "Url": "https://www.meziantou.net/getting-roslyn-csharp-compiler-and-language-versions.htm",
    "Timestamp": "2021-12-20T15:02:05",
    "Domain": "www.meziantou.net",
    "Description": "In this post, I describe how to find the version of Roslyn and the language version currently in use in a project.",
    "Confidence": 0.9768021
  },
  {
    "Title": "My Parents Collect Cans for a Living",
    "Url": "https://www.thenation.com/article/society/parents-collecting-cans-bottles/",
    "Timestamp": "2021-12-20T15:02:04",
    "Domain": "www.thenation.com",
    "Description": "When people ask about my family now, I tell them not with embarrassment or shame but with pride.",
    "Confidence": 0.9333545
  },
  {
    "Title": "GitHub - mendel5/alternative-front-ends: Overview of alternative open source front-ends for popular internet platforms (e.g. YouTube, Twitter, etc.)",
    "Url": "https://github.com/mendel5/alternative-front-ends",
    "Timestamp": "2021-12-20T15:02:04",
    "Domain": "github.com",
    "Description": "Overview of alternative open source front-ends for popular internet platforms (e.g. YouTube, Twitter, etc.) - GitHub - mendel5/alternative-front-ends: Overview of alternative open source front-ends...",
    "Confidence": 0.9329834
  },
  {
    "Title": "How to create your own .NET CLI tools to make your life easier",
    "Url": "https://www.youtube.com/watch?v=JNDgcBDZPkU",
    "Timestamp": "2021-12-20T13:02:07",
    "Domain": "www.youtube.com",
    "Description": "Check out my courses: https://nickchapsas.comBecome a Patreon and get source code access: https://www.patreon.com/nickchapsasHello everybody I'm Nick and in ...",
    "Confidence": 0.9901828
  },
  {
    "Title": "Negative feature response: Protect the user from accidental collection deletion",
    "Url": "https://ayende.com/blog/195809-C/negative-feature-response-protect-the-user-from-accidental-collection-deletion?Key=4da9c1f5-b86c-4595-9481-7182947fbc56",
    "Timestamp": "2021-12-20T13:02:05",
    "Domain": "ayende.com",
    "Description": "A RavenDB user has accidentally deleted a collection. They intended to do something else, probably, but&hellip;&nbsp; They have a backup, but as you can imag...",
    "Confidence": 0.9412062
  },
  {
    "Title": "Against 3X Speed - David Perell",
    "Url": "https://perell.com/essay/against-3x-speed/",
    "Timestamp": "2021-12-20T12:01:43",
    "Domain": "perell.com",
    "Description": "It’s okay to not know everything. The world rewards people who develop expertise. When that expertise is unique, it’s developed through direct experience and deliberate reflection.",
    "Confidence": 0.5772455
  },
  {
    "Title": "This is my Mum's 80th birthday present.",
    "Url": "http://fourlightyears.blogspot.com/2021/12/this-is-my-mums-80th-birthday-present.html",
    "Timestamp": "2021-12-20T10:01:58",
    "Domain": "fourlightyears.blogspot.com",
    "Description": " 20 Dec 2021 andrew.stuart@supercoders.com.au It's a rotary phone from the 1970's.  This is the sort of phone we had in the house when I was...",
    "Confidence": 0.5891612
  },
  {
    "Title": "Third-Party DI Container And Autofac - Code Maze",
    "Url": "https://code-maze.com/using-autofac-dotnet/",
    "Timestamp": "2021-12-20T09:02:33",
    "Domain": "code-maze.com",
    "Description": "Autofac is a popular and flexible third-party dependency injection container for .NET application development.",
    "Confidence": 0.9883928
  },
  {
    "Title": "286: is not null",
    "Url": "https://www.mergeconflict.fm/285",
    "Timestamp": "2021-12-20T09:02:30",
    "Domain": "www.mergeconflict.fm",
    "Description": "More C# features coming at you! Ones that you totally need to know about!",
    "Confidence": 0.8817835
  },
  {
    "Title": "Use calendar, mailbox settings and Teams presence in ASP.NET Core hosted Blazor WASM with Microsoft Graph",
    "Url": "https://damienbod.com/2021/12/20/use-calendar-mailbox-settings-and-teams-presence-in-asp-net-core-hosted-blazor-wasm-with-microsoft-graph/",
    "Timestamp": "2021-12-20T09:02:29",
    "Domain": "damienbod.com",
    "Description": "This article shows how to use Microsoft Graph with delegated permissions in a Blazor WASM ASP.NET Core hosted application. The application uses Microsoft.Identity.Web and the BFF architecture to au…",
    "Confidence": 0.9966148
  },
  {
    "Title": ".NET Advent Calendar - .NET Advent Calendar 2021, Day 18",
    "Url": "https://dotnet.christmas/2021/18",
    "Timestamp": "2021-12-20T09:02:29",
    "Domain": "dotnet.christmas",
    "Description": "One blog post every day until Christmas.",
    "Confidence": 0.5055356
  },
  {
    "Title": "TypeScript for Pythonistas",
    "Url": "https://medium.com/@Pilot-EPD-Blog/typescript-for-pythonistas-f90bbb297f0a",
    "Timestamp": "2021-12-20T06:02:25",
    "Domain": "medium.com",
    "Description": "Authored by Allison Kaptur",
    "Confidence": 0.8977753
  },
  {
    "Title": "Getting started with #DynamoDB in C#",
    "Url": "https://blog.dotnetframework.org/2021/12/14/getting-started-with-dynamodb-in-c/",
    "Timestamp": "2021-12-20T06:02:21",
    "Domain": "blog.dotnetframework.org",
    "Description": "DynamoDB is a good way to get started with NoSQL databases, and being hosted in AWS, means that you don’t have to worry about servers or backups. Now, a few assumptions before starting. I&#82…",
    "Confidence": 0.9854572
  },
  {
    "Title": "How to Upgrade a Codebase from .NET Framework to .NET 6",
    "Url": "https://christianfindlay.com/2021/12/12/upgrade-to-net-6/",
    "Timestamp": "2021-12-20T06:02:20",
    "Domain": "christianfindlay.com",
    "Description": "\nYou're probably here because your business has a legacy codebase, and you need to upgrade it. You're not alone, and almost every business goes through a similar thing at some stage. This post is part guide and part food for thought. Here, the focus is on upgrading a back-end from ASP.NET to ASP .NET Core, but you will find this helpful if you need to upgrade any code from Framework to .NET 6. You may want to break your architecture up into Microservices, or you may want to consolidate microservices back into a single service. You may want to upgrade your WPF app to WPF on .NET 6. Whatever your goal is, the process for upgrading to .NET 6 is going to be more or less the same.\n\n\n\nYour Codebase\n\n\n\nYou have a legacy system running on .NET Framework 4.x. It's probably a bit of a mess with some .NET Framework libraries, some .NET Standard or .NET Core libraries scattered around. Perhaps you share some code with Xamarin or UWP apps. Some of your code may be ready to come along for the ride, and some may not. You will go through a process involving sorting through the projects and determining what to upgrade, abandon, or rewrite.\n\n\n\nRefactor, Rewrite or Bifurcate?\n\n\n\nYou will need to look at each of your projects one by one and decide what to do with them. You may find that you can simply delete some old projects. But, you will need to decide what to do with important code.\n\n\n\nRefactoring involves upgrading the existing code to work in the new environment under .NET 6. It will probably also target .NET Framework with multi-targeting. This is the best-case scenario, and I'll explain why shortly.\n\n\n\nRewriting involves rewriting the code from scratch. The new code probably won't run on .NET Framework. It will only target .NET 6. This requires the most work.\n\n\n\nBifurcation means taking the old .NET Framework code, copying and pasting it into a new .NET 6 project, and getting it to run there. You should prefer refactoring to bifurcation, but you may not be able to do this in all scenarios. More on this soon.\n\n\n\nThe Roadmap\n\n\n\nAre you going to upgrade all the code in the background and then cut across to .NET 6 when you finish the process? Or, can you upgrade each project in the legacy codebase in a way that allows you to keep maintaining the legacy codebase while also targeting .NET 6?\n\n\n\nThe latter involves some risk because the upgrade process could disrupt the legacy system, but the risk may well be worth it, and here is why...\n\n\n\nAny code rewrites involve maintaining two sets of code: the legacy code and the new code. You will need to maintain both until you can delete the legacy code. If the legacy system is still running, you need to do bug fixes and potentially feature enhancements until you turn off the legacy system. If the code exists in two places, you need to apply the fixes and features to two codebases. Do not underestimate how much work this requires. Think about the maintenance of your current system. Is that onerous? Yes. Of course, it is. Now imagine doing that maintenance twice. You are doubling your workload. Not only do you have to fix the issue in the existing live system, but you also need to merge those changes into the new .NET 6 codebase. Nothing could be more frustrating and time-consuming for developers.\n\n\n\nThe good news is that .NET Framework code is mostly compatible with modern .NET Code. You can refactor at least part of the existing legacy system and take the benefits of those refactors into your new .NET 6 codebase. As mentioned, this adds a little risk to the legacy system, but it also means that improvements to your legacy system add value to your .NET 6 codebase. The key is multi-targeting. You can convert your existing .NET Framework projects to target newer formats such as .NET Standard or .NET 6. That code will run on .NET Framework in your legacy system and on .NET 6. It can also target platforms such as UWP or Xamarin.\n\n\n\nSo, your roadmap needs to include some multi-targeting. How much is up to you and your team, but the more you can multi-target, the less double maintenance you will require.\n\n\n\nChanging the Data Store(s)\n\n\n\nYou may be breaking up your data store for Microservices. Or, you may be consolidating multiple data stores. Either way, you should probably do this before or after the technology upgrade. Changing data stores in the middle of an upgrade will be far more difficult. These are ultimately different processes and you shouldn't confuse one with the other. Upgrading your code to .NET 6 will put you in a very good position to move to Microservices as the next step.\n\n\n\nStep 1 - Understand Your Dependencies\n\n\n\nYou should take some time to survey your projects and how they depend on one another. If you have a tool to generate a dependency diagram, this will be very helpful. It will also be helpful to survey external NuGet packages and so on that, your projects depend on. Do you use NuGet packages that don't exist in .NET 6?\n\n\n\nNDepend is a Visual Studio tool that generates amazing Dependency Diagrams\n\n\n\nStep 2 - Upgrade the Visual Studio Project (csproj) Format\n\n\n\nLegacy codebases tend to use the old csproj format. This format is overly verbose and requires a lot of explicit definitions. The newer format (SDK Style) requires minimal explicit configuration and enables you to compile the code (target) for .NET Framework and .NET 6 or .NET Standard. You should upgrade as many of your .NET Framework projects as you can. At the very least, you will find maintaining the newer project format more manageable, and you will see less Git history for your projects. Focus on projects you think you will need in the new .NET 6 system, but it's even better if you can upgrade all projects.\n\n\n\nYou can use the .NET Upgrade Assistant to help you. See this section on using the upgrade tool or migrating by hand, along with some preparation.\n\n\n\nStart the upgrade process on the lowest level libraries first - i.e., the libraries that other libraries depend on and work your way up the dependency graph. Leave the highest level projects like Web API or UI code until last. They are likely to change the most and require the most thought.\n\n\n\nA typical old style csproj\n\n\n\nStep 3 - Multi-target .NET Framework and .NET Standard or .NET 6\n\n\n\nFirstly, you should read through this documentation from Microsoft.\n\n\n\nWhen your projects use the SDK Style project format, you can attempt to compile to .NET 6 or .NET Standard. See this documentation on multi-targeting. You should see this chart if you need to target Xamarin or UWP. There is some further reading here. That might require you to target .NET Framework and .NET Standard 2.0 or 2.1 instead of .NET 6. If that's the case, the library will still run fine on .NET 6. But, if you don't need Xamarin or UWP, you can target .NET Framework and .NET 6.\n\n\n\n\nhttps://gist.github.com/MelbourneDeveloper/8f3d8b882f3554dfaa2780e92262182a\nThis is a modern multi-targeting csproj file. It covers .NET 4.5, UWP, Xamarin up to .NET 6\n\n\n\nStep 4 - Fix Code Issues\n\n\n\nTargeting the newer .NET version such as .NET 6 will cause some compilation and dependency issues. Some .NET Framework libraries may not have versions compatible with .NET 6. You need to fix all the code issues that appear. \n\n\n\nIf .NET 6 is missing a library that you use in .NET Framework, you will need to find an alternative or write the code yourself. The best thing is to find a more recent supported library and replace the existing code with code that uses the new library. Otherwise, you will need to use #if with different code paths for both targets.\n\n\n\nYou don't have to fix all compilation issues straight away. You can leave some targets in a non-compilational state while gradually fixing up each project. The main thing you need to do is ensure that the .NET Framework version still compiles. This ensures you can still release versions of your legacy system. You will need to create a process for creating builds without the .NET 6 targets until that code compiles. One approach might be to remove all the .NET 6 targets until it compiles.\n\n\n\nYou can take this opportunity to refactor your existing code and add unit tests, and so on. Or, you can choose to avoid risky refactors. The latter is sensible because refactors can break the legacy system. You should be able to upgrade all your projects without changing too much of the original code. Where .NET 6 is incompatible with legacy code, you can use #if so that the old code stays exactly the same.\n\n\n\nThere are some tools that you have at your disposal to help you. You can use partial classes so that the majority of the class exists in one file and then two other versions for the .NET 6 and .NET Framework specific code. You conditionally include/exclude files based on the target. You can do the same for NuGet packages. You don't have to keep the same dependency set for .NET Framework as you would with .NET 6.\n\n\n\nWork through all the code (except for the highest level projects) until you don't see any compilation issues.\n\n\n\nStep 5 - High-Level Projects\n\n\n\nBy now, your low-level dependency projects should be compiling for .NET 6 or .NET Standard, but you still need to convert the highest level code. For Web API back-ends, you will need to convert those from ASP .NET to ASP .NET Core. \n\n\n\nIf those projects have code that you can move to lower-level projects, you should do that. For example, you may have some DTO classes in your highest-level project. Most of those to a shared library so that the high-level .NET Framework and .NET 6 projects can access the shared code. These high-level projects should only include the specifics of the Web API. They should not contain logic. Web API projects should only include endpoint controllers, HTTP pipeline code, IoC composition, routing configuration, etc. \n\n\n\nYou will probably need to maintain two of the highest-level projects. For example, you may keep an ASP.NET MVC app and an ASP .NET Core Web API app. That means you can compile and run the original Web API and the new one from the same solution. You will probably need to rewrite large chunks of the highest-level projects. But, these projects will share most of the same project dependencies, and you can share code files by adding files as links. Try to minimize the amount of duplicate code. \n\n\n\nMy experience tells me that you can share a lot of code between ASP .NET MVC Web Apis and ASP.NET Core Web Apis. You should probably keep the endpoints exactly the same between the two versions because this allows you to run the same code side by side.\n\n\n\nStep 6 - Testing\n\n\n\nYou should already have unit tests and integration tests in your system. If you do, you should run them regularly to ensure that the new API works the same as the old API. If not, should add them where possible during the upgrade process. The good news is that ASP .NET Core has a good integration testing system, so you should implement this as early as possible in the upgrade process.\n\n\n\nIf you've been careful to keep the original .NET Framework code intact, you can now run both versions of the back-end side by side and theoretically run your front-end against the new back-end. Testing your front-end should be the final part of the process. You will find weird issues and this point and you will need to fix the code in an iterative process until the app behaves the same as the old version. You should also add more and more tests to make the codebase doesn't go backwards during this process. The performance of .NET 6 is leagues ahead of .NET Framework so the whole process will be worth it.\n\n\n\nDatabase Code\n\n\n\nThe code that you will probably find most difficult to upgrade will be database code. If you use Dapper, you probably won't find much difference between .NET Framework and .NET 6. However, Entity Framework is very different to Entity Framework Core. Some EF code will compile for EF Core but have different results and execute different SQL. This is why testing is important, and you should create a set of database tests that ensure that new database access code running on .NET 6 does the same thing as the .NET Framework code.\n\n\n\nShould We Do All This in a Separate Branch?\n\n\n\nInevitably you're going to need to decide whether you upgrade and retarget the .NET Framework projects one by one, and amongst normal development, or if you're going to branch for several months and then merge back. There are a variety of circumstances which will influence you here, but here is my two cents.\n\n\n\nUpgrade and retarget as many projects as you can before you start working on a separate branch. This introduces some risk but you want to minimize the time you are working on code that is not running in production. If you are squirreling code away in a branch for a long period of time, it becomes less and less like the production code and you will have to deal with more and more merge conflicts. \n\n\n\nTips\n\n\n\nKeep filenames the same during the whole process. If you move files in to new folders etc. you will have a lot of difficulty with merging\n\n\n\nDon't repeat yourself. Look for ways to avoid copying and pasting code. There are many and .NET Framework is not that different from .NET 6 so you can usually find a way to share code between the two\n\n\n\nBuilding up tests is your key to ensuring that both the old and new codebases continue to work. If you are worried about breaking something, it's because you need more tests.\n\n\n\nDon't get sidetracked with refactoring. You will feel the urge to refactor but you probably shouldn't unless you are confident that the old system has enough code coverage to stop you from breaking the system.\n\n\n\nWrap-Up\n\n\n\nUpgrading a codebase involves the same software development principles that you'd apply to anything else. If you're doing it well, you wil maximise the benefit of your changes to the legacy and new system. If you're doing it poorly, you will duplicate every line of code in the system. Everything about the decision making process will involve tradeoffs around risk and the amount of work you need to do. That becomes a business decision, but you have to adjust and communicate as a team to pull this off. There is no recipe for success but any team that does not communicate, understand the decisions being made and make the best guesses about the path will surely face a lot of pain.\n\n\n\n\n\n\n\nYou will probably have a crossover period where you need to run the legacy code and the new code side by side, but ultimately, your reward will be deleting the .NET Framework specific code, and turning off the old back-end and seeing those performance benefits.\n",
    "Confidence": 0.9791152
  },
  {
    "Title": "ASP.NET Core 6 – transparent WebSockets",
    "Url": "https://ingebrigtsen.blog/2021/12/17/asp-net-core-6-transparent-websockets/",
    "Timestamp": "2021-12-20T06:02:20",
    "Domain": "ingebrigtsen.blog",
    "Description": "Lets face it; I’m a framework builder. In the sense that I build stuff for other developers to use. The goal when doing so is that the developer using what’s built should feel empowered…",
    "Confidence": 0.99932504
  },
  {
    "Title": "Azure Container Apps, Bicep and GitHub Actions | I CAN MAKE THIS WORK",
    "Url": "https://blog.johnnyreilly.com/2021/12/19/azure-container-apps-bicep-and-github-actions/",
    "Timestamp": "2021-12-20T06:02:20",
    "Domain": "blog.johnnyreilly.com",
    "Description": "Azure Container Apps are an exciting way to deploy containers to Azure. This post shows how to deploy the infrastructure for an Azure Container App to Azure using Bicep and GitHub Actions. The Azure Container App documentation features quickstarts for deploying your first container app using both the Azure Portal and the Azure CLI. These are great, but there's a gap if you prefer to deploy using Bicep and you'd like to get your CI/CD setup right from the beginning. This post aims to fill that gap.",
    "Confidence": 0.9915355
  },
  {
    "Title": "String Interpolation Trickery and Magic with C# 10 and .NET 6",
    "Url": "https://btburnett.com/csharp/2021/12/17/string-interpolation-trickery-and-magic-with-csharp-10-and-net-6",
    "Timestamp": "2021-12-20T06:02:20",
    "Domain": "btburnett.com",
    "Description": "This blog is one of The December 17th entries on the 2021 C# Advent Calendar. Thanks for having me again Matt!",
    "Confidence": 0.99414796
  },
  {
    "Title": "Akka for Advent",
    "Url": "https://backwardsincompatibilities.wordpress.com/2021/12/13/akka-for-advent/",
    "Timestamp": "2021-12-20T06:02:20",
    "Domain": "backwardsincompatibilities.wordpress.com",
    "Description": "I’ve been using Akka.Net quite a bit at work lately, so for this years F# advent calendar you’re getting a blog post about using Akka.Net and Akkling with F#. Before people start lookin…",
    "Confidence": 0.95493585
  },
  {
    "Title": "PagerDuty’s Security Training for Engineers",
    "Url": "https://www.codingblocks.net/podcast/pagerdutys-security-training-for-engineers/",
    "Timestamp": "2021-12-20T03:02:27",
    "Domain": "www.codingblocks.net",
    "Description": "We're taking our time as we discuss PagerDuty's Security Training presentations and what it means to \"roll the pepper\" while Michael is embarrassed in front of the whole Internet, Franklin Allen Underwood is on a full name basis, and don't talk to Joe about corn.",
    "Confidence": 0.975856
  },
  {
    "Title": "Document your .NET code with DocFX and GitHub Actions",
    "Url": "https://blog.taranissoftware.com/document-your-net-code-with-docfx-and-github-actions",
    "Timestamp": "2021-12-20T03:02:26",
    "Domain": "blog.taranissoftware.com",
    "Description": "In this article I show how to use XML doc comments, DocFX and GitHub Actions to automatically build and publish documentation for your .NET code.",
    "Confidence": 0.97310567
  },
  {
    "Title": "The Big DevOps Misunderstanding",
    "Url": "https://wolfoliver.medium.com/the-big-devops-misunderstanding-8435a910a5fd",
    "Timestamp": "2021-12-20T02:02:26",
    "Domain": "wolfoliver.medium.com",
    "Description": "When the term DevOps came up it was all about a simple idea:",
    "Confidence": 0.9122842
  }
]