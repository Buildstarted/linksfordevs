[
  {
    "Title": "NIH Is Far Cheaper Than The Wrong Dependency",
    "Url": "https://lewiscampbell.tech/blog/250718.html",
    "Timestamp": "2025-07-18T15:02:24",
    "Domain": "lewiscampbell.tech",
    "Description": "Frivilous dependencies are the enemy of maintainability.",
    "Confidence": 0.99769753
  },
  {
    "Title": "Fully Homomorphic Encryption and the Dawn of A Truly Private Internet",
    "Url": "https://bozmen.io/fhe",
    "Timestamp": "2025-07-18T12:02:34",
    "Domain": "bozmen.io",
    "Description": "Barış Özmen Blog",
    "Confidence": 0.9934074
  },
  {
    "Title": "ChatGPT Guide to Building Cross Platform Applications - Nick's .NET Travels",
    "Url": "https://nicksnettravels.builttoroam.com/chatgpt-guide-to-building-cross-platform-applications/",
    "Timestamp": "2025-07-18T09:02:23",
    "Domain": "nicksnettravels.builttoroam.com",
    "Description": "I decided to ask ChatGPT what suggestions it had for building cross platform applications. Here’s it’s response, along with some commentary, specifically around the offering by the Uno Platform. What's the best guidance for building cross platform applications? From ChatGPT: The best guidance for building cross-platform applications can be broken into strategic decisions, tooling choices, ... Read more",
    "Confidence": 0.99616796
  },
  {
    "Title": "My Experience With Claude Code After 2 Weeks of Adventures",
    "Url": "https://sankalp.bearblog.dev/my-claude-code-experience-after-2-weeks-of-usage/",
    "Timestamp": "2025-07-18T09:02:21",
    "Domain": "sankalp.bearblog.dev",
    "Description": "<span style=\"color: #FF6B47;\">Hatching...</span>\n\n\nCursor, my beloved, started rate limiting shenanigans a few days back. For a good 2 weeks after June 16,...",
    "Confidence": 0.9926353
  },
  {
    "Title": "Anthropic tightens usage limits for Claude Code – without telling users | TechCrunch",
    "Url": "https://techcrunch.com/2025/07/17/anthropic-tightens-usage-limits-for-claude-code-without-telling-users/",
    "Timestamp": "2025-07-18T04:02:18",
    "Domain": "techcrunch.com",
    "Description": "Claude Code users have been hit with unexpectedly restrictive usage limits. The problems, many of which have been aired on Claude Code’s GitHub page, seem to be concentrated among heavy users of the service, many of whom are on the $200-a-month Max plan. ",
    "Confidence": 0.61444855
  },
  {
    "Title": "How I Use Kagi",
    "Url": "https://flamedfury.com/posts/how-i-use-kagi/",
    "Timestamp": "2025-07-18T02:02:07",
    "Domain": "flamedfury.com",
    "Description": "My block list and some fun search lenses. Don&#39;t @ me that damn article about the guy whinging about Kagi.",
    "Confidence": 0.8898816
  },
  {
    "Title": "Grafana and LLMs",
    "Url": "https://opeonikute.dev/posts/grafana-and-llms",
    "Timestamp": "2025-07-17T23:02:39",
    "Domain": "opeonikute.dev",
    "Description": "",
    "Confidence": 0.9966519
  },
  {
    "Title": "Are we trading our hard-earned intelligence for convenience?",
    "Url": "https://lmyslinski.com/posts/are-we-trading-our-hard-earned-intelligence-for-convenience/",
    "Timestamp": "2025-07-17T23:02:39",
    "Domain": "lmyslinski.com",
    "Description": "Productivity and skill erosion in the age of AI",
    "Confidence": 0.9827508
  },
  {
    "Title": "Three unrelated thoughts about working with LLMs",
    "Url": "https://henrycourse.com/blog/2025/07/16/three-unrelated-thoughts-about-working-with-llms/",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "henrycourse.com",
    "Description": "I’ve had these on my mind for a while and wanted to get them into text. Firstly for the benefit of my own thinking, and\nalso so\nthat I’ve got something to direct people to the next time I have a conversation about it. firstname.lastname at gmail\ndot com if you’ve got feedback.",
    "Confidence": 0.99232733
  },
  {
    "Title": "Tree Versus DAG Bindings",
    "Url": "https://trustica.cz/en/blog/2025/07/17/tree-versus-dag-bindings/",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "trustica.cz",
    "Description": "Written by Dominik Pantůček on 2025-07-17",
    "Confidence": 0.9950757
  },
  {
    "Title": "Are we alone? ",
    "Url": "https://www.writervivek.com/2025/07/Are-we-alone.html",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "www.writervivek.com",
    "Description": "",
    "Confidence": 0.7864581
  },
  {
    "Title": "Scalability is not performance",
    "Url": "https://gregros.dev/architecture/scalability-is-not-performance",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "gregros.dev",
    "Description": "\nScalability is sometimes confused with performance, but it’s not at all the same thing.\n\nIn this post, we’ll take a closer look at what both of those things mean, with the help of a simple model!\n",
    "Confidence": 0.99051327
  },
  {
    "Title": "Blog - Why I recommend native Prometheus instrumentation over OpenTelemetry",
    "Url": "https://promlabs.com/blog/2025/07/17/why-i-recommend-native-prometheus-instrumentation-over-opentelemetry/",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "promlabs.com",
    "Description": "PromLabs - We teach Prometheus-based monitoring and observability",
    "Confidence": 0.9897616
  },
  {
    "Title": "An example of drifting away in dev",
    "Url": "https://mohas.bearblog.dev/an-example-of-drifting-away-in-dev/",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "mohas.bearblog.dev",
    "Description": "\n\nThis is a tiny reminder to myself.\n\nWhen making any kind of program, it seems that, to reduce the stresses associated with the development of a complex...",
    "Confidence": 0.889938
  },
  {
    "Title": "Vibe Coding is Cheap, Show Me The Demo: How I Code with Playwright UI as My Co-Pilot - Chm.ski Labs",
    "Url": "https://kamil.chm.ski/vibe-coding-cheap-show-me-demo",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "kamil.chm.ski",
    "Description": "In the era of AI-generated code, vibe coding has made writing code effortless but proving it works crucial. Learn Show Me The Demo Development - a methodology that treats demos as specifications using Playwright UI for real-time feedback.",
    "Confidence": 0.9894007
  },
  {
    "Title": "Chrome’s SSL Bypass Cheatcode",
    "Url": "https://thomascountz.com/2025/07/17/chromes-ssl-bypass-cheatcode",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "thomascountz.com",
    "Description": "This is Unsafe If you type thisisunsafe on a Chrome SSL error page, Chrome will bypass the error and load the page for you. Try it yourself here: https://expired.badssl.com/ There’s no textbox to type into, just type thisisunsafe blindly with the page in focus. TIP: To revert the bypass, click the “Not Secure” button in the URL bar and then click “Turn on warnings.” History of the Bypass Code I discovered Chrome SSL error bypass code while debugging SSL issues. I was surprised that something like that existed, and was flooded with of memories of entering ↑ ↑ ↓ ↓ ← → ← → B A into my PS1 as a kid (see Konami Code). Curiosity got the better of me, and, like Tomb Raider searching for ancient artifacts, I started digging into the history of the bypass code in Chromium. Here’s what I found. Danger (2014) The bypass code was originally “danger,” and was added to Chromium in 2014 as part of a larger piece of work to remove duplication between chrome/browser/resources/safe_browsing/ and chrome/browser/resources/ssl/. Safe Browsing HTML/JS is in: chrome/browser/resources/safe_browsing And SSL HTML/JS is in: chrome/browser/resources/ssl But they all essentially use the same code. Merge into a single folder and remove redundancy. Aug 11, 2014 18:03UTC - Chromium Issue #41125304 Why it was added is not clear to me, but presumably it was to allow developers to more easily bypass SSL errors during the raise of SSL-everywhere. https://codereview.chromium.org/480393002/patch/60001/70017 /* * This allows errors to be skippped [sic] by typing \"danger\" into the page. * @param {string} e The key that was just pressed. */ function handleKeypress(e) { var BYPASS_SEQUENCE = 'danger'; if (BYPASS_SEQUENCE.charCodeAt(keyPressState) == e.keyCode) { keyPressState++; if (keyPressState == BYPASS_SEQUENCE.length) { sendCommand(CMD_PROCEED); keyPressState = 0; } } else { keyPressState = 0; } } Bad Idea (2015) A year later, in 2015, the BYPASS_SEQUENCE was changed to badidea. There are no other changes or comments on the patch, but this change likely reflected concerns around the overuse of the bypass code; concerns that would be echoed in later years. https://codereview.chromium.org/1416273004/patch/1/10001. --- a/components/security_interstitials/core/browser/resources/interstitial_v2.js +++ b/components/security_interstitials/core/browser/resources/interstitial_v2.js @@ -40,7 +40,7 @@ function sendCommand(cmd) { * @param {string} e The key that was just pressed. */ function handleKeypress(e) { - var BYPASS_SEQUENCE = 'danger'; + var BYPASS_SEQUENCE = 'badidea'; if (BYPASS_SEQUENCE.charCodeAt(keyPressState) == e.keyCode) { keyPressState++; if (keyPressState == BYPASS_SEQUENCE.length) { This is not Safe (2018) On Januay 03, 2018, the bypass code was updated again, this time to thisisnotsafe. Unlike before, the code was changed explicitly due to growing concern around the growing popularity of being able to bypass SSL warnings in Chrome. The security interstitial bypass keyword hasn’t changed in two years and awareness of the bypass has been increased in blogs and social media. Rotate the keyword to help prevent misuse. Jan 03, 2018 03:03UTC - Chromium Issue #843085 dGhpc2lzdW5zYWZl (2018 - Present) But then, just a few days later, on January 10, 2018, the bypass code was changed once again: thisisnotesafe was changed to dGhpc2lzdW5zYWZl, in what I can only guess was an attempt at obfuscation. $ echo dGhpc2lzdW5zYWZl | base64 -d thisisunsafe --- a/components/security_interstitials/core/browser/resources/interstitial_large.js +++ b/components/security_interstitials/core/browser/resources/interstitial_large.js @@ -13,7 +13,10 @@ * @param {string} e The key that was just pressed. */ function handleKeypress(e) { - var BYPASS_SEQUENCE = 'thisisnotsafe'; + // HTTPS errors are serious and should not be ignored. For testing purposes, + // other approaches are both safer and have fewer side-effects. + // See https://goo.gl/ZcZixP for more details. + var BYPASS_SEQUENCE = window.atob('dGhpc2lzdW5zYWZl'); if (BYPASS_SEQUENCE.charCodeAt(keyPressState) == e.keyCode) { keyPressState++; if (keyPressState == BYPASS_SEQUENCE.length) { Along with this patch, the Chromium team released a public document titled: Deprecating Powerful Features on Insecure Origins. Though it made no mention of the bypass code, it included instructions for how to bypass SSL errors during development and testing. I presume this is what was meant by the “other approaches are both safer and have fewer side-effects” comment in the code snippet above. You can use chrome://flags/#unsafely-treat-insecure-origin-as-secure to run Chrome, or use the --unsafely-treat-insecure-origin-as-secure=\"http://example.com\" flag (replacing \"example.com\" with the origin you actually want to test), which will treat that origin as secure for this session. Is this Unsafe? As of the time of writing, the bypass code (along with the skippped typo) has remained unchanged. You can see it in the latest version of Chromium (140.0.7301.1), and it still shows up in blogs and social media posts. /** * This allows errors to be skippped [sic] by typing a secret phrase into the page. * @param {string} e The key that was just pressed. */ function handleKeypress(e) { // HTTPS errors are serious and should not be ignored. For testing purposes, // other approaches are both safer and have fewer side-effects. // See https://goo.gl/ZcZixP for more details. const BYPASS_SEQUENCE = window.atob('dGhpc2lzdW5zYWZl'); if (BYPASS_SEQUENCE.charCodeAt(keyPressState) === e.keyCode) { keyPressState++; if (keyPressState === BYPASS_SEQUENCE.length) { sendCommand(SecurityInterstitialCommandId.CMD_PROCEED); keyPressState = 0; } } else { keyPressState = 0; } } Despite the excavation, I wasn’t able to find the exact reason for the bypass code’s introduction. It seems to have been a convenience for developers, but it has since become a point of concern due to its potential misuse. The change to base64 encoding was likely an attempt to obscure the code from casual users, but it is by no means a secret. SSL-everywhere has been a net-positive for the web, but it’s hard to articulate the risks of broken SSL to everyday users. A popular bypass code might not supply enough friction to prevent misuse, and I’m curious to know what benefits it has over using the --unsafely-treat-insecure-origin-as-secure flag. What do you think?",
    "Confidence": 0.9933719
  },
  {
    "Title": "Against Single-File Codebases | rugu",
    "Url": "https://www.rugu.dev/en/blog/against-single-file-codebases/",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "www.rugu.dev",
    "Description": "Written at 2025-07-16",
    "Confidence": 0.99277955
  },
  {
    "Title": "Maximizing Leverage in Software Systems",
    "Url": "https://bencornia.com/blog/maximizing-leverage-in-software-systems",
    "Timestamp": "2025-07-17T23:02:36",
    "Domain": "bencornia.com",
    "Description": "A review of how systems thinking can maximize leverage in software engineering.",
    "Confidence": 0.9885487
  },
  {
    "Title": "Perennial Task Just Got More Flexible",
    "Url": "https://arthurdick.com/blog/perennial_task_just_got_more_flexible/",
    "Timestamp": "2025-07-17T23:02:35",
    "Domain": "arthurdick.com",
    "Description": "Wednesday, July 16th, 2025",
    "Confidence": 0.9813461
  },
  {
    "Title": "The secrets we keep | willowbl00",
    "Url": "https://blog.bl00cyb.org/2025/07/the-secrets-we-keep/",
    "Timestamp": "2025-07-17T23:02:35",
    "Domain": "blog.bl00cyb.org",
    "Description": "I now know that saying you work at Apple is like saying you work at the government. Which part matters a lot.",
    "Confidence": 0.99162745
  },
  {
    "Title": "Comparing Claude Code vs OpenCode (and testing different models)",
    "Url": "https://www.andreagrandi.it/posts/comparing-claude-code-vs-opencode-testing-different-models/",
    "Timestamp": "2025-07-17T23:02:33",
    "Domain": "www.andreagrandi.it",
    "Description": "A practical comparison of Claude Code and OpenCode (using Sonnet-4, Gemini Pro 2.5, and GPT-4.1), evaluating their reliability, code generation quality, and integration with developer workflows based on a real-world task.",
    "Confidence": 0.9935436
  },
  {
    "Title": "Le Chat dives deep. | Mistral AI",
    "Url": "https://mistral.ai/news/le-chat-dives-deep",
    "Timestamp": "2025-07-17T20:02:17",
    "Domain": "mistral.ai",
    "Description": "Introducing Deep Research, plus Audio-in, Projects, and other updates.",
    "Confidence": 0.92677546
  },
  {
    "Title": "GitHub - pollen-robotics/AmazingHand: Code and model to control the AH!",
    "Url": "https://github.com/pollen-robotics/AmazingHand",
    "Timestamp": "2025-07-17T20:02:17",
    "Domain": "github.com",
    "Description": "Code and model to control the AH! Contribute to pollen-robotics/AmazingHand development by creating an account on GitHub.",
    "Confidence": 0.9914839
  },
  {
    "Title": "AI doesn't make devs as productive as they think, study finds",
    "Url": "https://leaddev.com/velocity/ai-doesnt-make-devs-as-productive-as-they-think-study-finds",
    "Timestamp": "2025-07-17T19:02:17",
    "Domain": "leaddev.com",
    "Description": "A new study raises serious questions about how perceptions of AI assisted productivity translate into results.",
    "Confidence": 0.5823115
  }
]