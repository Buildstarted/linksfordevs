[
  {
    "Title": "Keyless SSL now supports FIPS 140-2 L3 hardware security module (HSM) offerings from all major cloud providers",
    "Url": "https://blog.cloudflare.com/keyless-ssl-supports-fips-140-2-l3-hsm/",
    "Timestamp": "2021-03-27T13:04:20",
    "Domain": "blog.cloudflare.com",
    "Description": "Private encryption keys stored in hardware security module offerings from all major cloud providers can now be used to secure HTTPS connections at Cloudflare’s global edge."
  },
  {
    "Title": "Louvre site des collections",
    "Url": "https://collections.louvre.fr/en/",
    "Timestamp": "2021-03-27T11:05:28",
    "Domain": "collections.louvre.fr",
    "Description": "app.description"
  },
  {
    "Title": "Tesla broke US labor law with anti-union efforts – watchdog",
    "Url": "https://www.theregister.com/2021/03/26/tesla_labor_law/",
    "Timestamp": "2021-03-27T09:05:22",
    "Domain": "www.theregister.com",
    "Description": "And Elon Musk must delete 2018 tweet threatening loss of benefits for unionizing"
  },
  {
    "Title": "Umbraco Package Migration to .NET Core: Criteria Providers - Wiring It All Up",
    "Url": "https://www.andybutland.dev/2021/03/umbraco-package-migration-to-net-corewiring-up.html",
    "Timestamp": "2021-03-27T09:05:19",
    "Domain": "www.andybutland.dev",
    "Description": "This is one of a series of posts looking at migrating Umbraco packages to V9 and .NET Core.  Other posts in this series:      Introduction  ..."
  },
  {
    "Title": "National Privacy Tests: country rankings, and insights",
    "Url": "https://nordvpn.com/national-privacy-test/",
    "Timestamp": "2021-03-27T09:05:16",
    "Domain": "nordvpn.com",
    "Description": "The National Privacy Test scores internet users' digital habits, digital privacy awareness, and digital risk tolerance."
  },
  {
    "Title": "The .NET Stacks #42: 🔌 When Active Directory isn't so active | Dave Brock",
    "Url": "https://daveabrock.com/2021/03/27/dotnet-stacks-42",
    "Timestamp": "2021-03-27T07:05:07",
    "Domain": "daveabrock.com",
    "Description": "This week, we discuss the Azure AD outage and also talk about a variety of other topics."
  },
  {
    "Title": "I found Annie from Annie's Mac and Cheese. Here's her story.",
    "Url": "https://www.sfgate.com/food/article/Annie-s-Mac-and-Cheese-is-based-in-Bay-Area-but-16049782.php",
    "Timestamp": "2021-03-27T06:04:40",
    "Domain": "www.sfgate.com",
    "Description": "Annie Withey is far more interested in tending to her farm than running a business."
  },
  {
    "Title": "YouTube",
    "Url": "https://www.youtube-nocookie.com/embed/GimqGmgFl3Q",
    "Timestamp": "2021-03-27T03:16:45",
    "Domain": "www.youtube-nocookie.com",
    "Description": "SecurityFWD: How Far Can Wi-Fi Really Travel?"
  },
  {
    "Title": "YouTube",
    "Url": "https://www.youtube-nocookie.com/embed/mKDwTB1h_Pk",
    "Timestamp": "2021-03-27T03:16:42",
    "Domain": "www.youtube-nocookie.com",
    "Description": "Weekly Update 236"
  },
  {
    "Title": "Fairphone suggests Qualcomm is the biggest barrier to long-term Android support",
    "Url": "https://arstechnica.com/gadgets/2021/03/the-fairphone-2-hits-five-years-of-updates-with-some-help-from-lineageos/",
    "Timestamp": "2021-03-27T03:16:40",
    "Domain": "arstechnica.com",
    "Description": "Qualcomm ended support for the phone after Android 6, but Fairphone is still going. "
  },
  {
    "Title": "The Ancient Method That Keeps Afghanistan's Grapes Fresh All Winter",
    "Url": "https://www.atlasobscura.com/articles/how-did-people-store-fruit-before-fridges",
    "Timestamp": "2021-03-27T03:16:32",
    "Domain": "www.atlasobscura.com",
    "Description": "Kangina is simple but effective."
  },
  {
    "Title": "Who Will Write your Company’s Technical Content?",
    "Url": "https://philipkiely.com/essays/who_will_write.html",
    "Timestamp": "2021-03-27T01:08:34",
    "Domain": "philipkiely.com",
    "Description": "<p>If the best strategy for mixing in-house content with various outsourced options was the same for every company, this article would be a lot shorter. However, your company’s resources and goals determine the best content strategy.</p>"
  },
  {
    "Title": "A Modest Proposal: Let’s Stop Lying To Each Other in Our Research Papers - Maxwell Forbes",
    "Url": "https://maxwellforbes.com/posts/misinterpreting-results",
    "Timestamp": "2021-03-27T01:08:31",
    "Domain": "maxwellforbes.com",
    "Description": "I was reviewing for ACL1 last week, and it was a particularly depressing time. It was depressing because it made me r..."
  },
  {
    "Title": "Weekly Update 236",
    "Url": "https://www.troyhunt.com/weekly-update-236/",
    "Timestamp": "2021-03-27T01:08:29",
    "Domain": "www.troyhunt.com",
    "Description": "This 🤬🤬🤬 DAC! I mean it's a lovely device, but it's just impossible to use it as an audio source in the browser without it killing the camera. I'm very close to being out of ideas right now, only remaining thing I can think of is to set everything up on"
  },
  {
    "Title": " Notetaking for fun and profit. | /param/home ",
    "Url": "https://param.codes/2021/notetaking/",
    "Timestamp": "2021-03-27T01:08:26",
    "Domain": "param.codes",
    "Description": " A blog. "
  },
  {
    "Title": "Contributing to WPF and Windows Forms Projects on GitHub",
    "Url": "https://www.youtube.com/watch?v=M4hHQk-5qxk",
    "Timestamp": "2021-03-27T01:08:23",
    "Domain": "www.youtube.com",
    "Description": "Windows Forms and WPF have been open source for over a year and there have been many amazing contributions. In this session the lead contributors to these pr..."
  },
  {
    "Title": "It doesn't work | Frank DENIS random thoughts.",
    "Url": "https://00f.net/2021/03/26/it-doesnt-work/",
    "Timestamp": "2021-03-27T01:08:19",
    "Domain": "00f.net",
    "Description": "8 AM. Like any other day, I take a quick glance at my GitHub notifications via Octobox."
  },
  {
    "Title": "Planned maintenance scheduled for Saturday, March 27, 2021 at 1:00 UTC (Friday March 26 9:00 PM US/EDT)",
    "Url": "https://meta.stackexchange.com/questions/362269/planned-maintenance-scheduled-for-saturday-march-27-2021-at-100-utc-friday-m",
    "Timestamp": "2021-03-27T01:07:55",
    "Domain": "meta.stackexchange.com",
    "Description": "tl;dr; Planned service interruption that will impact all Stack Overflow/Stack Exchange sites, Jobs, Chat, and Teams. All sites may be read-only for up to 15 minutes on Saturday March 27, 2021 at 1:..."
  },
  {
    "Title": "NixOS on Raspberry Pi - Blog by Anne Douwe Bouma",
    "Url": "https://www.bouma.tech/posts/nixos-on-raspberry-pi",
    "Timestamp": "2021-03-27T01:07:52",
    "Domain": "www.bouma.tech",
    "Description": "My journey of installing and using NixOS on Raspberry Pi"
  },
  {
    "Title": "Don't let your design system seem complete",
    "Url": "https://grillopress.github.io/2021/03/26/dont-let-your-design-system-seem-complete.html",
    "Timestamp": "2021-03-27T01:07:49",
    "Domain": "grillopress.github.io",
    "Description": ""
  },
  {
    "Title": "Bits of Security | Datadog",
    "Url": "https://www.datadoghq.com/event/bits-of-security/",
    "Timestamp": "2021-03-27T01:07:46",
    "Domain": "www.datadoghq.com",
    "Description": "See metrics from all of your apps, tools & services in one place with Datadog's cloud monitoring as a service solution. Try it for free."
  },
  {
    "Title": "Other Ways - Christopher Butler",
    "Url": "https://www.chrbutler.com/other-ways",
    "Timestamp": "2021-03-27T01:07:43",
    "Domain": "www.chrbutler.com",
    "Description": "Sameness is the enemy of creativity."
  },
  {
    "Title": "How to make Command Prompt, PowerShell, or any Shell launch from the Start Menu directly into Windows Terminal",
    "Url": "https://www.hanselman.com/blog/how-to-make-command-prompt-powershell-or-any-shell-launch-from-the-start-menu-directly-into-windows-terminal",
    "Timestamp": "2021-03-26T23:08:07",
    "Domain": "www.hanselman.com",
    "Description": "I love the Windows Terminal, but right now I launch the Terminal, then I pick a ..."
  },
  {
    "Title": "Microsoft Events",
    "Url": "https://www.microsoft.com/en-us/events",
    "Timestamp": "2021-03-26T23:08:01",
    "Domain": "www.microsoft.com",
    "Description": "Explore the multitude of events Microsoft offers for technology leaders, developers and practitioners. We are passionate about providing the right event for everyone in the tech industry."
  },
  {
    "Title": "Announcing WPF, WinForms, and WinUI are going Open Source",
    "Url": "https://www.hanselman.com/blog/announcing-wpf-winforms-and-winui-are-going-open-source",
    "Timestamp": "2021-03-26T23:07:57",
    "Domain": "www.hanselman.com",
    "Description": "Buckle up friends! Microsoft is open sourcing WPF, Windows Forms (winforms), ..."
  },
  {
    "Title": "Pro .NET Benchmarking: The Art of Performance Measurement: Akinshin, Andrey: 9781484249406: Amazon.com: Books",
    "Url": "https://www.amazon.com/dp/1484249402/?tag=linksfordevs-20&lfd=202103",
    "Timestamp": "2021-03-26T23:07:54",
    "Domain": "www.amazon.com",
    "Description": "Pro .NET Benchmarking: The Art of Performance Measurement [Akinshin, Andrey] on Amazon.com. *FREE* shipping on qualifying offers. Pro .NET Benchmarking: The Art of Performance Measurement"
  },
  {
    "Title": "https://www.aumasson.jp/data/talks/uwat-tssecdsa21.pdf",
    "Url": "https://www.aumasson.jp/data/talks/uwat-tssecdsa21.pdf",
    "Timestamp": "2021-03-26T23:07:48",
    "Domain": "www.aumasson.jp",
    "Description": null
  },
  {
    "Title": "thalesfragoso/at28c-rs",
    "Url": "https://github.com/thalesfragoso/at28c-rs",
    "Timestamp": "2021-03-26T23:07:48",
    "Domain": "github.com",
    "Description": "Firmware and CLI utility to program AT28C EEPROM chips - thalesfragoso/at28c-rs"
  },
  {
    "Title": "janroesner/sixty5o2",
    "Url": "https://github.com/janroesner/sixty5o2",
    "Timestamp": "2021-03-26T23:07:45",
    "Domain": "github.com",
    "Description": "Micro Kernel / Bootloader for Ben Eater's 6502 Computer - janroesner/sixty5o2"
  },
  {
    "Title": "Common Crawl",
    "Url": "https://commoncrawl.org/",
    "Timestamp": "2021-03-26T22:28:29",
    "Domain": "commoncrawl.org",
    "Description": "Us"
  },
  {
    "Title": "U.S. rent has increased 175% faster than household income over past 20 years",
    "Url": "https://phys.org/news/2021-03-rent-faster-household-income-years.html",
    "Timestamp": "2021-03-26T21:08:39",
    "Domain": "phys.org",
    "Description": "Bright lights, big city."
  },
  {
    "Title": "C# and AWS Lambdas, Part 8 – .NET 6, inside a Container, inside a Lambda",
    "Url": "https://nodogmablog.bryanhogan.net/2021/03/c-and-aws-lambdas-part-8-net-6-inside-a-container-inside-a-lambda/",
    "Timestamp": "2021-03-26T21:08:35",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here."
  },
  {
    "Title": "Buffer overruns, license violations, and bad code: FreeBSD 13’s close call",
    "Url": "https://arstechnica.com/gadgets/2021/03/buffer-overruns-license-violations-and-bad-code-freebsd-13s-close-call/",
    "Timestamp": "2021-03-26T21:08:31",
    "Domain": "arstechnica.com",
    "Description": "40,000 lines of flawed code almost made it into FreeBSD's kernel—we examine how."
  },
  {
    "Title": "GitHub Quick Reviews",
    "Url": "https://www.youtube.com/watch?v=vNPybpatlUU",
    "Timestamp": "2021-03-26T21:08:22",
    "Domain": "www.youtube.com",
    "Description": "Powered by Restream https://restream.io/"
  },
  {
    "Title": "Factorio Is The Best Technical Interview We Have",
    "Url": "https://erikmcclure.com/blog/factorio-is-best-interview-we-have/",
    "Timestamp": "2021-03-26T20:08:53",
    "Domain": "erikmcclure.com",
    "Description": "There's been a lot of hand-wringing over The Technical Interview lately. Many people realize that inverting a binary tree on a whiteboard has basically zero correlation to whether or not someone is actually a good software developer. The most effective programming test anyone's come up with is still Fizzbuzz. One consequence of this has been an increased emphasis on Open Source Contributions, but it turns out these aren't a very good metric either, because most people don't have that kind of time."
  },
  {
    "Title": "Video by Hannah Joy Gebresilassie",
    "Url": "https://bibliogram.art/tv/CM2-GWCHTIz/",
    "Timestamp": "2021-03-26T20:08:51",
    "Domain": "bibliogram.art",
    "Description": "Capitol officers arrested Rep. Park Cannon for knocking on the Governor’s door trying to watch @govkemp sign voter suppression bill SB202 into law. We #STANDWITHPARK @parkcannon58 @itsericathomas"
  },
  {
    "Title": "YouTube",
    "Url": "https://www.youtube-nocookie.com/embed/P9Pv5IdinMU",
    "Timestamp": "2021-03-26T20:08:47",
    "Domain": "www.youtube-nocookie.com",
    "Description": "Using Source Generators for Fun (and maybe profit) - with Jason Bock"
  },
  {
    "Title": "Tesla - Los Angeles",
    "Url": "https://www.evgo.com/tesla-los-angeles/",
    "Timestamp": "2021-03-26T19:13:49",
    "Domain": "www.evgo.com",
    "Description": "How to Charge with EVgo?"
  },
  {
    "Title": "How to Recognize, Prevent, and Manage Burnout",
    "Url": "https://www.pluralsight.com/courses/recognize-prevent-manage-burn-out",
    "Timestamp": "2021-03-26T19:11:09",
    "Domain": "www.pluralsight.com",
    "Description": "This course teaches you what burnout is and how to prevent and recover from it. "
  },
  {
    "Title": "Practical Heart",
    "Url": "https://open.spotify.com/track/1GG9V5AeKwgT4OFkAD6Buj?si=N0TwFj2ZQ4mho66fZ-rZdQ",
    "Timestamp": "2021-03-26T19:11:05",
    "Domain": "open.spotify.com",
    "Description": "Brian Aspey · Song · 2021"
  },
  {
    "Title": "Sufjan Stevens \"Concerning the UFO Sighting Near Highland, Illinois\" Sheet Music in G Major - Download & Print",
    "Url": "https://www.musicnotes.com/sheetmusic/mtd.asp?ppn=MN0064242",
    "Timestamp": "2021-03-26T19:11:01",
    "Domain": "www.musicnotes.com",
    "Description": "Print and download Concerning the UFO Sighting Near Highland, Illinois sheet music by Sufjan Stevens. Sheet music arranged for Piano/Vocal/Guitar, and Singer Pro in G Major."
  },
  {
    "Title": "APT Encounters of the Third Kind",
    "Url": "https://igor-blue.github.io/2021/03/24/apt1.html",
    "Timestamp": "2021-03-26T18:08:51",
    "Domain": "igor-blue.github.io",
    "Description": "A few weeks ago an ordinary security assessment turned into an incident response whirlwind. It was definitely a first for me, and I was kindly granted permission to outline the events in this blog post. This investigation started scary but turned out be quite fun, and I hope reading it will be informative to you too.  I'll be back to posting about my hardware research soon.     How it started   What hell is this?   The NFS Server   2nd malicious binary   Further forensics   Eureka Moment   The GOlang thingy   How the kernel got patched? and why not the golang app?   What we have so far   Q&A   How it started Twice a year I am hired to do security assessments for a specific client. We have been working together for several years, and I had a pretty good understanding of their network and what to look for.  This time my POC, Klaus, asked me to focus on privacy issues and GDPR compliance. However, he asked me to first look at their cluster of reverse gateways / load balancers:    I had some prior knowledge of these gateways, but decided to start by creating my own test environment first. The gateways run a custom Linux stack: basically a monolithic compiled kernel (without any modules), and a static GOlang application on top. The 100+ machines have no internal storage, but rather boot from an external USB media that has the kernel and the application. The GOlang app serves in two capacities: an init replacement and the reverse gateway software. During initialization it mounts /proc, /sys, devfs and so on, then mounts an NFS share hardcoded in the app. The NFS share contains the app's configuration, TLS certificates, blacklist data and a few more. It starts listening on 443, filters incoming communication and passes valid requests on different services in the production segment.    I set up a self contained test environment, and spent a day in black box examination. Having found nothing much I suggested we move on to looking at the production network, but Klaus insisted I continue with the gateways. Specifically he wanted to know if I could develop a methodology for testing if an attacker has gained access to the gateways and is trying to access PII (Personally Identifiable Information) from within the decrypted HTTP stream.  I couldn't SSH into the host (no SSH), so I figured we will have to add some kind of instrumentation to the GO app. Klaus still insisted I start by looking at the traffic before (red) and after the GW (green), and gave me access to a mirrored port on both sides so I could capture traffic to a standalone laptop he prepared for me and I could access through an LTE modem but was not allowed to upload data from:    The problem I faced now was how to find out what HTTPS traffic corresponded to requests with embedded PII. One possible avenue was to try and correlate the encrypted traffic with the decrypted HTTP traffic. This proved impossible using timing alone. However, unspecting the decoded traffic I noticed the GW app adds an 'X-Orig-Connection' with the four-tuple of the TLS connection! Yay!    I wrote a small python program to scan the port 80 traffic capture and create a mapping from each four-tuple TLS connection to a boolean - True for connection with PII and False for all others: 10.4.254.254,443,[Redacted],43404,376106847.319,False 10.4.254.254,443,[Redacted],52064,376106856.146,False 10.4.254.254,443,[Redacted],40946,376106856.295,False 10.4.254.254,443,[Redacted],48366,376106856.593,False 10.4.254.254,443,[Redacted],48362,376106856.623,True 10.4.254.254,443,[Redacted],45872,376106856.645,False 10.4.254.254,443,[Redacted],40124,376106856.675,False  ...   With this in mind I could now extract the data from the PCAPs and do some correlations. After a few long hours getting scapy to actually parse timestamps consistently enough for comparisons, I had a list of connection timing information correlated with PII. A few more fun hours with Excel and I got histogram graphs of time vs count of packets. Everything looked normal for the HTTP traffic, although I expected more of a normal distribution than the power-low type thingy I got. Port 443 initially looked the same, and I got the normal distribution I expected. But when filtering for PII something was seriously wrong. The distribution was skewed and shifted to longer time frames. And there was nothing similar on the port 80 end.    My only explanation was that something was wrong with my testing setup (the blue bars) vs. the real live setup (the orange bars). I wrote on our slack channel 'I think my setup is sh*t, can anyone resend me the config files?', but this was already very late at night, and no one responded. Having a slight OCD I couldn’t let this go. To my rescue came another security? feature of the GWs: Thet restarted daily, staggered one by one, with about 10 minutes between hosts. This means that every ten minutes or so one of them would reboot, and thus reload it’s configuration files over NFS. And since I could see the NFS traffic through the port mirror I had access to, I recokoned I could get the production configuration files from the NFS capture (bottom dotted blue line in the diagram before).  So to cut a long story short I found the NFS read reply packet, and got the data I need. But … why the hack is eof 77685??? Come on people, its 3:34AM!  What's more, the actual data was 77685 bytes, exactly 8192 bytes more then the ‘Read length’. The entropy for that data was pretty uniform, suggesting it was encrypted. The file I had was definitely not encrypted.    Histogram of extra 8192 bytes:    When I mounted the NFS export myself I got a normal EOF value of 1!    What hell is this?  Comparing the capture from my testing machine with the one from the port mirror I saw something else weird:    For other NFS open requests (on all of my test system captures and for other files in the production system) we get:    Spot the difference?  The open id: string became open-id:. Was I dealing with some corrupt packet? But the exact same problem reappeared the next time blacklist.db was send over the wire by another GW host.  Time to look at the kernel source code:    The “open id” string is hardcoded. What's up?  After a good night sleep and no beer this time I repeated the experiment and convincing myself I was not hullucinating I decided to compare the source code of the exact kernel version with the kernel binary I got.  What I expected to see was this (from nfs4xdr.c):  static inline void encode_openhdr(struct xdr_stream *xdr, const struct nfs_openargs *arg) {     __be32 *p;  /*  * opcode 4, seqid 4, share_access 4, share_deny 4, clientid 8, ownerlen 4,  * owner 4 = 32  */     encode_nfs4_seqid(xdr, arg->seqid);     encode_share_access(xdr, arg->share_access);     p = reserve_space(xdr, 36);     p = xdr_encode_hyper(p, arg->clientid);     *p++ = cpu_to_be32(24);     p = xdr_encode_opaque_fixed(p, \"open id:\", 8);     *p++ = cpu_to_be32(arg->server->s_dev);     *p++ = cpu_to_be32(arg->id.uniquifier);     xdr_encode_hyper(p, arg->id.create_time); }   Running binwalk -e -M bzImage I got the internal ELF image, and opened it in IDA. Of course I didn’t have any symbols, but I got nfs4_xdr_enc_open() from /proc/kallsyms, and from there to encode_open() which led me to encode_openhdr(). With some help from hex-rays I got code that looked very similiar, but with one key difference:  static inline void encode_openhdr(struct xdr_stream *xdr, const struct nfs_openargs *arg) {     ...     p = xdr_encode_opaque_fixed(p, unknown_func(\"open id:\", arg), 8);     ... }   The function unknown_func was pretty long and complicated but eventually sometimes decided to replace the space between 'open' and 'id' with a hyphen.  Does the NFS server care? Apparently this string it is some opaque client identifier that is ignored by the NFS server, so no one would see the difference. That is unless they were trying to extract something from an NFS stream, and obviously this was not a likely scenario. OK, back to the weird 'eof' thingy from the NFS server.  The NFS Server  The server was running the 'NFS-ganesha-3.3' package. This is a very modular user-space NFS server that is implemented as a series of loadable modules called FASLs. For example support for files on the regular filesystem is implemented through a module called libfsalvfs.so. Having verified all the files on disk had the same SHA1 as the distro package, I decided to dump the process memory. I didn't have any tools on the host, so I used GDB which helpfully was already there. Unexpectadly GDB was suddenly killed, the file I specified as output got erased, and the nfs server process restarted.  I took the dump again but there was nothing special there!  I was pretty suspicious at this time, and wanted to recover the original dump file from the first dump. Fortunately for me I was dumping the file to the laptop, again over NFS. The file had been deleted, but I managed to recover it from the disk on that server.  2nd malicious binary  The memory dump was truncated, but had a corrupt version of NFS-ganesha inside. There were two libfsalvfs.so libraries loaded: the original one and an injected SO file with the same name. The injected file was clearly malicious. The main binary was patched in a few places, and the  function table into libfsalvfs.so as replaced with the alternate libfsalvfs.so. The alternate file was compiled from NFS-ganesha sources, but modified to include new and improved (wink wink) functionality.  The most intersiting of the new functionality were two separate implementations of covert channels.  The first one we encountered already:     When an open request comes in with 'open-id' instead of 'open id', the file handle is marked. This is change is opaque to the NFS server, so unpatched servers just ignore it and nothing much happens.   For infiltrated NFS server, when the file handle opened this way is read, the NFS server appends the last block with a payload coming from the malware's runtime storage, and the 'eof' on-the-wire value is changed to be the new total size. An unpatched kernel (which shouldn’t really happen, since it marked the file in the first place) will just ignore the extra bytes. The EOF value is used as a bool, e.g. checked for 0 or not and not a specific value, so having a large integer values doesn’t change anything in the flow of an unmodified kernel.   The second covert channel is used for command and control, and is implemented in the VFS code as a fake directory.  Any writes to /<export>/.snapshot/meta/<cmdid> are handled by the malware code and not passed on to the FS. They are pseudo-files that implement commands through read and write operations.  The malware implemented the following commands:    1701 - self destruct   1702 - set auto self destruct time   1703 - run shell command   1704 - load SO file from buffer specified in command   1706 - get basic system description   1707 - get network connections   170A - upgrade to new SO file   74201 - put buffer in memory dict by ID   74202 - get buffer from memory dict by ID   74650 - put a payload in memory for the first covert channel   74651 - arm the first covert channel   74652 - disarm the first covert channel   For example cp payload.so /mnt/server/.snapshot/meta/1704 will load the SO file in the NFS ganesha process on the target server, and echo 1616580589 > /mnt/server/.snapshot/meta/1702 will set an autodestruct time. Reading this file will retrieve the time.  The self destruct command (0x1701) is very interesting - it sends a UDP broadcast on port 41701 with a random payload of size 321 bytes, and then restarts a clean NFS-ganesha. I guess this is some kind of network signalling.  It appears the malware has a watchdog that iterates over all /proc/<pid>/fd/* links every 25ms, and if a link is open to /proc/<malware pid>/maps or /proc/<malware pid>/smaps or  /proc/<malware pid>/mem it:    kills the offending process,   deletes any writeable file handle it had opened (before it was killed) in /proc/<pid>/fd/, first trying to wipe it,   calls the self destruct command (0x1701).   Further forensics Lets go back to that awful Saturday I triggered the self-destruct. Having a faint understanding I triggered something (that being before I reversed the devil) I asked Klaus to disconnect all the network connections to the outer world and we started taking memory dumps of whatever we could, storing them all on the laptop. In hindsight we destroyed quiet a bit of evidence by triggering more self destructs in other subnets, but I think the self destruct signal has already gone out to the bad guys through a different peace of malware that I later partially recovered, and probably \"heard\" the UDP distress signal (that's what is was called in the binary, not my naming).  After getting all the forensics the client insisted on reconnecting his systems to the web, they were \"losing money\". I switched from forensics to reversing.  In the process, while inspecting the malicious libfsalvfs.so I discovered the commands I mentioned above, and discovered a \"feature\" that helped me fill more paces of the puzzle.  Reversing malware you always find some feeble attempt to obfuscate string using XOR or RC4, or just scrambling the letter ordering. In this case I pretty quickly found a function I called get_obfuscated_string(buffer, string_id). The difference however, was that this one was just horrendous, practically irreversible:    It had like a billion nested switches:    I think they let some intern fresh out of college write that one. It seems the complete list of strings used by the tool are encoded inside in a tree of nested switches, with a variable length encoding, e.g. in one branch the 2nd level might have 3 bits and in another it might have 5 and in a third only a single bit. Some kind of prefix tree if I remember anything from Uni.  Eventually I managed to write code to just brute force the function: #include <stdio.h> #include <stdlib.h> #include <sys/mman.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> #include <string> #include <set>  int main(int argc, char* argv[]) { \t// error handling code omitted \tconst char* filename = (argc > 1) ? argv[1] : \"reconstructed.elf\"; \tunsigned long offset = (argc > 1) ? strtol(argv[2], NULL, 16) : 0x22a0;  \tint fd = open(filename, O_RDONLY); \tstruct stat stbuf; \tfstat(fd, &stbuf); \tconst char* addr = (char*)mmap(NULL, stbuf.st_size, PROT_READ | PROT_EXEC, MAP_PRIVATE, fd, 0); \tclose(fd); \tconst char* base = addr + offset;  \ttypedef int (*entry_t)(char* outbuf, int id); \tentry_t entry = (entry_t)base; \tstd::set<std::string> found; \tchar buffer[1024]; \t \tfor(long bits = 1; bits < 64; ++ bits) { \t\tbool any_new = false; \t\tfor(long id = (bits == 1) ? 0 : (1 << (bits - 1)); id < (1<<bits); ++ id) { \t\t\tint status = entry(buffer, id); \t\t\tif(status == 0) \t\t\t\tcontinue; \t\t\tif(found.find(buffer) != found.end()) \t\t\t\tcontinue; \t\t\tfound.insert(buffer); \t\t\tprintf(\"Got '%s'! [0x%x]\n\", buffer, id); \t\t\tany_new = true; \t\t} \t\tif(!any_new) \t\t\tbreak; \t}  \treturn 0; }   This first binary had the following strings (I am keeping 3 to myself as they have client related info):  '/proc/self/mem',  '/proc/self/maps', '/proc/self/cwd', '/proc/self/environ', '/proc/self/fd/%d', '/proc/self/fdinfo/%d', '/proc/self/limits', '/proc/self/cgroup', '/proc/self/exe', '/proc/self/cmdline', '/proc/self/mounts', '/proc/self/smaps', '/proc/self/stat', '/proc/%d/mem',  '/proc/%d/maps', '/proc/%d/cwd', '/proc/%d/environ', '/proc/%d/fd/%d', '/proc/%d/fdinfo/%d', '/proc/%d/limits', '/proc/%d/cgroup', '/proc/%d/exe', '/proc/%d/cmdline', '/proc/%d/mounts', '/proc/%d/smaps', '/proc/%d/stat',         'nfs', 'nfs4', 'tmpfs', 'devtmpfs', 'procfs', 'sysfs', 'WSL2', '/etc/os-release', '/etc/passwd', '/etc/lsb-release', '/etc/debian_version', '/etc/redhat-release', '/home/%s/.ssh', '/var/log/wtmp', '/var/log/syslog', '/var/log/auth.log', '/var/log/cron.log', '/var/log/syslog.log', '/etc/netplan/*.yaml', '/etc/yp.conf', '/var/yp/binding/', '/etc/krb5.conf', '/var/kerberos/krb5kdc/kdc.conf', '/var/log/ganesha.log', '/etc/ganesha/ganesha.conf', '/etc/ganesha/exports', '/etc/exports', 'Error: init failed', 'DELL', '/usr/lib/x86_64-linux-gnu/libnfs.so.4', '/tmp/.Test-unix/.fa76c5adb8c04239ff3034106842773b', 'Error: config missing', 'Error: sysdep missing', 'Running', 'LOG', '/usr/lib/x86_64-linux-gnu/ganesha/libfsalvfs.so', 'none', '/etc/sudoers', '/proc/net/tcp', '/proc/net/udp', '/etc/selinux/config', 'libdl.so.2', 'libc-', '.so', 'cluster-config', 'recovery-signal',   Eureka Moment Staring endlessly at this weird function I thought to myself: maybe I can look for code that is structured like this in all the dumps we obtained. We have all those block of mov byte ptr [rdi+?], '?':    So lets look for blocks of code that are highly dense with these opcodes:  import sys  with open(sys.argv[1], 'rb') as f:     data = f.read()  STATE=None for i in range(len(data) - 6):     if ord(data[i]) == 0xc6 and ord(data[i + 1]) == 0x47:         if STATE and (STATE[0] + STATE[1] + 0x40) >= i:             STATE[1] = i - STATE[0]             STATE[2] += 1         else:             if STATE and STATE[2] >= 20:                 print('Found region at 0x%x - 0x%x' % (STATE[0], STATE[0] + STATE[1]))             STATE = [i, 4, 1]    And I found them. Oh I did. Some adjustment even led to a version for ARM systems:    The GOlang thingy  I finally found the payload that was sent over to the GW machines. It had 2 stages: the first was the 8192 buffer loaded through the first covert channel. The kernel was modified to inject this buffer into the GOlang application and hook it. This will get fairly technical, but I enjoyed it and so will you:     First note that in the Golang stdlib an HTTP connection can be read through the net/http.(connReader).Read function. The calls are made through a io.Reader interface, so the calls are made through a virtual table, and the call locations cannot be statically identified.   the kernel inject begins by allocating a bunch of RWX memory immediately after the GOlang binary - let's call it the trampoline area, and it will include two types of generated trampoline functions,   Next the ELF symbol table was used to find the 'net/http.(*connReader).Read' symbol,   What we’ll call the 1st trampoline function (code below) is copied to the trampoline area, patching the area marked with HERE with the first 9 bytes of net/http.(*connReader).Read   mprotect(net_http_connReader_read & ~0xfff, 8192, PROT_EXEC | PROT_READ | PROT_WRITE)   modified the beginning of net/http.(*connReader).Read to a near jump into the trampoline - using 5 bytes of the 9 original used by 'move rcx, fs:….' that are the preamble to function.   First trampoline function      pop     rax                  pop     rcx      push    rcx      push    rax      mov     r11, cs:qword_<relocated>      mov     rdi, rcx      call    qword ptr [r11+8]      pop     rax      pop     rcx      push    rcx      mov     rcx, fs:0FFFFFFFFFFFFFFF8h <---- HERE      cmp     rsp, [rcx+10h]      jmp     rax      When the trampoline is called (from the new near jump in the beginning of net/http.(*connReader).Read) it examines the stack to locate the return address, and checks if a second type of trampoline we'll refer to as the return trampoline has already been allocated for the return address for the function,   If not it allocates a new trampoline per call location of net/http.(*connReader).Read from the code below, replacing 123456789ABCDEFh with the absolute address of a function in the malware,   GOlang uses memory for all function argument passing, so immediately after the virtual function call to Read() there will always be a 5 byte mov     reg, [rsp+?] to load Read()'s result into a register. This mov instruction is copied into the first db 5 dup(0) area,   those same 5 bytes are then replacing with a near jump to the 2nd trampoline   the 2nd db 5 dup(0) are filled with a relative near jmp back to the original code patch site.         mov     rax, 123456789ABCDEFh     mov     rdi, rsp     call    rax     db 5 dup(0)     db 5 dup(0)                 This way eventually all the net/http.(*connReader).Read call sites are patched to call a function immediatly after net/http.(*connReader).Read virtual call returns. This lets the malicous code inspect the decoded HTTP packet.  On initialization the 1st stage malware also loads the hefty 2nd stage through the 2nd covert channel, and passes each buffer received from the patch on net/http.(*connReader).Read to it for inspection. The data collected is collected and compressed by the malware and stored back to the NFS server (the 2nd covert channel which bypasses read ACLs on NFS).  Before this case I did not think there was any nice way to hook random GO binaries, this technique is pretty cool.  Unfortunatly I cannot discuss what the 2nd payload actually as it will reveal stuff my employer isn't ready for yet.  How the kernel got patched? and why not the golang app? The golang app is built inside the CI/CD network segment. This segment can only be accessed through monitored jump hosts with MFA. Each day, the CI/CD pipline clones the source code from the GIT server, builds it, and automatically tests it in a pre-production segment. Once tested it gets digitally signed and uploaded to the NFS server. The running app self updates, checking the digital signature beforehand.  The kernel, on the other hand, is manually built by the guy responsible for it on his own laptop. He then digitally signs it and stores it on a server where it is used by the CI/CD pipeline. Fortunatly for us a commented out line in a script in the CI/CD pipline (a line that was not commented out in the GIT!) did not delete old versions of the kernel and we know which versions were tampered with.  We noticed a 3 month gap about 5 month ago, and it corresponded with the guy moving the kernel build from a Linux laptop to a new Windows laptop with a VirtualBox VM in it for compiling the kernel. It looks as if it took the attackers three months to gain access back into the box and into the VM build.  What we have so far  We found a bunch of malware sitting in the network collecting PII information from incoming HTTPS connection after they are decoded in a GOlang app. The data is exfiltrated through the malware network and eventually is sent to the bad guys. We have more info but I am still working on it, expect another blog post in the future with more details, samples, etc’.  Q&A          Q: What was the initial access vector?      A: We have a pretty good idea, but I cannot publish it yet (RD and stuff). Stay tuned!           Q: Why didn't you upload anything to VT yet?      A: A few reasons:            I need to make sure no client info is in the binaries - some of the binaries have hardcoded strings that cannot be shared       All of the binaries I have have been reconstructed from memory dumps, so are not in their original form. Does anyone know how to upload partial dumps into VT?                Q: It there a security vulnerability in GO? in the Kernel?      A: Defenitly not! this is just an obnoxious attacker doing what obnoxious attacker do. I might even say the complexity of the stuff means they don’t have a 0day for this platform.           Q: What about YARA rules, C2 address, etc'?      A: Wait for it, there is a lot more coming!           Q: Why did you publish instead of collecting more?      A: To quote the client \"I don't care who else they are attacking. I just want them off my lawn!\", and he thinks publishing will prevent them from returning to THIS network.     Hopefully what we publish next time will get them off other people’s lawns.           Q: Any Windows malware?      A: Definitly, including what we believe is an EDR bypass. Still working on it.           Q: Any zero days?      A: Maybe …           Q: Who are these bad guys you keep refering to?      A: No clue. Didn’t find anything similiar published. There is now sure way to make anything except unsubstantiated guesses, and I won’t do that.      To be continued."
  },
  {
    "Title": "fix typo by ramtinak · Pull Request #1298 · microsoft/dotnet",
    "Url": "https://github.com/microsoft/dotnet/pull/1298/files",
    "Timestamp": "2021-03-26T17:08:15",
    "Domain": "github.com",
    "Description": null
  },
  {
    "Title": "If Your Boss Could Do Your Job, You’re More Likely to Be Happy at Work",
    "Url": "https://hbr.org/2016/12/if-your-boss-could-do-your-job-youre-more-likely-to-be-happy-at-work",
    "Timestamp": "2021-03-26T17:08:12",
    "Domain": "hbr.org",
    "Description": "Technical competence matters for managers."
  },
  {
    "Title": "How to implement a hash table (in C)",
    "Url": "https://benhoyt.com/writings/hash-table-in-c/",
    "Timestamp": "2021-03-26T17:08:07",
    "Domain": "benhoyt.com",
    "Description": "An explanation of how to implement a simple hash table data structure, with code and examples in the C programming language."
  },
  {
    "Title": "Google's unusual move to shut down an active counterterrorism operation being conducted by a Western democracy",
    "Url": "https://www.technologyreview.com/2021/03/26/1021318/google-security-shut-down-counter-terrorist-us-ally/",
    "Timestamp": "2021-03-26T16:09:12",
    "Domain": "www.technologyreview.com",
    "Description": "A decision to shut down exploits being used by \"friendly\" hackers has caused controversy inside the company's security teams."
  },
  {
    "Title": "Code Maze Weekly #70 - Code Maze",
    "Url": "https://code-maze.com/code-maze-weekly-70/",
    "Timestamp": "2021-03-26T15:08:56",
    "Domain": "code-maze.com",
    "Description": "Issue #70 of the Code Maze weekly. Check out the articles we’ve selected for you this week and enjoy the read. .NET and C# Getting Started with the Roslyn APIs: Writing Code with Code [www.stevejgordon.co.uk] Roslyn is one of the less explored and niche areas of .NET. Steve Gordon shows us how to get started […]"
  },
  {
    "Title": "Creating a task completion source for a C++ coroutine: Failing to produce a result | The Old New Thing",
    "Url": "https://devblogs.microsoft.com/oldnewthing/20210326-00/?p=105009",
    "Timestamp": "2021-03-26T15:08:52",
    "Domain": "devblogs.microsoft.com",
    "Description": "So far, we’ve been working on building a result_holder that can hold any type of result. But what about errors? Because maybe you have code that’s waiting for a result, and the code that’s supposed to produce the result realizes that it messed up and wants to say,"
  },
  {
    "Title": "Building a phone book: Part I",
    "Url": "https://ayende.com/blog/193473-B/building-a-phone-book-part-i?Key=cb5fdbac-f19d-411c-a81d-e3ff5c8e3f7b",
    "Timestamp": "2021-03-26T15:08:49",
    "Domain": "ayende.com",
    "Description": "A couple of weeks ago I asked you to rate an interview question that we had sent to candidates. The idea is to build a persistent phone book, with the idea t..."
  },
  {
    "Title": "Emoji under the hood",
    "Url": "https://tonsky.me/blog/emoji/",
    "Timestamp": "2021-03-26T14:08:42",
    "Domain": "tonsky.me",
    "Description": "Detailed look into all the machinery involved in rendering Emoji"
  },
  {
    "Title": "Introducing Super Bot Fight Mode",
    "Url": "https://blog.cloudflare.com/super-bot-fight-mode/",
    "Timestamp": "2021-03-26T13:08:43",
    "Domain": "blog.cloudflare.com",
    "Description": "Beginning immediately, any Cloudflare user with a Pro or Business site can take new action against bots. We’ve added advanced features in the dashboard and some exciting updates to analytics."
  }
]