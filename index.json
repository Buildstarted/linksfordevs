[
  {
    "Title": "DeepSeek is changing the game",
    "Url": "https://youtube.com/watch?v=O58_UNFq6dg",
    "Timestamp": "2025-01-27T19:02:02",
    "Domain": "youtube.com",
    "Description": "On this edition of #tech on ice, I talk about the new kid on the #llm block, #DeepSeek, and how it is changing the game in #ai. \n#technology #developer #programming #coldplunge",
    "Confidence": 0.9750074
  },
  {
    "Title": "FromSql: Writing SQL Like a Boss in EF Core - Chris Woody Woodruff",
    "Url": "https://woodruff.dev/fromsql-writing-sql-like-a-boss-in-ef-core/",
    "Timestamp": "2025-01-27T14:02:09",
    "Domain": "woodruff.dev",
    "Description": "So, you‚Äôve embraced Entity Framework Core, and life‚Äôs been good. No more handcrafting SQL for every little query. But what happens when EF Core‚Äôs LINQ magic isn‚Äôt entirely cutting it? Maybe you need something specific, like a stored procedure or a complex SQL query that LINQ doesn‚Äôt handle elegantly. That‚Äôs where FromSql swoops in to save the day.",
    "Confidence": 0.98362845
  },
  {
    "Title": "Once You're Laid Off, You'll Never Be the Same Again ‚Äì Mert Bulan",
    "Url": "https://mertbulan.com/2025/01/26/once-you-are-laid-off-you-will-never-be-the-same-again/",
    "Timestamp": "2025-01-27T14:02:08",
    "Domain": "mertbulan.com",
    "Description": "It‚Äôs been over a year since one of the most significant turning points in my life, and it‚Äôs time to reflect on that.",
    "Confidence": 0.9442707
  },
  {
    "Title": "Leveraging Microsoft.Extensions.AI for Tool Calling in C#",
    "Url": "https://laurentkempe.com/2025/01/27/leveraging-microsoftextensionsai-for-tool-calling-in-csharp/",
    "Timestamp": "2025-01-27T14:02:07",
    "Domain": "laurentkempe.com",
    "Description": "In the previous post ‚ÄúLearning AI function calling in C# with Llama 3.2 SLM and Ollama running on your machine‚Äú, we wrapped our head around the concept of tool calling and implemented a C# source gene",
    "Confidence": 0.99807876
  },
  {
    "Title": "Why is .NET so Insanely Fast? with Stephen Toub",
    "Url": "https://youtube.com/watch?v=6Ixv-XmK8YY",
    "Timestamp": "2025-01-27T12:00:57",
    "Domain": "youtube.com",
    "Description": "Check out my workshops and use code WORKSHOP20S for 20% off: https://bit.ly/4jmXbpI\nSubscribe to my weekly newsletter: https://nickchapsas.com\n\nBecome a Patreon and get special perks: https://www.patreon.com/nickchapsas\n\nHello, everybody. I'm Nick, and in this video, I will chat with Microsoft's Partner Software Engineer, Stephen Toub, about .NET's performance improvement.\n\nWorkshops: https://bit.ly/nickworkshops\n\nDon't forget to comment, like and subscribe :)\n\nSocial Media:\nFollow me on GitHub: https://github.com/Elfocrash\nFollow me on Twitter: https://twitter.com/nickchapsas\nConnect on LinkedIn: https://www.linkedin.com/in/nick-chapsas\n\nKeep coding merch: https://keepcoding.shop\n\n#csharp #dotnet",
    "Confidence": 0.9977461
  },
  {
    "Title": "GitHub - seemoo-lab/openhaystack: Build your own 'AirTags' üè∑ today! Framework for tracking personal Bluetooth devices via Apple's massive Find My network.",
    "Url": "https://github.com/seemoo-lab/openhaystack",
    "Timestamp": "2025-01-27T10:01:50",
    "Domain": "github.com",
    "Description": "Build your own 'AirTags' üè∑ today! Framework for tracking personal Bluetooth devices via Apple's massive Find My network. - seemoo-lab/openhaystack",
    "Confidence": 0.9962987
  },
  {
    "Title": "When will .NET Framework retire?",
    "Url": "https://steven-giesel.com/blogPost/6de02565-a08e-4968-b610-22826582c1f1",
    "Timestamp": "2025-01-27T06:02:23",
    "Domain": "steven-giesel.com",
    "Description": "Did you ever ask yourself: When will the good ol' .NET Framework retire? The short answer: I don't know, but we can make a good guess!\n",
    "Confidence": 0.9924283
  },
  {
    "Title": "Delete bin and obj Folders in .NET MAUI",
    "Url": "https://dev.to/vhugogarcia/delete-bin-and-obj-folders-in-net-maui-3j1e",
    "Timestamp": "2025-01-27T06:02:23",
    "Domain": "dev.to",
    "Description": "Every .NET and .NET MAUI developer has encountered that moment when mysterious build issues appear,...",
    "Confidence": 0.99640054
  },
  {
    "Title": "DeepSeek My User Agent",
    "Url": "https://www.jasonthorsness.com/20",
    "Timestamp": "2025-01-27T06:02:23",
    "Domain": "www.jasonthorsness.com",
    "Description": "DeepSeek My User Agent",
    "Confidence": 0.897046
  },
  {
    "Title": "The Protesters' Guide to Smartphone Security",
    "Url": "https://www.privacyguides.org/articles/2025/01/23/activists-guide-securing-your-smartphone/",
    "Timestamp": "2025-01-27T01:01:38",
    "Domain": "www.privacyguides.org",
    "Description": "Your phone is an essential tool, but it also represents a huge risk to your privacy and security. Understanding these best practices when it comes to securing your smartphone will help keep you and your data safe.",
    "Confidence": 0.94461644
  },
  {
    "Title": "From Empty Chassis to Full System: My eBay PDP-11/73 Rebuild Adventure",
    "Url": "https://youtube.com/watch?v=ZdDbk3VEzIk",
    "Timestamp": "2025-01-27T01:01:35",
    "Domain": "youtube.com",
    "Description": "Join me as I rebuild a vintage PDP-11/73 from a bare DEC chassis, step by step. In this episode, I install a QBUS CPU card, two PMI memory boards (for a full 4MB), and interface with RQDX3 and M3104 serial boards to bring everything online. I‚Äôll show how I tackled slot configurations, DMA bus grants, and the magic of the QBone for emulating boot media. We‚Äôll format a classic DEC hard drive, then load XXDP diagnostics, and prep the system for BSD or RT-11. If you‚Äôre into retro computing, DEC hardware, or PDP-11 restorations, this is your backstage pass to a full rebuild‚Äîfrom backplane setup to kernel tweaks!  \n\nFree Sample of my Book on the Spectrum: https://amzn.to/3zBinWM\n\nWatch ShopTalk Now on Dave's Attic: https://youtu.be/5Emgx0lhllE\n\nFollow me on X: https://x.com/davepl1968\nFacebook: https://www.facebook.com/davepl",
    "Confidence": 0.9904907
  },
  {
    "Title": "The Microsoft 365 Copilot launch was a total disaster",
    "Url": "https://www.zdnet.com/home-and-office/work-life/the-microsoft-365-copilot-launch-was-a-total-disaster/",
    "Timestamp": "2025-01-27T00:02:14",
    "Domain": "www.zdnet.com",
    "Description": "At the start of the New Year, with no warning, Microsoft gives its flagship productivity app a name change and a huge price increase. Why would the company make this mess? I asked Copilot, who explained it very well.",
    "Confidence": 0.9570315
  },
  {
    "Title": "The Management Paradox",
    "Url": "https://bloomt.org/p/the-management-paradox",
    "Timestamp": "2025-01-26T22:01:57",
    "Domain": "bloomt.org",
    "Description": "Everything simple is wrong. Everything complex is unusable.",
    "Confidence": 0.9518022
  },
  {
    "Title": "The Lost Futures of Computing: How We Got Boxed Into the Desktop Metaphor - Andr√© Klein Dot Net",
    "Url": "https://andreklein.net/the-lost-futures-of-computing-how-we-got-boxed-into-the-desktop-metaphor/",
    "Timestamp": "2025-01-26T22:01:56",
    "Domain": "andreklein.net",
    "Description": "In the late 1960s, Xerox was the undisputed king of the copier world, practically printing money with its revolutionary machines. With a stranglehold on 95% of the U.S. copier market, the company wasn‚Äôt just thriving‚Äîit was reshaping how the world handled information. Not out of an immediate fear for their paper-centric business, but with visionary... Continue reading ‚Üí",
    "Confidence": 0.9029708
  },
  {
    "Title": "Unit Testing Principles",
    "Url": "https://olano.dev/blog/unit-testing-principles/",
    "Timestamp": "2025-01-26T22:01:56",
    "Domain": "olano.dev",
    "Description": "If we backtrack to the foundation of our discipline, we‚Äôll land on what testing and design have in common: the pursuit of sustainable software.",
    "Confidence": 0.99626493
  },
  {
    "Title": "What happened to Only Paranoid Survives?",
    "Url": "https://yuhao.app/blog/what-happened-to-only-paranoid-survives",
    "Timestamp": "2025-01-26T22:01:56",
    "Domain": "yuhao.app",
    "Description": "Here‚Äôs the revised version with typos and grammar fixed, while keeping the language intact:\n\nI am halfway through Tae Kim‚Äôs¬†The Nvidia Way, and it‚Äôs the 2007 to early 2010s. Nvidia has introduced CUDA and worked with companies like Adobe and Autodesk to enable parallel computing to massively make their applications faster. And I just can‚Äôt stop thinking ‚Äî Oh my god, how is Intel letting this happen? It‚Äôs absurd that it‚Äôs Intel‚Äôs Andy Grove who coined the term¬†Only the Paranoid Survive, and one C",
    "Confidence": 0.9171292
  },
  {
    "Title": "The first perfect computer",
    "Url": "https://celso.io/posts/2025/01/26/the-first-perfect-computer/",
    "Timestamp": "2025-01-26T22:01:55",
    "Domain": "celso.io",
    "Description": "This is a story about restoring and upgrading a Commodore Amiga 1000, the first model of the Amiga series.\nMany of you might be familiar with the popular Amiga 500 or later models, but the Commodore Amiga 1000 was actually the first model of the Amiga series produced.\nI consider the A1000 a significant piece of computing history. Arguably one of the most important machines of the 16-bit revolution period, considered by many to be the first multimedia computer, it marked the beginning of Commodore‚Äôs last cycle, after the huge success of the C64, in the history of personal computing.",
    "Confidence": 0.9810452
  },
  {
    "Title": "What's OAuth2 Anyway? - Blog by Roman Glushko",
    "Url": "https://www.romaglushko.com/blog/whats-aouth2/",
    "Timestamp": "2025-01-26T22:01:55",
    "Domain": "www.romaglushko.com",
    "Description": "Why the OAuth2 protocol was designed the way it is and how it works.",
    "Confidence": 0.9968437
  },
  {
    "Title": "MOS brings macOS' smooth scrolling to any mouse",
    "Url": "https://notes.ghed.in/posts/2025/mos-smooth-scrolling-mouse-macos/",
    "Timestamp": "2025-01-26T22:01:55",
    "Domain": "notes.ghed.in",
    "Description": "The biggest (only?) issue with using a non-Apple mouse on macOS is losing that smooth scrolling, also known as kinetic scrolling.",
    "Confidence": 0.89979833
  },
  {
    "Title": "Python: re-creating async in 10 lines using generators",
    "Url": "https://lucasoshiro.github.io/software-en/2025-01-25-python_async_iterators/",
    "Timestamp": "2025-01-26T22:01:55",
    "Domain": "lucasoshiro.github.io",
    "Description": "Iterators + threads will be enough, blessed by functors",
    "Confidence": 0.9977365
  },
  {
    "Title": "How to work for Microsoft without getting hired",
    "Url": "https://anasismail.com/how-to-work-for-microsoft-without-getting-hired",
    "Timestamp": "2025-01-26T22:01:55",
    "Domain": "anasismail.com",
    "Description": "I‚Äôve been a fan of open-source longer than I have been an adult. The moment I first switched to Linux in 2012, I knew it would remain my daily driver until I could afford to buy a Mac. As I, both voluntarily and involuntarily, continued to ditch my usual programs in favor of free and open-source alternatives, the deeper I dove into the world of open-source and the stronger became my desire to contribute to it. I didn‚Äôt have to wait long because between the Septembers of 2014 and 2015, I led the development of Emu-OS ‚Äî An ubuntu-based distro for retro-gaming. This was a short-lived but two-pronged high because by then, building an operating system had also already been my dream for a couple of years. Sadly, just when Emu-OS started gaining popularity, my team abandoned me and I was too young to know how to continue on my own. Since then, I‚Äôve come a long way, both as a developer and a professional, but Emu-OS remained my sole open-source contribution until just a few months ago. Last May, I started architecting a project in C# which revolved around OData ‚Äî a standard maintained primarily by Microsoft for building RESTful APIs with powerful querying capabilities. In fact, I particularly chose to build it in C# because of that. It was the right decision because while there‚Äôs fairly official OData libraries for both Java and Javascript, they are ridiculously lacking when compared to Microsoft.AspNetCore.OData. It was practically our first day taking that library for a test-drive when a fellow coder showed me a bug. Remember when I said earlier that OData has powerful querying capabilities? randomapi.com/Products?$select=ProductID,ProductName,Price,Category&$filter=Price gt 20 and Category eq 'Electronics'&$orderby=Price desc&$top=10&$skip=5&$expand=Supplier&$count=true The above query would fetch the ID, Name, Price and Category of the top 10 Electronic Products whose price exceeds $20, sorted from highest to lowest price. Notice the part that says $expand=Supplier? That‚Äôs a join with the Suppliers table. Powerful stuff right? Now let‚Äôs talk about the bug. My teammate noticed that if you try to $select a field that was housing a Collection<String>, it would crash. I recreated the bug and immediately noticed that the problem was specific to SQL databases. If you had a mock database in-memory, or if you were to convert the IQueryable to a List it would work fine. I also noticed that while on SQL Server it was happening only with string collections, on SQLite it was happening with numeric types too. This made perfect sense since Primitive Collections were not even supported before EF Core 8, however it was also clear that this wasn‚Äôt defined behavior. I decided to clone the repo for Microsoft.AspNetCore.OData, use a package reference in my project and debug through its lines. As early as the first run, I was able to isolate the problematic part of the code because a quick glance at the variables in the debugger showed me exactly the kind of LINQ that was part of the error message. Long story short, here‚Äôs what was happening: While collections were handled separately there was absolutely no discrimination in terms of base types. The same code was powering collections of navigations, complex and primitives. For each element of the collection it was performing a nested select like this: collection.Select(field => field.Select(d=> d)) While this makes perfect sense for navigations and complex types, for primitives it meant absolutely nothing and theoretically couldn‚Äôt even be executed. What‚Äôs weird to me is that on SQL Server, integers could handle this when strings couldn‚Äôt despite the fact that on a spectrum of scalar to collection, strings lean towards the collection side. I grabbed a list of all the primitive types as defined in the release notes for EF Core 8 and added a condition where if the underlying type in the collection was any of those, it should proceed without the nested select. Worked like a charm. I opened my PR on July 16th 2024. When it failed to catch attention, I created an issue for the bug two days later. That did the trick. Throughout August, I worked with the maintainers to make sure the code was up-to-standards, and that all tests were passing and everything was well-documented and more importantly, correctly documented. While I got approved a couple of times in September, it wasn‚Äôt until the latter half of October that the nitpicking stopped. In November, I reached out to them and requested that they merge it because my project depended on it and they heeded my request. 10 days later, the first release with my commits came out. Those of you who have made it this far, I want to thank you for taking the time to read this. As I finished typing the last paragraph, I realized that it reads like an excited child wrote it. But that‚Äôs exactly how I feel. I‚Äôve been a developer for the past 13 years, worked with people from various countries, written code in every major language, and made a lot of money, but very few experiences have felt as rewarding as this.",
    "Confidence": 0.90813124
  },
  {
    "Title": "Hard numbers in the Wayland vs X11 input latency discussion",
    "Url": "https://mort.coffee/home/wayland-input-latency/",
    "Timestamp": "2025-01-26T21:01:40",
    "Domain": "mort.coffee",
    "Description": "Date: 2025-01-26 \nGit: https://gitlab.com/mort96/blog/blob/published/content/00000-home/00016-wayland-input-latency.md",
    "Confidence": 0.98586893
  },
  {
    "Title": "No bitcoin ETFs at Vanguard? Here‚Äôs why",
    "Url": "https://corporate.vanguard.com/content/corporatesite/us/en/corp/articles/no-bitcoin-etfs-at-vanguard-heres-why.html",
    "Timestamp": "2025-01-26T20:01:40",
    "Domain": "corporate.vanguard.com",
    "Description": "Vanguard leaders explain why we‚Äôre not offering bitcoin ETFs or other crypto products on our brokerage platform.",
    "Confidence": 0.92207426
  }
]