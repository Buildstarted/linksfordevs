[
  {
    "Title": "How Fidelity uses .NET MAUI for Cross-platform desktop",
    "Url": "https://youtube.com/watch?v=kn-nmFsaMHc",
    "Timestamp": "2024-11-16T00:01:39",
    "Domain": "youtube.com",
    "Description": "Kevin and Matthew join us from Fidelity to share their experiences and successes using .NET MAUI to power the next generation of their Active Trader Pro desktop client. We'll get into:\n\nOptimizing UI Dispatch for MAUI Applications\nWebView Pooling and Optimizations for OSX and Windows\nMDI multi-window desktop interfaces\nControlled Initialization and Shutdown sequences for MAUI\nDynamic Context Menus\n\nFeaturing: David Ortinau, Matthew Faust, Kevin Bieri\n\nConnect with .NET: \nBlog:  https://aka.ms/dotnet/blog\nTwitter: https://aka.ms/dotnet/twitter\nTikTok:  https://aka.ms/dotnet/tiktok\nMastodon:  https://aka.ms/dotnet/mastodon\nLinkedIn:  https://aka.ms/dotnet/linkedin\nFacebook:  https://aka.ms/dotnet/facebook\nDocs: https://learn.microsoft.com/dotnet\nForums: https://aka.ms/dotnet/forums\nüôã‚Äç‚ôÄÔ∏èQ&A: https://aka.ms/dotnet-qa\nüë®‚ÄçüéìMicrosoft Learn: https://aka.ms/learndotnet\n\n#dotnet #maui #dotnetconf",
    "Confidence": 0.9903261
  },
  {
    "Title": "GitHub - epasveer/seer: Seer - a gui frontend to gdb",
    "Url": "https://github.com/epasveer/seer",
    "Timestamp": "2024-11-15T23:01:37",
    "Domain": "github.com",
    "Description": "Seer - a gui frontend to gdb. Contribute to epasveer/seer development by creating an account on GitHub.",
    "Confidence": 0.9971301
  },
  {
    "Title": "Infuse AI in your Windows apps with .NET",
    "Url": "https://youtube.com/watch?v=J0MJDLEm1AQ",
    "Timestamp": "2024-11-15T23:01:33",
    "Domain": "youtube.com",
    "Description": "Join us for a demo packed session where you will learn what you can do with AI on Windows and how to add AI based features to your Windows apps to delight and empower your users. With Windows Copilot Runtime, developers can leverage APIs backed by on-device models such as Phi Silica and use frameworks and tools to leverage the latest open source or proprietary models locally within their apps.\n\nFeaturing: Nikola Metulev, Alexandre Zollinger Chohfi\n\nConnect with .NET: \nBlog:  https://aka.ms/dotnet/blog\nTwitter: https://aka.ms/dotnet/twitter\nTikTok:  https://aka.ms/dotnet/tiktok\nMastodon:  https://aka.ms/dotnet/mastodon\nLinkedIn:  https://aka.ms/dotnet/linkedin\nFacebook:  https://aka.ms/dotnet/facebook\nDocs: https://learn.microsoft.com/dotnet\nForums: https://aka.ms/dotnet/forums\nüôã‚Äç‚ôÄÔ∏èQ&A: https://aka.ms/dotnet-qa\nüë®‚ÄçüéìMicrosoft Learn: https://aka.ms/learndotnet\n\n#dotnet",
    "Confidence": 0.9964117
  },
  {
    "Title": "The fallacies of distributed systems",
    "Url": "https://newsletter.francofernando.com/p/the-fallacies-of-distributed-systems",
    "Timestamp": "2024-11-15T22:01:56",
    "Domain": "newsletter.francofernando.com",
    "Description": "Eight distributed systems fallacies that are underrated during system design.",
    "Confidence": 0.9964265
  },
  {
    "Title": "Switching away from Pocket - Marcel Kapfer",
    "Url": "https://mmk2410.org/2024/11/13/switching-away-from-pocket",
    "Timestamp": "2024-11-15T22:01:56",
    "Domain": "mmk2410.org",
    "Description": "After using Pocket for many years I needed to switch.",
    "Confidence": 0.9722566
  },
  {
    "Title": "Wireguard + SSH",
    "Url": "https://rair.dev/wireguard-ssh/",
    "Timestamp": "2024-11-15T22:01:55",
    "Domain": "rair.dev",
    "Description": "When COVID arrived in 2020, I lost my job as a scuba diving instructor. Now I‚Äôm writing articles about self-hosted applications to continue teaching.",
    "Confidence": 0.9905802
  },
  {
    "Title": "Why didn‚Äôt we get GPT-2 in 2005?",
    "Url": "https://dynomight.net/gpt-2/",
    "Timestamp": "2024-11-15T22:01:54",
    "Domain": "dynomight.net",
    "Description": "We probably could have",
    "Confidence": 0.98344576
  },
  {
    "Title": "5 ways to reduce the risk and impact of LLM hallucinations",
    "Url": "https://chrislovejoy.me/reduce-hallucinations",
    "Timestamp": "2024-11-15T22:01:53",
    "Domain": "chrislovejoy.me",
    "Description": "I‚Äôve been building apps powered by LLMs for the past 2 years - mostly in healthcare where the stakes are high.",
    "Confidence": 0.9230925
  },
  {
    "Title": "You zag when others zig | Pavlina Papashimova",
    "Url": "https://www.pavlina.me/you-zag-when-others-zig/",
    "Timestamp": "2024-11-15T22:01:52",
    "Domain": "www.pavlina.me",
    "Description": "You‚Äôre not just one thing. Not only a professional, or only a partner, or only a parent. Not only someone who works, or someone who runs, or someone who paints in their free time.",
    "Confidence": 0.96526754
  },
  {
    "Title": "Grafana as proxy",
    "Url": "https://ceesbos.nl/posts/20241108-grafana-as-proxy/",
    "Timestamp": "2024-11-15T22:01:52",
    "Domain": "ceesbos.nl",
    "Description": "Your local development of a Grafana plugin or dashboard may lack representative data. Connecting to production data sources may be impossible, but there are other ways to connect. Read more to find out how to use Grafana as a proxy to access the data.",
    "Confidence": 0.9893531
  },
  {
    "Title": "Guaranteed Fastest Way to Fix Bugs",
    "Url": "https://mattsgarlata.com/2024/11/14/guaranteed-fastest-way-to-fix-bugs/",
    "Timestamp": "2024-11-15T22:01:51",
    "Domain": "mattsgarlata.com",
    "Description": "This is going to sound a little trite, but bear with me for a few sentences here. The fastest way to fix a bug is to not fix it. Before you roll your eyes and write this off as stupid or obvious, l‚Ä¶",
    "Confidence": 0.97399914
  },
  {
    "Title": "At-will employment",
    "Url": "https://www.kcoleman.me/2024/10/31/at-will.html",
    "Timestamp": "2024-11-15T22:01:51",
    "Domain": "www.kcoleman.me",
    "Description": "Before I joined Grab, USA‚Äôs At-will employment system left me uncomfortable. When I was impacted by layoffs, I simultaneous balanced the emotional disruption establishing a new identity (‚ÄúI was no longer Kevin that works at ___‚Äù, but ‚ÄúfUnemployed Kevin‚Äù) and the need to re-evaluate my finances and healthcare. A 30-day or 60-day notice would have given me a softer landing while I rebuild myself. But my experiences as a hiring manager at an international company shift my perspective on what is actually best for the employee (and the employer). As a hiring manager, I‚Äôve hired and said good-bye to co-workers and directs from India, Malaysia, and the USA countries in contract employment and at-will roles. At-will in the USA In late 2020, I wanted to leave Yelp as soon as possible. When I got a job offer from Grab, I provided Yelp the standard 2 weeks notice, last day being Friday and then Grab started me the following Monday. This rapid change had perfect timing, because my new-hire grant was priced about 40% below our IPO price a year later. Coworkers that joined during the pre-ipo period (7 months after I did) had their shares valued at ~$10 IPO price (currently trading at $4.10/ea). Most of the time, Start your vesting as soon as possible is the best strategy. Contracted termination in Singapore When I got my first big project at Grab, I was assigned a product manager that halfway through the project put in her 60 day notice to leave Grab. During those 60 days, you‚Äôre expected to perform your full job duties until the day you leave. Because the project was schedule to end 2 weeks before her last day, her manager didn‚Äôt bother transitioning her responsibilities to another person. Unfortunately for me, she was visibly disengaged with her work. I wasn‚Äôt able to get the answers I needed at the rate I needed them, and thus couldn‚Äôt deliver the project on time. She effectively had 2 months of part-time labor for full time pay with her coworkers paying the price with their own careers. Hiring in India A coworker give a 60 day notice to leave the company. He stayed engaged until his last week, which everyone appreciated, but hiring a backfill was a hot mess. I don‚Äôt know if internal book keeping delayed searching for a backfill, but it wasn‚Äôt 2 months after he left did we find a replacement. Unfortunately, this replacement also had a 60 day notice they needed to give their current employer. Our group made due with a hole in our group for 4 months (2 months hiring + 2 months waiting for them to join + 1.5 months of training). 10 days before their start date, the new hire messaged the company saying their current employer gave them a raise once they saw Grab‚Äôs offer and would not be joining. With the role being potentially vacant for an additional 4 months, the manager ended up just losing the headcount. Hiring in Malaysia A team member in India informed me they wanted to leave the company and put in their 60 day notice. I negotiated with People Operations and my manager to terminate him immediately (but keep him on payroll for 60 days to meet the contract obligations). After my experience with the lady in singapore, I thought a visible hole on my team would be less painful than trying to get someone that doesn‚Äôt want to be here to complete there work. I communicated to other teams that we didn‚Äôt have the bandwidth to deliver on our project commitments because he was gone. I opted to backfill the role in Malaysia, for various reasons. After 2 months of interviewing, we found a great candidate. Unfortunately, this person also had a 2 month contract that they needed to complete, resulting in a 5 month hole on my team between one person leaving and another person coming in. Hire and Fire With contract employment, there is a probation period ranging from 3-6 months. During this time, the employment is practically ‚Äúat-will‚Äù where the employer can terminate an employee instantly without the 60 day notice period. This system incentizes companies with teams of many redundent employees (for exmaple call centers) to ‚Äúhire and fire‚Äù during that period if anything smells wrong, because if they just wait 1 day, they could be stuck with an underperformer for months. As difficult as at-will employment might feel sometimes, it is much more efficient for the employee and the employer if they are able to leave the job when they want to leave the job. Employees maximize their engagement (and career growth) if they are able to shift onto their next chapter faster and employers can better manage",
    "Confidence": 0.68474627
  },
  {
    "Title": "A World Without Engineering Managers?",
    "Url": "https://www.ebiester.com/agile/2024/03/31/a-world-without-engineering-managers.html",
    "Timestamp": "2024-11-15T22:01:51",
    "Domain": "www.ebiester.com",
    "Description": "There is a recurring complaint about the uselessness of software development (or engineering) managers in tech. At best, they‚Äôre considered a necessary evil. At worst, they‚Äôre incompetent programmers (or non-programmers1) who, through political means, weaseled into positions of power, became micromanagers, and actively impede the mission of getting software to customers. For some, they shouldn‚Äôt even exist. That said, I do think all software development managers should have experience as a senior developers or QE. Even with technical support, it is hard to add value as a manager without such a base.¬†‚Ü©",
    "Confidence": 0.9783053
  },
  {
    "Title": "We don‚Äôt need to use what we make",
    "Url": "https://sive.rs/salt",
    "Timestamp": "2024-11-15T22:01:51",
    "Domain": "sive.rs",
    "Description": "For many years, I was a touring musician, performing live on stage every week.\n\tBut I didn‚Äôt like attending concerts.\n\tI liked making music more than listening to music.\n\tI felt I must be in the wrong line of work, creating something that I don‚Äôt consume.\n\tI never reconciled this feeling.",
    "Confidence": 0.7271395
  },
  {
    "Title": "Exploring LLM performance on the ARC training dataset",
    "Url": "https://lewish.io/posts/exploring-and-tagging-the-arc-training-dataset",
    "Timestamp": "2024-11-15T22:01:51",
    "Domain": "lewish.io",
    "Description": "A quick write-up on tagging and describing the ARC training dataset tasks, merging it with evaluation data for some LLMs, doing some analysis on it, and putting it all on a site so you can explore it.",
    "Confidence": 0.97532564
  },
  {
    "Title": "fulfillment and capitalism",
    "Url": "https://vivekn.dev/blog/fulfillment-capitalism",
    "Timestamp": "2024-11-15T22:01:51",
    "Domain": "vivekn.dev",
    "Description": "viveknathani - blog",
    "Confidence": 0.9241553
  },
  {
    "Title": "Tiny GraphRAG (Part 2)",
    "Url": "https://www.stephendiehl.com/posts/graphrag2/",
    "Timestamp": "2024-11-15T22:01:51",
    "Domain": "www.stephendiehl.com",
    "Description": "Personal Blog",
    "Confidence": 0.9953527
  },
  {
    "Title": "Finding my QA Automation Job in Bulgaria 2024",
    "Url": "https://www.pavlinbg.com/posts/finding-my-qa-automation-job-in-bulgaria-2024",
    "Timestamp": "2024-11-15T22:01:50",
    "Domain": "www.pavlinbg.com",
    "Description": "My journey navigating the Bulgarian job market in 2024 as Automation QA. From application strategies and interview experiences to insights on market challenges, learn what it takes to succeed in this competitive landscape",
    "Confidence": 0.9342755
  },
  {
    "Title": "CMTOPS.DEV",
    "Url": "https://cmtops.dev/posts/building-observability-with-clickhouse/",
    "Timestamp": "2024-11-15T22:01:48",
    "Domain": "cmtops.dev",
    "Description": "Tim's internet corner. You will find occasional articles related to Linux, other Unix-like systems, and DevOps here.",
    "Confidence": 0.99585366
  },
  {
    "Title": "Open Source When We Say So",
    "Url": "https://writing.kemitchell.com/2024/11/14/OSI-AI",
    "Timestamp": "2024-11-15T22:01:48",
    "Domain": "writing.kemitchell.com",
    "Description": "still stronger claims of self-authority in OSI‚Äôs new AI ‚Äúdefinition‚Äù",
    "Confidence": 0.87813246
  },
  {
    "Title": "‚ÄòReflections on Trusting Trust‚Äô, but completely by accident this time",
    "Url": "https://secret.club/2024/10/21/unnecessarily-exhaustice-rca.html",
    "Timestamp": "2024-11-15T22:01:47",
    "Domain": "secret.club",
    "Description": "Compilers are complicated. You just won‚Äôt believe how vastly, hugely, mind-bogglingly complicated they are. I mean, you may think C build systems are painful, but they‚Äôre just peanuts to compilers. - Douglas Adams, probably This blog post assumes you have some knowledge of LLVM internals - I‚Äôll try to fill in some of the lesser-known gaps but there are likely some other, better resources out there for learning about that. I have only one other post on this blog at the time of writing. It describes a somewhat boring, easily-explained missed optimization in one of the core components of LLVM with some actual, real-world implications. This blog post, although it follows roughly the same format, is the exact opposite: An exhaustive analysis of a miscompilation that impacted basically no-one Introduction & disclaimer Is all the complexity in modern-day optimizing compilers warranted? Probably not. Take LLVM, for example - once you get to the backends it might as well be 200 compilers in a trench coat. Picture this: it‚Äôs two in the morning and you‚Äôve figured out exactly what went wrong after several weeks of debugging. You‚Äôre on your fifth coffee and have an idea for a target-independent patch. There‚Äôs just one small problem - you‚Äôd have to reach out to other overworked people from other companies, convince them that giving you some of their extremely limited time is worthwhile, wait for a bit, address any and all potential concerns, wait a bit more, and Lord help you if something breaks on a piece of hardware you don‚Äôt have access to. Alternatively, you could just add another if statement, ping a coworker to fast-track code review since the change is restricted to your little llvm/lib/Target sandbox, and be on your merry way. Repeat a few times a day and now your Modular‚Ñ¢ framework ends up with a bunch of duplicated, convoluted, unnecessarily target-dependent code generation logic. Yes, quite a bit of the complexity is the result of Conway‚Äôs Law and the inevitable bitrot of a decades-old codebase. That being said, there is still an incredible amount of inherent messiness when targeting dozens of architectures in a (mostly) correct and performant way. Nobody is ever going to have a full, deep view of the entire system at once, and even if they did it would be out of date by the next Revert \"[NFC] ...\" commit. Every computer on the planet is a compiler fuzzer We tame the combinatorial explosion of potentially-buggy interactions through the kind of extraordinarily exhaustive testing only possible in the information age. Even a simple ‚ÄúHello, world!‚Äù is a reliability test of the compiler, the linker, the runtime, the operating system, the terminal, any rendering middleware (which might also be running LLVM to compile shaders!), display drivers, the underlying hardware itself, and all software used in the process of building any of that. As such, you can be reasonably confident that release versions of production compilers, when using the flags and target architectures everyone else does, will probably not break anything. That‚Äôs not to say stuff doesn‚Äôt get through the cracks - yarpgen, alive2, Csmith, and similar tools would not have a long list of trophies otherwise - but those tools are also now just a part of this testing process too. A direct corollary of this is that bugs are regularly introduced in mainline branches, even by seasoned developers, and fixed whenever this exhaustive testing happens and people actually care about fixing them. Anyway, take a look at this commit: https://github.com/llvm/llvm-project/commit/c6e01627acf8591830ee1d211cff4d5388095f3d It is extremely important to emphasize: This committer knows what they‚Äôre doing! They‚Äôre good at their job! It‚Äôs just the nature of compilers and llvm-project/main; shit happens. The miscompile was found and fixed in roughly a week, and if this is all there was to it then we wouldn‚Äôt be here. The funniest compiler bug Here‚Äôs a bug. https://issues.chromium.org/issues/336399264 Credits to @dougall. As a summary, here‚Äôs what happened. Compile clang with the commit right before the fix above - This is generally called a ‚Äústage 1‚Äù build Bootstrap clang with the newly-compiled clang - This is a ‚Äústage 2‚Äù build Build the repro script attached with ASAN and fuzzing harnesses on when targeting AArch64 Get a miscompile in the output. Due to the Clang version being known-buggy and swapped out pretty much immediately, the stage 2 miscompile was noticed by pretty much nobody except people employed at companies that pay them to look at this stuff. This is the system working as intended! Unfortunately, I am a complete sucker for bugs like this but do not get paid to look at them. I wanted to figure out what went wrong here because it‚Äôs such a great example of the emergent complexity that comes with modern-day compilers. hear that? it‚Äôs the sound of my free time going down the drain for the next week. fwsssssssshhhhhhhhhhhhhhhhhhhhhhhh There‚Äôs some good news: this is a bug in the loop vectorizer, meaning our stage2 compiler is probably not going to be broken in the impossible-to-debug some-target-specific-register-allocation-thing-is-cooked-somehow way. That may not always be the case (especially if undef/poison are involved) but it seems like we‚Äôre going to get a nice, deterministic problem in the mostly-sorta-target-independent part of the pipeline. undef and poison are, roughly, LLVM‚Äôs way of modelling the set of all possible values and a deferred form of undefined behavior. I will not be explaining how this is formalized or what the implications for compiler transforms are. It gets weird. Please do not ask. Unfortunately, there is also some bad news: this is a bug in the loop vectorizer. The vectorizer is probably the single most per-target-tuned pass in the entirety of the generic optimization pipeline. That means we‚Äôre probably going to have some trouble convincing the compiler to deliberately emit the wrong instruction sequence on platforms without cross-compiling. Cross-compiling is not fun. I do not want to cross-compile, so I would like to try to coax the compiler into emitting the right (wrong?) code on X86 if possible. Foreshadowing is a narrative device in which- Reproducing the bug with somewhat-helpful debugging information For now, it‚Äôs important to just reproduce the original bug with the aforementioned stage1/stage2 executables in exact the same build environment. While we‚Äôre at it, let‚Äôs tack on some useful debugging options that will hopefully help us down the line: -print-after=loop-vectorize lets us print out a textual dump of the IR whenever the loop vectorizer pass has finished -ir-dump-directory lets us redirect this output to a folder somewhere This is going to generate a lot of text files. That‚Äôs okay, though, because computers are really fast and it doesn‚Äôt impact the build times in any meaningful way if we use an SSD. Simply run this easy-to-remember set of CMake incantations for the stage1 and stage2 builds: LLVM_DIR=$(pwd) cmake -S llvm -B build/stage1 -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=clang -DLLVM_TARGETS_TO_BUILD=AArch64 cmake --build build/stage1 cmake -S llvm -B build/stage2 -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=clang -DLLVM_TARGETS_TO_BUILD=AArch64 -DCMAKE_C_COMPILER=\"$(realpath build/stage1/bin)/clang\" -DCMAKE_CXX_COMPILER=\"$(realpath build/stage1/bin)/clang++\" -DCMAKE_C_FLAGS=\"-mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$LLVM_DIR/build/stage2/ir_dump\" -DCMAKE_CXX_FLAGS=\"-mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$LLVM_DIR/build/stage2/ir_dump\" cmake --build build/stage2 Unfortunately, I do not have an Apple device ‚Äì as such, I would like to thank an anonymous friend with an M3 laptop for taking the time to help me with this. Time to test. $ ./build/stage1/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum b8dd73117741b08fddb6065fb9289f861f9375b63ebab3ee67edf547ecb0c17a - $ ./build/stage2/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum cf9f89efb0549051409d2559441404b1e627c73f11e763c975be20fcd7fcda34 - Okay, we‚Äôve successfully reproduced the bug! We‚Äôre not really interested in why this code specifically breaks at runtime - it‚Äôs just a minimized reproducer - we just wanted to make sure we could catch it at all. With a repro in hand, we immediately notice some funky changes: Output difference < .section __TEXT,__literal16,16byte_literals < .p2align 4, 0x0 ; -- Begin function _ZN3re28Compiler9PostVisitEPNS_6RegexpENS_4FragES3_PS3_i < lCPI1_0: < .byte 255 ; 0xff < .byte 255 ; 0xff < .byte 255 ; 0xff < .byte 255 ; 0xff < .byte 255 ; 0xff < .byte 255 ; 0xff < .byte 255 ; 0xff < .byte 255 ; 0xff < .byte 8 ; 0x8 < .byte 9 ; 0x9 < .byte 10 ; 0xa < .byte 11 ; 0xb < .byte 12 ; 0xc < .byte 255 ; 0xff < .byte 255 ; 0xff < .byte 255 ; 0xff < lCPI1_1: < .byte 16 ; 0x10 < .byte 17 ; 0x11 < .byte 18 ; 0x12 < .byte 19 ; 0x13 < .byte 20 ; 0x14 < .byte 21 ; 0x15 < .byte 22 ; 0x16 < .byte 23 ; 0x17 < .byte 8 ; 0x8 < .byte 9 ; 0x9 < .byte 10 ; 0xa < .byte 11 ; 0xb < .byte 12 ; 0xc < .byte 29 ; 0x1d < .byte 30 ; 0x1e < .byte 31 ; 0x1f < .section __TEXT,__text,regular,pure_instructions < .globl __ZN3re28Compiler9PostVisitEPNS_6RegexpENS_4FragES3_PS3_i --- > .globl __ZN3re28Compiler9PostVisitEPNS_6RegexpENS_4FragES3_PS3_i ; -- Begin function _ZN3re28Compiler9PostVisitEPNS_6RegexpENS_4FragES3_PS3_i 63,71c26,34 < sub sp, sp, #192 [...] < ldr q0, [x8, lCPI1_1@PAGEOFF] < str q0, [sp] ; 16-byte Folded Spill < adrp x28, l___sancov_gen_.2@PAGE+5 < add x8, sp, #48 < ld1.2d { v1, v2 }, [x8] ; 32-byte Folded Reload --- > mov w22, #4 ; =0x4 > mov w27, #2 ; =0x2 > movi.2d v0, #0000000000000000 > mov.d x8, v0[1] > str x8, [sp] [...] Something quite fishy has happened here: we‚Äôve lost a whole bunch of data that looks a lot like some sort of vector mask. Good to know! Since we‚Äôre diagnosing a miscompile in the stage2 build of Clang, we should also grab a known-good version of the textual IR of the compiler in the meantime. This just involves running the same set of commands with the fixed (Revert \"...\") commit. In the end, we have two sets of folders full of IR files, most of which are the same: $ du -sh * 2.5G ir_dump_bad 2.5G ir_dump_good All of this will be useful later; let‚Äôs table it for now and try to avoid using someone else‚Äôs computer, since nagging someone else to recompile LLVM constantly is painful for both parties. It gets better Okay, now that we‚Äôve successfully captured at least some debugging info, let‚Äôs try this the easy way first despite knowing full-well God is laughing his ass off. This would mean compiling on X86 Windows to X86 windows and testing. Ideally, I wouldn‚Äôt need to do anything weird to get it to work. Ha, Nope. Same output in both cases. Alright, let‚Äôs try WSL2. System-V is a bit closer to AAPCS and maybe there‚Äôs some weird ABI stuff going on. # (on X86-64 via WSL) $ ./build/stage1/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum b8dd73117741b08fddb6065fb9289f861f9375b63ebab3ee67edf547ecb0c17a - $ ./build/stage2/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum b8dd73117741b08fddb6065fb9289f861f9375b63ebab3ee67edf547ecb0c17a - Nope. Maybe the STL is involved - some change between libstdc++ and libc++. $ ./build/stage2_lcxx/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum b8dd73117741b08fddb6065fb9289f861f9375b63ebab3ee67edf547ecb0c17a - Great. No taking the easy way out. Fuck it, just cross-compile the thing Alternate title: We live in a /usr/include/hell-gnueabihfelmnop of our own creation C build systems are not fun. One might go so far as to say they‚Äôre really, really, really not fun. This is true for a variety of reasons, but one painfully obvious example is cross-compilation. Here‚Äôs how you compile Clang to target AArch64 on Linux with the useful IR debug information, assuming you have an AArch64 sysroot installed and an appropriate CMake toolchain file: cmake -S llvm -B build/stage2 -DCMAKE_TOOLCHAIN_FILE=/home/user/aarch64.cmake -DLLVM_ENABLE_THREADS=OFF -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_LINKER=lld -DLLVM_HOST_TRIPLE=aarch64-linux-gnu -DLLVM_ENABLE_PROJECTS=clang -DLLVM_TARGETS_TO_BUILD=AArch64 -DCMAKE_C_COMPILER=\"$(realpath build/stage1/bin)/clang\" -DCMAKE_CXX_COMPILER=\"$(realpath build/stage1/bin)/clang++\" -DCMAKE_C_FLAGS=\"-fPIC -fuse-ld=lld --target=aarch64-linux-gnu -mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$(realpath build/stage2/ir_dump)\" -DCMAKE_CXX_FLAGS=\"-fPIC -fuse-ld=lld --target=aarch64-linux-gnu -mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$(realpath build/stage2/ir_dump)\" -DCMAKE_ASM_FLAGS=\"-fPIC --target=aarch64-linux-gnu\" -G Ninja Yes, the --target options are necessary despite the AArch64 toolchain. Yes, -fuse-ld=lld is necessary despite -DLLVM_USE_LINKER=lld. There is no reason that this should be as complicated as it is today. None. Zero. No other language pulls shit like this and gets away with it. Too much time later: $ qemu-aarch64 ./build/stage2/bin/clang --target=arm64-apple-macos -O2 repro.cc -S -o - | sha256sum cf9f89efb0549051409d2559441404b1e627c73f11e763c975be20fcd7fcda34 - Success! I think I would‚Äôve started to question my life choices if the stage2 compiler target had to be Apple-specific. To summarize: Compile clang with the commit right before the fix above Bootstrap clang with the newly-compiled clang <‚Äì AND TARGET AARCH64 Build the repro script attached with ASAN and fuzzing harnesses on when targeting AArch64 There may be some contrived way to convince the vectorizer to miscompile this on X86 by tweaking profitability heuristics but this is good enough for now. Back to bug hunting! In which approximately 29,000 lines of textual IR diffs are checked by hand and we get extremely lucky $ diff ir_dump_bad ir_dump_good > yeouch.diff $ ls -lh yeouch.diff -rw-r--r-- 1 user user 1.6M Sep 25 21:43 yeouch.diff There‚Äôs a lot going on in there. I‚Äôm going to optimistically assume that there‚Äôs nothing fishy going on in the Clang frontend, which slashes a significant portion off. After this we manually go through anything remaining, find any suspicious differences, and then check the IR dumps by hand for the function names since those aren‚Äôt in the diff itself. It would‚Äôve also been pretty easy to check if the problem was actually in clang by using -emit-llvm and checking whether the two stages emit something different. I can retroactively say here that they don‚Äôt. Eventually, close to the bottom, we find that SelectionDAG::getVectorShuffle has been messed with in some way: ; *** IR Dump After LoopVectorizePass on *ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE *** ; Function Attrs: mustprogress nounwind ssp uwtable(sync) define [2 x i64] @_ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE [...] < %306 = phi i64 [ 0, %300 ], [ %323, %305 ] < %307 = phi <16 x i64> [ <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>, %300 ], [ %324, %305 ] < %308 = phi <16 x i1> [ zeroinitializer, %300 ], [ %319, %305 ] < %309 = phi <16 x i1> [ zeroinitializer, %300 ], [ %322, %305 ] --- > %306 = phi i64 [ 0, %300 ], [ %321, %305 ] > %307 = phi <16 x i64> [ <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>, %300 ], [ %322, %305 ] > %308 = phi <16 x i1> [ <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, %300 ], [ %318, %305 ] > %309 = phi <16 x i1> [ <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, %300 ], [ %320, %305 ] [...] ‚Ä¶ Okay, but what is the SelectionDAG? On the subject of the SelectionDAG You can skip the section explaining the SelectionDAG if you know what the SelectionDAG is. LLVM IR, at this point, has been very well-documented elsewhere. The same is not true for the SelectionDAG. When lowering instructions to machine code, LLVM will by default use an intermediate representation known internally as the SelectionDAG. As the name suggests, it‚Äôs an acyclic graph-based intermediate representation designed to be useful for instruction selection. Each basic block has gets own SelectionDAG. This is not very helpful without a concrete visualization. Luckily, LLVM provides some visualization tools for us. There are a lot of different passes that the SelectionDAG goes through before being passed through the instruction selection system, but we‚Äôre going to completely ignore most of them for the sake of this explanation. Take the following code and compile it: // ./build/stage1_debug/bin/clang -mllvm -view-isel-dags -mllvm -view-dag-combine1-dags -O2 -m32 test2.c void test(int *b, long long *c) { *c = *b * 2345; } You‚Äôll notice we‚Äôre compiling for x86_32 - this is important. Note that LLVM will try to start graphviz or some other dotfile viewer. The reader may find this useful but WSL doesn‚Äôt seem to play nicely with them. Solution: apt uninstall graphviz There are three distinct DAGs that are important to demonstrate roughly what the SelectionDAG does and how. They are quite large, but hopefully don‚Äôt mess the flow of this blog post up too much. The first one we‚Äôre going to look at is what LLVM IR initially gets translated to: dotfile There are multiple things you‚Äôll notice about the SelectionDAG, but the most important takeaway is that the SelectionDAG is a dataflow graph that represents all dependencies of any given node as edges in an acyclic graph. To read the graph, consider GraphRoot the end of the block and go up. This makes intuitive sense, as we are essentially saying that the terminator instruction (a return in our case) depends on the results of the previous computations, including memory state. This is very helpful for instruction selection, as you get all valid orderings of instructions right off the bat. Memory dependencies are normally implicit in LLVM IR. There is an analysis framework that bolts on explicit memory dependency information on top of LLVM IR. It‚Äôs very useful but notably not a core part of the intermediate representation. In order for this to work, an explicit ‚Äústate‚Äù edge must be added to all nodes that in some way manipulate memory. The way the SelectionDAG represents that is through the Chain operand, labeled ch in the graphs. Dependencies between blocks are modeled as stores to virtual registers with appropriate Chain operands. Note that the chain is marked in dotted blue lines. You‚Äôll also notice that the chain is not fully sequential, meaning we can also represent non-volatile loads and stores that do not alias each other. There is another ‚Äúspecial‚Äù form of node called Glue. We are not going to be talking about Glue. You‚Äôll also notice that there‚Äôs already a target specific (X86ISD::) node in here. This is useful since it lets backends handle intrinsics or other wonky target-specific nonsense. One other notable difference compared to LLVM IR is that SelectionDAG nodes can have multiple returns. This is used, for example, so that load instructions can return both the loaded value and the new Chain. It‚Äôs also used in cases like X86‚Äôs div instruction, as div simultaneously computes the quotient and the remainder. With that being said, there‚Äôs a problem here: We‚Äôre doing 64-bit stores on a 32-bit platform! That‚Äôs not going to work. This is where the next phase of the SelectionDAG comes in: legalization. We need to turn the graph above into something that can map down to actual instructions on the hardware. Backends specify a list of legal operations, and all illegal operations are removed by the DAG ‚Äúlegalizer.‚Äù Once that‚Äôs done, we get output like this: dotfile A lot more stuff is happening in this graph, but it‚Äôs stuff that actually maps down to something in the hardware. Notably, the 64-bit store has been completely removed and replaced with two (reorderable!) 32-bit stores. TokenFactor nodes just merge separate state edges together, which is important if we have something like a store that potentially depends on two independent loads. In between these two graphs, we‚Äôve also run the DAGCombiner. This is essentially just a patently absurd amount of pattern matching, both target-independent and not. After we‚Äôve legalized the DAG and done some other transforms, we‚Äôre ready to do the initial instruction selection. This involves a bunch more stuff, including a TableGen-generated bytecode machine which I haven‚Äôt seen documented anywhere but is ridiculously cool to me, but we don‚Äôt have the space for that. Once that‚Äôs done, we get a graph that looks like this: dotfile Instruction selection (what instructions) now stops and instruction scheduling (where do they go) begins. From here, we use one of multiple different schedulers to map the SelectionDAG down to sequential code. That pretty much sums it up! Much of the target-dependent optimization, legalization, and other logic is queried through the inherited TargetLowering classes, which are generally implemented in the *ILselLowering.cpp files. Fun fact: X86IselLowering.cpp is big enough that GitHub refuses to render it. There is a very low-level explanation of the SelectionDAG on the LLVM website if you‚Äôre curious about more implementation specifics. GlobalIsel eta 2045 every day I‚Äôm shufflin‚Äô After some cranial percussive maintenance analysis of the LLVM IR, we find that one specific location has changed: SelectionDAG::getVectorShuffle SDValue SelectionDAG::getVectorShuffle(EVT VT, const SDLoc &dl, SDValue N1, SDValue N2, ArrayRef<int> Mask) { // [...] // !!! THIS CODE CHANGED SOMEHOW !!! bool Identity = true, AllSame = true; for (int i = 0; i != NElts; ++i) { if (MaskVec[i] >= 0 && MaskVec[i] != i) Identity = false; if (MaskVec[i] != MaskVec[0]) AllSame = false; } if (Identity && NElts) return N1; // [...] } Note that at this point we‚Äôre not quite sure what the behavioral differences are here; I am not quite ready to read through dozens of lines of vectorized IR to figure out exactly what went wrong here. That doesn‚Äôt really matter, though; alarm bells are already going off in my head since the check in the resulting condition (Identity) is short-circuiting emission of a vector shuffle, which would generate data blobs like those removed completely in the miscompiled assembly. In addition, the code that was changed looks suspiciously like the reproducer in the GitHub issue, which also erroneously returns true. This is a neat coincidence ‚Äì the original bug is in the loop vectorizer and seems to manifest itself as an entirely separate issue in vectorized code generated in a constructor for vector shuffles. yo dawg Let‚Äôs make sure we‚Äôre not jumping to conclusions first, though. Actually Doing the Thing Remember that cross-compilation nightmare? We‚Äôre not done yet! After building Clang once and testing some minor changes to SelectionDAG.cpp I realized that, to my horror, CMake marked the entire cross-compile build as stale and started the whole thing from scratch. This happened with both the default and Ninja generators. Turns out there‚Äôs a bug.. somewhere, that causes includes to constantly be marked as dirty under certain scenarios when using clang. Cool. tl;dr - sudo ln -s /usr/include /include Now that we‚Äôre not rebuilding the entirety of clang every time, it‚Äôs pretty easy to test whether our earlier hypothesis was correct. We can get rid of vectorization for this loop see whether anything changes: - for (int i = 0; i != NElts; ++i) + for (volatile int i = 0; i != NElts; ++i) $ qemu-aarch64 ./build/stage2/bin/clang --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum b8dd73117741b08fddb6065fb9289f861f9375b63ebab3ee67edf547ecb0c17a - Great! Bug gone, which confirms exactly what‚Äôs being miscompiled in the compiler. Less debug info We‚Äôre generating way too much textual IR every time we compile. Let‚Äôs use -filter-print-funcs, another useful debugging flag, to fix that: -mllvm -filter-print-funcs=_ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE Definitely a mouthful, but helpful nonetheless. While we‚Äôre at it, we should enable lld as well for full end-to-end testing. For those keeping track, our CMake configure script now looks roughly like this: cmake -S llvm -B build/stage2 -DCMAKE_TOOLCHAIN_FILE=/home/user/aarch64.cmake -DLLVM_ENABLE_THREADS=OFF -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_LINKER=lld -DLLVM_HOST_TRIPLE=aarch64-linux-gnu -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_TARGETS_TO_BUILD=AArch64 -DCMAKE_C_COMPILER=\"$(realpath build/stage1/bin)/clang\" -DCMAKE_CXX_COMPILER=\"$(realpath build/stage1/bin)/clang++\" -DCMAKE_C_FLAGS=\"-fPIC -fuse-ld=lld --target=aarch64-linux-gnu -mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$(realpath build/stage2/ir_dump) -mllvm -filter-print-funcs=_ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE\" -DCMAKE_CXX_FLAGS=\"-fPIC -fuse-ld=lld --target=aarch64-linux-gnu -mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$(realpath build/stage2/ir_dump) -mllvm -filter-print-funcs=_ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE\" -DCMAKE_ASM_FLAGS=\"-fPIC --target=aarch64-linux-gnu\" -G Ninja Side-note: brute-force testing only works for code, not command-line options I‚Äôd like to take a moment to point out that -filter-print-funcs did not actually work when combined with -ir-dump-directory until I was diagnosing this miscompile and submitted the only useful contribution of this [TOO LONG] word blog post. When I say that you will be fine if you use the flags that everyone else does, this is what I mean. These options work fine on their own, when combined they caused an extremely trivial crash, and that‚Äôs a normal Tuesday afternoon because nobody had ever bothered to try and do that. More debug info Let‚Äôs use the world‚Äôs best form of debugging to get some useful info about what‚Äôs going on here. + printf(\"identity: %d, nelts: %d\n\", (int)Identity, NElts); # Bad run: identity: 1, nelts: 20 identity: 0, nelts: 16 identity: 1, nelts: 16 identity: 1, nelts: 20 identity: 0, nelts: 16 identity: 1, nelts: 16 identity: 0, nelts: 16 # Good run: identity: 0, nelts: 20 identity: 0, nelts: 16 identity: 0, nelts: 16 identity: 0, nelts: 16 identity: 1, nelts: 16 identity: 0, nelts: 20 identity: 0, nelts: 16 identity: 0, nelts: 16 identity: 0, nelts: 16 identity: 1, nelts: 16 identity: 0, nelts: 16 All we‚Äôve done here is add volatile and we‚Äôre even getting changes in how often the function is being called. The good news is that this confirms our hypothesis that Identity is erroneously being set to true in certain cases. The fact that these cases involve the number of vector elements being 20 is also important for later, but we‚Äôll get to that. Let‚Äôs go ahead and also print out all the elements of the vector: + for (int i = 0; i != NElts; ++i) + printf(\"[%08X] \", MaskVec[i]); As a reminder, the Identity boolean is set to true if all elements of the vector are either less than zero or equal to their indices in the vector itself. For example, [0, 1, -1, 3] would return true and [0, 0, 0, 0] would return false. $ qemu-aarch64 ./build/stage2/bin/clang --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [00000000] [00000001] [00000002] [00000003] [00000004] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] -> identity: 1, nelts: 20 [...] Now, I‚Äôm not exactly a mathematician‚Ä¶ Reproducing the vectorizer oopsie We require a reasonably-representative reliable reproducer to avoid regular recompilation of clang. After a bit of tinkering with the runtime data we have, here‚Äôs a small piece of code that demonstrates the issue: Reproducer #include <cstdio> int testarr[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16 // index 16 (17th element!) }; void do_the_thing(int *mask_vec, int n_elts) { asm volatile(\"\":\"+r\"(mask_vec),\"+r\"(n_elts)); // optimization barrier for good luck bool identity = true; for (int i = 0; i != n_elts; ++i) { if (mask_vec[i] != i) identity = false; } printf(\"identity: %d, nelts: %d\n\", (int)identity, n_elts); } int main() { do_the_thing(testarr, sizeof(testarr) / sizeof(testarr[0])); } $ ./build/stage1/bin/clang --target=aarch64-linux-gnu -O2 test.cpp -fuse-ld=lld -o test.out $ qemu-aarch64 test.out identity: 1, nelts: 17 Nifty. What‚Äôs going on internally, though? We can view the CFG of the output LLVM IR using the opt tool to find out. Rembember how I said I was not ready to read through dozens of lines of vectorized IR? Well, so, uh, ./build/stage1/bin/clang --target=aarch64-linux-gnu -O2 test.cpp -fuse-ld=lld -emit-llvm -S -o test.ll ./build/stage1/bin/opt -passes=-view-cfg test.ll The original dotfile is here. A rendered version is located here for your viewing displeasure. It‚Äôs big enough that I‚Äôd rather not embed it in-line, so you should open it in a second window somewhere to follow along. If you squint hard enough, you‚Äôll notice a 16-wide vector loop, an 8-wide vector loop, and a scalar loop. Really quickly, let‚Äôs take a look at some of the trickery that‚Äôs happened already. Here‚Äôs an annotated and shortened version of the 16-wide vector loop: loop_block: %bool_phi = phi <16 x i1> [ zeroinitializer, %entry ], [ %bool_vec, %loop_block ] %idx_list = phi <16 x i32> [ ... ] %current_block_ptr = getelementptr inbounds ... %current_block = load <16 x i32>, ptr %current_block_ptr %cmp_result = icmp ne <16 x i32> %idx_list, %loaded_values %bool_vec = or <16 x i1> %bool_phi, %cmp_result s/‚Äùshortened version of‚Äù/‚Äùdeliberate lie about what‚Äôs in‚Äù/ If you‚Äôre paying really close attention, you‚Äôll notice that the meaning of cmp_result has actually been inverted compared to identity! Now any element of bool_vec being true would mean that identity is false, rather than requiring all elements of bool_vec to be true in order for identity to be true. I hope that made sense. This inversion means it‚Äôs possible to use a simple comparison against zero to check whether our condition was satisfied, rather than needing to load -1 in various places afterwards. Neat, huh? The phi node results of the 16-wide vector loop are, depending on whether we want to execute the 8-wide vector loop or not, are‚Äì Wait a minute. COMPUTER, ENHANCE! 27: ; preds = %14 %28 = bitcast <16 x i1> %23 to i16 %29 = icmp eq i16 %28, 0 %30 = icmp eq i64 %13, %8 br i1 %30, label %64, label %31 31: ; preds = %27 %32 = and i64 %8, 8 %33 = icmp eq i64 %32, 0 br i1 %33, label %61, label %34 61: ; preds = %7, %31, %57 %62 = phi i64 [ 0, %7 ], [ %13, %31 ], [ %38, %57 ] %63 = phi i1 [ true, %7 ], [ true, %31 ], [ %59, %57 ] br label %70 Let‚Äôs annotate this a bit. Block %27 is executed immediately after %14 (the 16-wide loop) is done, %57 is executed immediately after the 8-wide loop, %13 is the current loop iteration index (i.e. how many iterations of the original operation the 16-wide loop has completed), and %8 is the required total iteration count. ; Executed immediately after 16-wide vector loop 27: ; preds = %14 ; %29 is set to whether 0 if all vector elements are false; i.e. the check in the vector loop always fails. Not shown: the vectorizer has inverted our condition from equality to inequality. %28 = bitcast <16 x i1> %23 to i16 %29 = icmp eq i16 %28, 0 ; Check whether we've iterated through the entire loop %30 = icmp eq i64 %big_loop_trip_count, %req_trip_count br i1 %30, label %64, label %31 ; We have not, check whether we should execute 8-wide vector loop 31: ; preds = %27 %32 = and i64 %req_trip_count, 8 %33 = icmp eq i64 %32, 0 br i1 %33, label %61, label %34 ; Do not want to execute 8-wide loop 61: ; preds = %7, %31, %57 ; Iteration count after vectorized loops %62 = phi i64 [ 0, %7 ], [ %big_loop_trip_count, %31 ], [ %38, %57 ] ; PHI node representing current status of `identity`. Always `true` after the entry block, `true` after block `%31`, dependent on `%59` after block `%57` (8-wide loop). %63 = phi i1 [ true, %7 ], [ true, %31 ], [ %59, %57 ] br label %70 true after block %31? That‚Äôs not good. It seems like, if the second vector loop is not executed and we go to the scalar loop, the results of the first vector loop are just.. ignored! We can test this out pretty easily: int testarr[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, - 16 + 16, 17, 18, 19, 20, 21, 22, 23 }; $ qemu-aarch64 test.out identity: 0, nelts: 24 Then let‚Äôs try deliberately executing the scalar loop and the second vector loop: int testarr[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, - 16 + 16, 17, 18, 19, 20, 21, 22, 23, 24 }; $ qemu-aarch64 test.out identity: 0, nelts: 25 Great! Or, well, not great, but we‚Äôve successfully narrowed down the root cause of the stage2 bug. To be clear, to trigger this bug the vectorizer has to generate a very specific type of operation at compile time and at runtime we have to have somewhere between 17 and 23 total iterations done. Fun. ‚Ä¶ How are these vectors generated, anyway? What would generate a twenty-element vector? Let‚Äôs take a look at the original reproducer and try to find anything useful in the LLVM IR: $ qemu-aarch64 ./build/stage2/bin/clang --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -emit-llvm -o - | grep \"20 x \" $ Okay, so this has to be something done after all of the IR passes then. Fantastic. Let‚Äôs just print out everything with -debug and- $ ./build/stage1/bin/clang --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address -S repro.cc -mllvm -debug clang (LLVM option parsing): Unknown command line argument '-debug'. Try: 'clang (LLVM option parsing) --help' Oh. Right. We didn‚Äôt compile Clang in debug mode. Time to kick off yet another from-scratch LLVM build. sigh [more than one minute later] $ ./build/stage1_debug/bin/clang --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address -S repro.cc -mllvm -debug [...] Creating new node: t76: v20i8 = concat_vectors t74, undef:v5i8, undef:v5i8, undef:v5i8 I‚Äôm not even going to question why or how a vector with five elements is being generated for now - what‚Äôs important is that the 20-element vector is being created during instruction selection. The <5 x i8> vectors exist before instruction selection in the form of operands to vector shuffles, which is good: ;./build/stage1/bin/clang --target=aarch64-linux-gnu -O2 repro.cc -fsanitize=fuzzer-no-link -fsanitize=address -emit-llvm -S -o - ; ... %133 = bitcast i40 %ref.tmp.sroa.4.0.extract.trunc to <5 x i8> %retval.sroa.0.8.vec.expand62 = shufflevector <5 x i8> %133, <5 x i8> poison, ... ; ... The fact that these vectors are in the IR emitted by -emit-llvm means we can assume they‚Äôll be passed directly to the initial SelectionDAG builder, so we should take a look at that now. well, not always :( Passes after -emit-llvm but before instruction selection can absolutely trash your code if you‚Äôre not careful. Here‚Äôs something absolutely diabolical - the summary is that the WinEHPrepare pass will detect blocks with specific types of malformed call instructions AND COMPLETELY NUKE THE BASIC BLOCK. No less than three people (the author of that issue, a friend of mine, and I) have run into this to-date. If you develop for LLVM and there is ONE thing you take away from this post, it should be to be careful about inserting calls when funclet pads are involved!!! Under complex macroarchitectural conditions‚Ä¶ Let‚Äôs take a look at SelectionDAGBuilder::visitShuffleVector: SelectionDAGBuilder::visitShuffleVector void SelectionDAGBuilder::visitShuffleVector(const User &I) { // ... // Normalize the shuffle vector since mask and vector length don't match. if (SrcNumElts < MaskNumElts) { // ... unsigned PaddedMaskNumElts = alignTo(MaskNumElts, SrcNumElts); unsigned NumConcat = PaddedMaskNumElts / SrcNumElts; // Pad both vectors with undefs to make them the same length as the mask. SDValue UndefVal = DAG.getUNDEF(SrcVT); SmallVector<SDValue, 8> MOps1(NumConcat, UndefVal); SmallVector<SDValue, 8> MOps2(NumConcat, UndefVal); MOps1[0] = Src1; MOps2[0] = Src2; Src1 = DAG.getNode(ISD::CONCAT_VECTORS, DL, PaddedVT, MOps1); Src2 = DAG.getNode(ISD::CONCAT_VECTORS, DL, PaddedVT, MOps2); // Readjust mask for new input vector length. SmallVector<int, 8> MappedOps(PaddedMaskNumElts, -1); // ... SDValue Result = DAG.getVectorShuffle(PaddedVT, DL, Src1, Src2, MappedOps); // ... } As a reminder, our source vector size is 5 and our mask vector size is 16. The SelectionDAG builder wants to normalize the source and mask vectors, such that: The resulting output mask is a multiple of the number of elements in the source vector. Not quite sure why. All vectors passed to getVectorShuffle are the same size as the mask. This means that we get undef-padded 20-element vectors and multiple -1s at the end of the mask. Those -1s then get passed to getVectorShuffle, which then causes the miscompile as mentioned before. Neat. Time to look a little at how that 5-element vector was generated. Looking for <5 x i8> in the debug logs tell us a bit more about what‚Äôs going on here: rewriting [8,13) slice #8 Begin:(8, 13) NewBegin:(8, 13) NewAllocaBegin:(0, 16) original: store i40 %f1.sroa.5.0.extract.trunc.peel, ptr %9, align 8 shuffle: %retval.sroa.0.8.vec.expand = shufflevector <5 x i8> %10, ... blend: %retval.sroa.0.8.vecblend = select <16 x i1> ... SROA is a pass designed to optimize away (‚Äúpromote‚Äù) alloca instructions and turn the values they reference directly into SSA registers. We can see SROA turning a store of a 40-bit integer(????) into a mess of shuffles. I‚Äôm not going to go through this bit line-by-line as, frankly, there isn‚Äôt anything particularly unique about how this part of the bug manifests itself. There are plenty of other ways in which weird-length vectors are generated - <20 x i8> and <5 x i8> show up a bunch of times in the test-cases. Here‚Äôs a great overview of some of the passes in the LLVM mid-end optimization pipeline. As an expedited summary, SROA runs, then a bunch of passes run, then SROA runs again and turns some stores into those i40 stores, then some other passes run, then SROA runs again and turns those stores into 5-element vector shuffles as seen above. Going through exactly why this happens would involve sifting through a bunch of implementation details with nothing much to say other than ‚Äúthis is what it does.‚Äù I don‚Äôt find that particularly engaging when nothing else is involved, and this post is long enough as-is. The code works as intended. The fact of the matter is that all modern-day compiler bugs have root cause chains this deep - one pass happens to generate some code which happens to cause another pass to generate some other code, and so on and so forth. If you‚Äôd like, you can see the full diff here. Conclusion It‚Äôs entirely unnecessary for compiler engineers to go into this amount of detail about why something went wrong from start to finish. All that‚Äôs needed is what was given at the very start: Correct IR, buggy IR. Fix bug, add test-case, done. The underlying root cause of this bug was fixed a while ago ‚Äì it‚Äôs very unlikely that anyone was ever concretely impacted by it outside of a few hours of type 2 fun. With that being said, this silly bug will probably hold a special place in my heart for a while. The potential for a buggy bootstrapped compiler has always existed. In practice, however, it‚Äôs incredibly rare, and I didn‚Äôt think I‚Äôd ever actually see a real-world example. I hope whoever read to the end learned something. It‚Äôs a fantastic example of how things can go wrong in ridiculous, unexpected ways when so many moving parts are involved. I love shit like this.",
    "Confidence": 0.99254715
  },
  {
    "Title": "The force is strong in LLMs - building an open source Star Wars inspired copilot in .NET",
    "Url": "https://youtube.com/watch?v=orYbN8990dA",
    "Timestamp": "2024-11-15T22:01:29",
    "Domain": "youtube.com",
    "Description": "In the Star Wars universe, many pilots have an astromech copilot. Luke had R2-D2 in the back of his X-Wing for example. As developers, we too have copilots. Although these are not as cool as R2, and don‚Äôt help us blow up the Death Star, they do help us with our day to day tasks like writing code.\n\nWhilst copilots can be boring, Jim thought it would be fun to create one inspired by Star Wars to help him with important tasks, such as describing his Lego collection (Star Wars Lego of course), and helping him write code, all done in the style of a Jedi.\n\nIn this session, Jim will walk you through the steps to build your own copilot, using the Pieces .NET SDK. By leveraging this SDK, your copilot can not only access an LLM of your choice from a range of cloud and on-device models such as Microsoft Phi and OpenAI GPT-4o, but you can also add assets to your chat‚Äôs context, such as code, documents, and plans for the Death Star. And just like a Jedi can sense the living force, this copilot can sense your presence and answer questions without needing additional documentation, such as summarizing your research on Wookiepedia. And best of all, reply like Yoda, it can!\n\nBy the end of this session, you will be able to complete your apprenticeship and build your own open source AI copilot.\n\nFeaturing: Jim Bennett\n\nConnect with .NET: \nBlog:  https://aka.ms/dotnet/blog\nTwitter: https://aka.ms/dotnet/twitter\nTikTok:  https://aka.ms/dotnet/tiktok\nMastodon:  https://aka.ms/dotnet/mastodon\nLinkedIn:  https://aka.ms/dotnet/linkedin\nFacebook:  https://aka.ms/dotnet/facebook\nDocs: https://learn.microsoft.com/dotnet\nForums: https://aka.ms/dotnet/forums\nüôã‚Äç‚ôÄÔ∏èQ&A: https://aka.ms/dotnet-qa\nüë®‚ÄçüéìMicrosoft Learn: https://aka.ms/learndotnet\n\n#dotnet",
    "Confidence": 0.9933353
  },
  {
    "Title": "The Day Has Finally Come: Junior Devs Only Know ChatGPT!",
    "Url": "https://youtube.com/watch?v=-Y5NwCwAT2o",
    "Timestamp": "2024-11-15T20:01:44",
    "Domain": "youtube.com",
    "Description": "We knew this day was coming. They warned us. There was nothing we could do.\n\nJunior developers are joining the job market and they can't code! They can only speak to LLMs!\n\n... Or is that really true?\n\nLet's jump over to this Reddit thread and see how a software engineer is perceiving this as junior developers join their team!\n\n----\nüîë Membership & Subscriptions:\n- üì® Weekly Newsletter: https://weekly.devleader.ca\n- üèòÔ∏è Private Discord Community: https://sidestack.io/devleader\n\nüß† Courses:\n- All Courses: https://www.devleader.ca/courses\n- Get Promoted As A Software Engineer: https://dometrain.com/course/career-getting-promoted-as-a-software-engineer/?ref=nick-cosentino\n- Nailing The Behavioral Interview: https://dometrain.com/course/career-nailing-the-behavioral-interview/?ref=nick-cosentino\n- Getting Started with C#: https://dometrain.com/course/getting-started-csharp?ref=nick-cosentino\n- Deep dive C#: https://dometrain.com/course/deep-dive-csharp?ref=nick-cosentino\n- C# Zero to Hero BUNDLE: https://dometrain.com/bundle/from-zero-to-hero-csharp/?ref=nick-cosentino\n- Reflection in .NET: https://dometrain.com/course/from-zero-to-hero-reflection-in-dotnet/?ref=nick-cosentino\n- Refactoring For C# Devs: https://dometrain.com/course/from-zero-to-hero-refactoring-for-csharp-developers?ref=nick-cosentino\n- [FREE] Intro to Software Development: https://www.youtube.com/playlist?list=PLzATctVhnsggb3lj53T8fJSK6LJQFUyKS\n\nüó£Ô∏è Social Media & Links:\n- All My Links: https://linktr.ee/devleader\n- Vlogs:  @DevLeaderBTS @CodeCommute \n- Blog: https://www.devleader.ca/\n- TikTok: https://www.tiktok.com/@devleader\n- LinkedIn: https://www.linkedin.com/in/nickcosentino\n- Threads: https://threads.net/@dev.leader\n- Twitter: https://twitter.com/DevLeaderCa\n- Facebook: https://www.facebook.com/DevLeaderCa\n- Instagram: https://www.instagram.com/dev.leader\n- GitHub: https://github.com/ncosentino/\n- Twitch: https://twitch.tv/devleaderca\n- YouTube: https://youtube.com/@DevLeader?sub_confirmation=1\n\n‚ù§Ô∏è Affiliations & Products/Services That I Love:\n- @BrandGhostAI for all of my content creation: https://brandghost.ai\n- AI shorts helper Opus Clip: https://opus.pro/?via=2f9e97\n- VPS hosting from RackNerd: https://my.racknerd.com/aff.php?aff=9013\n- VPS hosting from Contabo: https://www.jdoqocy.com/click-101028632-12454592\n- Newsletter platform ConvertKit: https://convertkit.com/?lmref=c5X7KQ\n- Newsletter referral system SparkLoop: https://dash.sparkloop.app/signup?aff=9fe76c8b\n----\n\n#softwareengineering #softwaredeveloper #softwareengineer",
    "Confidence": 0.9947039
  },
  {
    "Title": "How we chose the right UI framework for DevToys",
    "Url": "https://youtube.com/watch?v=W1DFK0wawwM",
    "Timestamp": "2024-11-15T20:01:44",
    "Domain": "youtube.com",
    "Description": "Choosing the right UI framework in .NET can be daunting with options like .NET MAUI, Uno Platform, Blazor Hybrid, and many more. Each framework offers unique strengths; the optimal choice depends on your project goals. We'll use https://devtoys.app as a case study to explore these frameworks.\n\nFeaturing: Etienne Baudoux\n\nConnect with .NET: \nBlog:  https://aka.ms/dotnet/blog\nTwitter: https://aka.ms/dotnet/twitter\nTikTok:  https://aka.ms/dotnet/tiktok\nMastodon:  https://aka.ms/dotnet/mastodon\nLinkedIn:  https://aka.ms/dotnet/linkedin\nFacebook:  https://aka.ms/dotnet/facebook\nDocs: https://learn.microsoft.com/dotnet\nForums: https://aka.ms/dotnet/forums\nüôã‚Äç‚ôÄÔ∏èQ&A: https://aka.ms/dotnet-qa\nüë®‚ÄçüéìMicrosoft Learn: https://aka.ms/learndotnet\n\n#dotnet",
    "Confidence": 0.994381
  },
  {
    "Title": "Deep dive on native AOT",
    "Url": "https://youtube.com/watch?v=Gmn-4mVSjq4",
    "Timestamp": "2024-11-15T19:01:29",
    "Domain": "youtube.com",
    "Description": "Native AOT has been part of .NET since .NET 7. With each release we're extending the areas where it can be used. From console apps in .NET 7, through ASP.NET web APIs in .NET 8, to MAUI in .NET 9. It is your best bet if you need your .NET app to start fast and use as little memory as possible.\n\nBut how does native AOT actually work? Why does it start so fast? How can we fit an entire .NET runtime, the base class libraries, and your code in a 1 MB executable file?\n\nIn this talk we'll peek into the internal workings of native AOT compilation and look at what it does at run time.\n\nFeaturing: Michal Strehovsk√Ω\n\nConnect with .NET: \nBlog:  https://aka.ms/dotnet/blog\nTwitter: https://aka.ms/dotnet/twitter\nTikTok:  https://aka.ms/dotnet/tiktok\nMastodon:  https://aka.ms/dotnet/mastodon\nLinkedIn:  https://aka.ms/dotnet/linkedin\nFacebook:  https://aka.ms/dotnet/facebook\nDocs: https://learn.microsoft.com/dotnet\nForums: https://aka.ms/dotnet/forums\nüôã‚Äç‚ôÄÔ∏èQ&A: https://aka.ms/dotnet-qa\nüë®‚ÄçüéìMicrosoft Learn: https://aka.ms/learndotnet\n\n#dotnet #dotnetconf #dotnet9",
    "Confidence": 0.9994897
  },
  {
    "Title": "The Future of Orion",
    "Url": "https://xkcd.com/3012/",
    "Timestamp": "2024-11-15T18:01:38",
    "Domain": "xkcd.com",
    "Description": "",
    "Confidence": 0.98151064
  },
  {
    "Title": "1,000,000 Views! | Jesse Liberty",
    "Url": "https://jesseliberty.com/2024/11/15/1000000-views/",
    "Timestamp": "2024-11-15T14:01:48",
    "Domain": "jesseliberty.com",
    "Description": "jesseliberty.com just crossed 1MM views (lifetime). So pleased you‚Äôve stuck with me. See find me in menu to continue the dialog.",
    "Confidence": 0.9073951
  },
  {
    "Title": "YARP vs Ocelot Comparison - Which API Gateway Should You Choose?",
    "Url": "https://youtube.com/watch?v=2_hjz-325Fg",
    "Timestamp": "2024-11-15T14:01:45",
    "Domain": "youtube.com",
    "Description": "Want to master Clean Architecture? Go here: https://bit.ly/3PupkOJ\nWant to unlock Modular Monoliths? Go here: https://bit.ly/3SXlzSt\nJoin a community of 1000+ .NET developers: https://www.patreon.com/milanjovanovic\n\nEver wondered which API Gateway to use in your .NET projects? Today, we're putting YARP and Ocelot head-to-head to see how they stack up. I'll show you what makes each one special, where they shine, and yes - even where they struggle a bit. We'll look at real examples, talk about performance (with some surprising findings!), and break down when you might want to use one over the other. No fancy jargon or marketing speak - just practical insights to help you pick the right tool for your project. Whether you're just getting started with API gateways or thinking about switching between these two, this video will help clear things up. Let's dive in and figure out which gateway might be your next best friend!\n\nCheck out my courses:\nhttps://www.milanjovanovic.tech/courses\n\nRead my Blog here:\nhttps://www.milanjovanovic.tech/blog\n\nJoin my weekly .NET newsletter:\nhttps://www.milanjovanovic.tech\n\nChapters\n0:00 Intro, Documentation\n2:17 Reverse proxying (API Gateway)\n12:08 Load balancing\n14:05 Rate limiting\n16:46 Authentication and Authorization\n18:47 Performance benchmarking\n21:31 Available features\n22:56 YARP vs Ocelot",
    "Confidence": 0.9941286
  },
  {
    "Title": "MVVM Building Blocks for WinUI and WPF Development",
    "Url": "https://youtube.com/watch?v=83UVWrfYreU",
    "Timestamp": "2024-11-15T12:01:38",
    "Domain": "youtube.com",
    "Description": "Embark with us on a hands-on journey to acquire the foundational elements of modern Windows app development. We'll show you how XAML, Data Binding, and MVVM come together to empower your development process, increase agility, and simplify your codebase!\n\nYou'll end up with the essential skills to start crafting applications with WinUI or WPF and empower yourself to create robust, scalable, and maintainable Windows applications.\n\nFeaturing: Michael Hawker, Sergio Pedri\n\nConnect with .NET: \nBlog:  https://aka.ms/dotnet/blog\nTwitter: https://aka.ms/dotnet/twitter\nTikTok:  https://aka.ms/dotnet/tiktok\nMastodon:  https://aka.ms/dotnet/mastodon\nLinkedIn:  https://aka.ms/dotnet/linkedin\nFacebook:  https://aka.ms/dotnet/facebook\nDocs: https://learn.microsoft.com/dotnet\nForums: https://aka.ms/dotnet/forums\nüôã‚Äç‚ôÄÔ∏èQ&A: https://aka.ms/dotnet-qa\nüë®‚ÄçüéìMicrosoft Learn: https://aka.ms/learndotnet\n\n#dotnet",
    "Confidence": 0.9981342
  },
  {
    "Title": "Europeans Spend 575 Million Hours Clicking Cookie Banners Every Year",
    "Url": "https://legiscope.com/blog/hidden-productivity-drain-cookie-banners.html",
    "Timestamp": "2024-11-15T11:01:26",
    "Domain": "legiscope.com",
    "Description": "Description de l'article en fran√ßais.",
    "Confidence": 0.96377975
  },
  {
    "Title": "Red Hat to Contribute Comprehensive Container Tools Collection to Cloud Native Computing Foundation",
    "Url": "https://www.redhat.com/en/blog/red-hat-contribute-comprehensive-container-tools-collection-cloud-native-computing-foundation",
    "Timestamp": "2024-11-15T10:01:48",
    "Domain": "www.redhat.com",
    "Description": "Red Hat to contribute comprehensive container Tools Collection to Cloud Native Computing Foundation",
    "Confidence": 0.99706495
  },
  {
    "Title": "AMA with .NET Aspire folks - Join David, Damian, and Maddy on Weds",
    "Url": "https://old.reddit.com/r/dotnet/comments/1gpwwii/ama_with_net_aspire_folks_join_david_damian_and/",
    "Timestamp": "2024-11-15T08:13:29",
    "Domain": "old.reddit.com",
    "Description": "Hey everyone, [Maddy from the Aspire team](http://maddymontaquila.bsky.social) here üëãüèª Hope you're all enjoying dotnetconf so far! We...",
    "Confidence": 0.9316749
  },
  {
    "Title": "WebStorm and Rider Are Now Free for Non-Commercial Use | The JetBrains Blog",
    "Url": "https://blog.jetbrains.com/blog/2024/10/24/webstorm-and-rider-are-now-free-for-non-commercial-use/",
    "Timestamp": "2024-11-15T08:13:28",
    "Domain": "blog.jetbrains.com",
    "Description": "WebStorm and Rider, JetBrains IDEs, are now free for non-commercial use! Learn more in the blog post.",
    "Confidence": 0.99530494
  },
  {
    "Title": "Introducing the .NET Aspire Community Toolkit - .NET Blog",
    "Url": "https://devblogs.microsoft.com/dotnet/introducing-the-dotnet-aspire-community-toolkit/",
    "Timestamp": "2024-11-15T08:13:27",
    "Domain": "devblogs.microsoft.com",
    "Description": "Learn about the .NET Aspire Community Toolkit, a collection of tools and libraries that help you build with .NET Aspire.",
    "Confidence": 0.9995221
  },
  {
    "Title": "GitHub - BAndysc/AvaloniaVisualBasic6: A recreation of the classic Visual Basic 6 IDE and language in C# with Avalonia",
    "Url": "https://github.com/BAndysc/AvaloniaVisualBasic6",
    "Timestamp": "2024-11-15T08:01:36",
    "Domain": "github.com",
    "Description": "A recreation of the classic Visual Basic 6 IDE and language in C# with Avalonia - BAndysc/AvaloniaVisualBasic6",
    "Confidence": 0.99848354
  },
  {
    "Title": "Something weird is happening with LLMs and chess",
    "Url": "https://dynomight.substack.com/p/chess",
    "Timestamp": "2024-11-15T08:01:36",
    "Domain": "dynomight.substack.com",
    "Description": "Are they good or bad?",
    "Confidence": 0.9832439
  },
  {
    "Title": "C#'s Best features you might not be using",
    "Url": "https://youtube.com/watch?v=yuXw7oj0Bg0",
    "Timestamp": "2024-11-15T03:01:30",
    "Domain": "youtube.com",
    "Description": "Take a look at some great C# features that can make your code more resilient and easier to understand. This talk will help you improve the code your team writes right away because all of these features are available in C# 12, with many available in lower versions. You'll leave knowing not only what makes better code but why.\n\nConnect with .NET: \nBlog:  https://aka.ms/dotnet/blog\nTwitter: https://aka.ms/dotnet/twitter\nTikTok:  https://aka.ms/dotnet/tiktok\nMastodon:  https://aka.ms/dotnet/mastodon\nLinkedIn:  https://aka.ms/dotnet/linkedin\nFacebook:  https://aka.ms/dotnet/facebook\nDocs: https://learn.microsoft.com/dotnet\nForums: https://aka.ms/dotnet/forums\nüôã‚Äç‚ôÄÔ∏èQ&A: https://aka.ms/dotnet-qa\nüë®‚ÄçüéìMicrosoft Learn: https://aka.ms/learndotnet\n\n#dotnet",
    "Confidence": 0.9979972
  },
  {
    "Title": "Blazor Web App: Authentication Redirect URI is not HTTPS",
    "Url": "https://jaliyaudagedara.blogspot.com/2024/11/blazor-web-app-authentication-redirect.html",
    "Timestamp": "2024-11-15T01:01:34",
    "Domain": "jaliyaudagedara.blogspot.com",
    "Description": ".NET, ASP.NET Core, Visual Studio, Azure, Jaliya Udagedara",
    "Confidence": 0.99314046
  }
]