[
  {
    "Title": "iOS Debugging on Windows - Hot Restart - Nick's .NET Travels",
    "Url": "https://nicksnettravels.builttoroam.com/hot-restart/",
    "Timestamp": "2023-09-10T06:02:31",
    "Domain": "nicksnettravels.builttoroam.com",
    "Description": "In my previous post I covered using VS Code and Remote-SSH to provide a more stable version of remote debugging for iOS development. But why do we need a Mac at all? In this post we’re going to look at Hot Restart, a feature re-released by the Uno Platform in 4.10, that allows you to ... Read more",
    "Confidence": 0.9984509
  },
  {
    "Title": "Best Practices for Resource and Environment Names in Azure",
    "Url": "https://luismts.com/best-practices-for-resource-names-in-azure/",
    "Timestamp": "2023-09-10T01:04:25",
    "Domain": "luismts.com",
    "Description": "Learn best practices for naming resource groups, container applications, and environments in Azure.",
    "Confidence": 0.99108857
  },
  {
    "Title": "Do Women Really Have Fewer Sex Partners Than Men? - TLG",
    "Url": "https://threwthelookingglass.com/average-number-of-sexual-partners-men-women/",
    "Timestamp": "2023-09-09T23:03:04",
    "Domain": "threwthelookingglass.com",
    "Description": "Do men really have more sexual partners than women? Find out the truth and the reason why we always think so!",
    "Confidence": 0.78978264
  },
  {
    "Title": "How big is a kilobyte?",
    "Url": "https://evanhahn.com/how-big-is-a-kilobyte/",
    "Timestamp": "2023-09-09T23:02:59",
    "Domain": "evanhahn.com",
    "Description": "1000 bytes, or 1024? There's no agreement.",
    "Confidence": 0.8973344
  },
  {
    "Title": "Rails Middleware: (Almost) Everything You Need to Know",
    "Url": "https://www.akshaykhot.com/rails-middleware-what-why-and-how/",
    "Timestamp": "2023-09-09T23:02:58",
    "Domain": "www.akshaykhot.com",
    "Description": "In this post, we'll learn almost everything about Rails middleware: what it is, why we need it, how it works, and why it's so important. We'll also learn how to create and test custom middleware in a Rails app. Finally, we'll extract logging functionality in its own middleware in a simple web app.",
    "Confidence": 0.9945858
  },
  {
    "Title": "Sorry, Maildir, I am breaking up with you",
    "Url": "https://bitfehler.srht.site/posts/2023-09-07_sorry--maildir--i-am-breaking-up-with-you.html",
    "Timestamp": "2023-09-09T23:02:58",
    "Domain": "bitfehler.srht.site",
    "Description": "It's not you, it's me. But let me start at the beginning...",
    "Confidence": 0.99275327
  },
  {
    "Title": "How I would build a new startup if I had to do it all over",
    "Url": "https://justinjackson.ca/build-new-startup",
    "Timestamp": "2023-09-09T23:02:58",
    "Domain": "justinjackson.ca",
    "Description": "I've been brainstorming how I would build a new indie startup if I had to do it again in 2023. Here are 5 principles I’d use.",
    "Confidence": 0.89166445
  },
  {
    "Title": "My mental model of transducers",
    "Url": "https://blog.danieljanus.pl/2023/09/09/transducers/",
    "Timestamp": "2023-09-09T23:02:58",
    "Domain": "blog.danieljanus.pl",
    "Description": "I’ve been programming in Clojure for a long time, but I haven’t been using transducers much. I learned to mechanically transform (into [] (map f coll)) to (into [] (map f) coll) for a slight performance gain, but not much beyond that. Recently, however, I’ve found myself refactoring transducers-based code at work, which prompted me to get back to speed.",
    "Confidence": 0.99854475
  },
  {
    "Title": "Be more of a documentarian [#39]",
    "Url": "https://www.ntnbr.com/39/",
    "Timestamp": "2023-09-09T23:02:58",
    "Domain": "www.ntnbr.com",
    "Description": "It's really important to record & store your memories so you don't forget them.",
    "Confidence": 0.8979791
  },
  {
    "Title": "Making a newsletter backend",
    "Url": "https://axleos.com/making-a-newsletter-backend/",
    "Timestamp": "2023-09-09T23:02:57",
    "Domain": "axleos.com",
    "Description": "I’m currently working on a huge project. Since I’d like to finish it soon, I’m instead going to spend an evening implementing a bespoke newsletter service.\nA couple of months ago, I added a prominent RSS button to the overview of this blog, acquiescing to the venture capital overlords that line my pockets on the promise of a dedicated audience willing to trudge through inane jokes like this one.\nDon’t see it?",
    "Confidence": 0.9908816
  },
  {
    "Title": "Clojure Support in Emacs: One Unnecessary Drama",
    "Url": "https://metaredux.com/posts/2023/09/09/clojure-support-in-emacs-one-unnecessary-drama.html",
    "Timestamp": "2023-09-09T23:02:57",
    "Domain": "metaredux.com",
    "Description": "Over the past couple of weeks I was once again reminded why I’ve stopped following the infamous emacs-devel mailing list a long time ago. A trivial request to include clojure-ts-mode in Emacs’s NonGNU ELPA package repository1, turned into a surprising request by RMS to have built-in support for Clojure in Emacs.2 It appears that there is no clojure-mode command in core Emacs. There is a Clojure mode package, but it is in NonGNU ELPA. I think that language is important enough that, notwithstanding not really being similar to Lisp, we ought to have a major mode to support it. Would someone please work on that? This could be done by getting copyright assignments for code in the NonGNU ELPA package, or by writing new code to replace it, or by a mixture of the two. While it’s flattering to hear that Clojure is an important language, I’m fairly certain we would have never had this conversation if it wasn’t for the submissions of clojure-mode and clojure-ts-mode to NonGNU ELPA. So, I was kind of skeptical of this request. Furthermore, I’ve always been of the opinion that: Emacs is already quite bloated and it doesn’t make sense to bundle more major modes with it. I can’t think of any other editor that bundles so many packages and I’m reasonably sure most Emacs users never use more than 5% of the bundled packages anyways. At this point pretty much everyone is used to installing whatever plugins they need and it seems this works fine. Having more things distributed only as packages reduces the maintenance overhead and ensures that the end users will install recent version of the packages. The FSF contributor agreement (required for packages that are in Emacs’s core or in GNU ELPA) will detract some contributors for either legal or practical reasons (like that you have deal with snail mail for it) - you need to sign if you are to contribute more than 15 lines of code. For me it’s super important not to discourage any contributors, especially is a small community like Emacs’s or Clojure’s. That’s why I’ve never submitted any packages that I’ve authored or maintained to either ELPA or Emacs’s core.3 Anyways, I’ve tried to make my points and the Emacs maintainers made theirs. A few ideas where discussed and at some point the conversation took a rather unpleasant turn. First it was suggested that creating a replacement of some sort for clojure-mode/clojure-ts-mode would be pretty simple. Then it was suggested it could be named clojure-mode, because it wasn’t cool for third-party packages to use such generic names (even if there are ton of 3rd party modes named in this fashion). It didn’t seem like a big deal at the time, though, plus I had some vacation time ahead of me and I dropped this conversation out of my mind. During my vacation, however, I made the mistake of checking my email and I noticed that a new thread on the topic has started - one discussing a potential barebone major mode that simply derives from lisp-mode.4 At this point I got a bit upset and tried to understand what exactly was the problem that we were trying to solve here: I still haven’t heard what are the problems that bringing the Clojure support to ELPA or core would solve. I said I don’t buy that installing 3rd party packages is a big obstacle. I’ve also told you we have a big organization of people behind the clojure-emacs community (and a pretty long track record), so me or Danny are not a bus factor of one. We came and submitted the packages to NonGNU ELPA to make things easier for people who are skeptical of MELPA, etc. From my perspective we’ve been very accommodating and collaborative, but somehow that’s not enough. As the conversation was getting more heated I tried to summarize my position here and ask for more constructive tone going forward: Instead of having a civilized conversation here, I’ve felt that it’s only “we know better” and to hell with how things used to happen. Sure, you can do whatever you want, but I think that no one will be better off if things in the community happen in this forceful manner. Then things really blew up and one member of Emacs’s team turned this personal with remarks like: All I did was to follow up on a suggested path and study technical ways to getting Clojure editing support in Emacs, better than what we have now, which is 0. I think is a pretty reasonable thing to do on emacs-devel. It’s not an immoral thing to do and I’m not coming for His Highness The Great Clojure Authority Life’s Work. I also learned at this point there was 0 Emacs support for Clojure mode. Kind of funny, given that Emacs has been the primary editor for most Clojure developers for the past 15 years, right? I totally disagree that having 3rd party packages for something is equal to 0 support. I guess this escalation was triggered by a remark I made that it’s best to leave such work to people who actually know and use Clojure: That’s one of the things that bother me the most in the conversations so far - lots of people tell us what the Clojure users need, but other than me and Danny, no one here has any real interest in Clojure. :-) Without an understanding of Clojure and its tooling ecosystem (and it’s history) it’s hard to make good suggestions about what makes sense and what doesn’t. I already wrote we tried the “thin layer on top of lisp-mode” and this didn’t worked out great in the past. Of course, people are welcome to try and learn from experience themselves if they thing they can do things better/differently. I don’t thing there was something particularly hostile about my message, but the response I got was: And no, I don’t have to be A Bozhidar-Certified Clojure Programmer to want to help out, just as I don’t speak 90% of the languages Eglot supports, for example and I still try them out for time to time. Around this time I was also criticized for sharing a blog post and a YouTube presentation on the topic (apparently I was advertising my Clojure street cred or whatever) and for clinging to the control of clojure-mode and being afraid of a new Clojure mode. If I went by instinct or “the gist” of what you seem to be saying I’d say it really sounds like you want to avoid a new Clojure mode in Emacs at all costs. But look, no one is coming for your life’s work, really, noone is trying to beat you, best you or take away your Clojure street cred that you keep boasting about. Given how much time I’ve wasted on clojure-mode and how little I got for my work on it now I was royally pissed. I know a wise person would take the high road and ignore this, but I’m not a wise person. You can see my own responses grew progressively more aggressive: Another brilliant insight! I really wonder how the f**k you come up with those accusations??? If you think that my self-esteem in life comes from work on Emacs packages - I have to break it to you, but it doesn’t. I get “endless satisfaction” from wasting my spare time on random projects for free, so I can be attacked by people like you on mailing lists, right? Hell, yeah!!! One a less bitter note - I’ve welcomed Danny’s idea to start work on a replacement for clojure-mode and I believe I’ve been supportive of his work every step of the way (Danny can, of course, confirm this for himself). I’ve already shared earlier in this message the rough plan for how clojure-mode and clojure-ts-mode should evolve in the next couple of years. I’m juggling more projects that I have time for and the only reason I got involved in clojure-mode is that there was no one else willing to do the work that was required. And you dare accuse me of pumping my ego by clinging to its “ownership”? I can assure that I have a lot more important things in my life. P.S. You were just boasting about your street cred yourself, which I do find is kind of ironic in a conversation like this one. Are trying to solve problems here or measure our street cred? (or something else?) Anyways, I can be snarky and aggressive myself. I’m not a particularly calm person and I totally don’t tolerate when people try to pin their crazy unsubstantiated claims on me. I’ll urge once again to abstain from personal attacks if you expect me to take you seriously. Not exactly proud of myself here, but that’s a classic example that once a conversation starts feeling offensive to some of the participants, it quickly gets downhill. There’s a lot of talk about “toxic” communication these days and for me such threads are a true masterclass in toxicity and gaslighting. For what is worth at one point I tried to defuse a bit the tension.5 I was definitely on the defence, given that some of the messages implied things with which I strongly disagree - especially the part that I have something personal to gain from Emacs not having built-in Clojure support. The gist of it for me was simply “I’m wary of the impact that the inclusion would have to the current development process and to the number of outside contributions we’d be getting”. I was also unsure of the reasoning for this sudden interest in Clojure from the Emacs team. Like most people I don’t want to do something unless I’m sure it will be valuable in some way (e.g. for the health of the project, for the end users, for Emacs itself, etc). Eli’s words that he believes that’d be good for Emacs and I perhaps am not thinking about this got me to pause and think a bit longer. After all, Clojure was probably the biggest reason for new people to try out Emacs around the time it was introduced. Anyways, despite everything and my own personal frustration, I think I have a reasonably good idea of where we stand right now and what to do next. P.S. I’m a very emotional person and yesterday I was royally pissed. Normally I think a bit longer about what I write, but that wasn’t one of those days. Alas to no avail. The tone continued to be pretty bad until the very end… This was probably my “favorite” part: Let’s be clear: your help – would there have been any – would of course have been welcomed. But I didn’t see it as essential: none of your code was involved I was explicitly starting from scratch. And to be frank you didn’t even pop in my head when starting the thread, so I did was “reply to all”. Anyone can read these emails, after all. You did finally find the thread. But then all you did was try to intimidate, scaremonger and dissuade. Given that you’re now backtracking, err… reviewing your position, we might have your Clojure modes in GNU in the end. So I guess something decent might come of those 2 lines of code after all. So I all did in the discussion was “intimidate, scaremonger and dissuade”. I didn’t even know I had it in me! :D So, why am I writing this article? I guess part of the reason is to simply vent out. I’m not fond of bottling up frustration. But the main reason is to show everyone that hostile communication doesn’t have positive outcomes. All of this made me quite angry and emotionally drained. I’ve also seriously started to question my commitment to Emacs after so many years. I’ll follow-up on the promises I’ve made (starting a conversation with the other maintainers of whether they want us to submit anything to Emacs’s core), but I’m unlikely to forget what happened. Most likely after the topic is resolved in one way or another I’d sign off from emacs-devel forever. I’d also like to hear your take on all of this? Is there really a (real) problem that will be solved if some Clojure mode is bundled in Emacs? Are you frustrated by the way we’ve been stewarding the development of clojure-mode, CIDER, etc.? Am I the unreasonable person in these exchanges? (always a possibility) What would have done if you were in my shoes? This dramatic episode reminded me of some ugly/weird moments in the past years like: The author of flycheck (one of the best Emacs package developers I can think of) quitting Emacs after being frustrated with the communication on emacs-devel The hostilities between the author of elgot and the team behind the competing lsp-mode RMS randomly dropping that he’d like Emacs to complete with Word Hostility against clang and improvements specific to “non-free” operating systems None of them made the Emacs community stronger. In my opinion it was the other way around. I get that most of the people on emacs-devel are true believers in the mission of FSF and the GNU project, but it’s very hard to argue with beliefs. There was a time when I was a true believer and nothing would have made me happier than an invitation to submit something to Emacs, but life has made me a lot more pragmatic. These days I care a lot more about great outcomes, regardless of how they were achieved. (e.g. I have no issues with using platforms like GitHub and providing first-class support for Windows and MacOS) The jury is still out on whether the events that transpired will lead to something useful or not, but right now this feels like a classic case of one unnecessary drama. I hope it’s be the last one in which I’ll ever participate. That’s all I have for you today. Until next time! P.S. If there’s one good thing that came out of this discussion it’s that it start a separate discussion about adding some auto-suggestion of major modes to install. I think that’d be a lot more useful to the majority of Emacs’s users than built-in Clojure support. P.P.S. Expect some follow-up regarding the discussions around whether to work towards submitting clojure-mode or clojure-ts-mode to Emacs. I’ll get to this once I wrap up the work on the upcoming CIDER 1.8. See https://lists.gnu.org/archive/html/emacs-devel/2023-08/msg00395.html ↩ See https://lists.gnu.org/archive/html/emacs-devel/2023-08/msg00954.html ↩ Outside of the tiny subr-x library I’ve created a long time ago. ↩ See https://lists.gnu.org/archive/html/emacs-devel/2023-08/msg01287.html ↩ See https://lists.gnu.org/archive/html/emacs-devel/2023-09/msg00337.html ↩",
    "Confidence": 0.9836163
  },
  {
    "Title": "Basecamp is a Contrarian Marketing Operation",
    "Url": "https://molodtsov.me/2023/09/basecamp-is-a-contrarian-marketing-operation/",
    "Timestamp": "2023-09-09T23:02:57",
    "Domain": "molodtsov.me",
    "Description": "Basecamp is well-known not because of its product but because its founders heavily leverage marketing and communications, eventually turning into contrarian marketing machines producing edgy posts and starting crusades just to get everyone’s attention.",
    "Confidence": 0.95013446
  },
  {
    "Title": "Good performance is not just big O - Julio Merino (jmmv.dev)",
    "Url": "https://jmmv.dev/2023/09/performance-is-not-big-o.html",
    "Timestamp": "2023-09-09T23:02:57",
    "Domain": "jmmv.dev",
    "Description": "Having a fast and responsive app is orthogonal to &ldquo;knowing your big Os&rdquo;. Unfortunately, most tech companies over-emphasize algorithms in interviews and downplay systems knowledge, and I believe that&rsquo;s one reason behind sluggish apps and bloated systems.\nI&rsquo;ve seen this play out repeatedly. Interviewers ask a LeetCode-style coding question, which is then followed by the ritual of discussing time and memory complexity. Candidates ace the answers. But then&hellip; their &ldquo;real&rdquo; code suffers from subtle yet impactful performance problems.\nFocusing on big O complexity rarely matters in most apps. Sure, it&rsquo;s important to think about your algorithmic choices, but there are so many more details to worry about that have a direct impact on app performance and responsiveness. Let&rsquo;s look at a bunch of them!\n",
    "Confidence": 0.9897912
  },
  {
    "Title": "Success Over Being Right",
    "Url": "https://pluto.bearblog.dev/success-over-being-right/",
    "Timestamp": "2023-09-09T23:02:56",
    "Domain": "pluto.bearblog.dev",
    "Description": "“__I don’t really care about being right, I just care about success. I don’t mind being wrong, and I’ll admit that I’m wrong a lot. It doesn’t really matter ...",
    "Confidence": 0.98611057
  },
  {
    "Title": "Learn the Basics of HTTP Web API - Coding Sonata",
    "Url": "https://codingsonata.com/learn-the-basics-of-http-web-api/",
    "Timestamp": "2023-09-09T21:03:28",
    "Domain": "codingsonata.com",
    "Description": "In this article, we will learn about the basics of HTTP Web API. As a Software engineer, regardless of tech stack you are working on, whether it was frontend or …",
    "Confidence": 0.9889102
  },
  {
    "Title": "Every Type of Plastic Used By LEGO - BrickNerd - All things LEGO and the LEGO fan community",
    "Url": "https://bricknerd.com/home/every-type-of-plastic-used-by-lego-5-20-22",
    "Timestamp": "2023-09-09T20:03:26",
    "Domain": "bricknerd.com",
    "Description": "While ABS may be the most well-known plastic used by LEGO, they actually use a wide variety of plastics. Here’s an example of all the kinds of plastic used by LEGO provided by BrickNerd guest contributor Ryan Howerter.",
    "Confidence": 0.81600785
  },
  {
    "Title": "Hacker-Angriff bei Wein & Co: Teil der Nutzerdaten gestohlen",
    "Url": "https://www.derstandard.at/consent/tcf/story/3000000186236/hacker-angriff-bei-weinco-teil-der-nutzerdaten-gestohlen",
    "Timestamp": "2023-09-09T19:03:35",
    "Domain": "www.derstandard.at",
    "Description": "Betroffen von dem Diebstahl seien Namen, Adressen, Mailadressen, Geburtsdaten, Telefonnummern und gewisse Informationen zu den Bestellungen, heißt es von Wein & Co",
    "Confidence": 0.8858968
  },
  {
    "Title": "iOS Debugging from Windows - VS Code Extension - Nick's .NET Travels",
    "Url": "https://nicksnettravels.builttoroam.com/unoplatform-vscode-extensions/",
    "Timestamp": "2023-09-09T19:03:35",
    "Domain": "nicksnettravels.builttoroam.com",
    "Description": "One of the things that has always impressed me was the ability to pair Visual Studio running on Windows to a Mac and be able to debug on either a real device, or on a simulator. There’s even a remote simulator which will display the simulator on Windows, meaning I never have to open, or ... Read more",
    "Confidence": 0.997465
  },
  {
    "Title": ".NET Architecture | Specification Design Pattern (DDD)",
    "Url": "https://youtube.com/watch?v=v6Mo3w6ohHk",
    "Timestamp": "2023-09-09T19:03:32",
    "Domain": "youtube.com",
    "Description": "In this shorter video we will tackle the Specification Pattern, when and how to use it.Feel free to support me on Patreon:- https://www.patreon.com/OleinicVa...",
    "Confidence": 0.83761305
  },
  {
    "Title": "Asking 60+ LLMs a set of 20 questions",
    "Url": "https://benchmarks.llmonitor.com/",
    "Timestamp": "2023-09-09T19:03:30",
    "Domain": "benchmarks.llmonitor.com",
    "Description": "Human-readable benchmarks of 60+ open-source and proprietary LLMs.",
    "Confidence": 0.9877594
  },
  {
    "Title": "Refusing TypeScript is a signal that you don't care about code quality",
    "Url": "https://vitonsky.net/blog/2023/09/08/typescript-and-code-quality/",
    "Timestamp": "2023-09-09T18:03:28",
    "Domain": "vitonsky.net",
    "Description": "A few days ago, David Heinemeier Hansson \n\nannounced\n\n that Turbo 8 \n\nis dropping TypeScript\n\n. I'm okay with that because I don't even know what Turbo 8 is. However, over the past few years, some frontend programmers have tried to sell me the idea that \"TypeScript is useless, just use tests\". I think people with such opinions either don't care about code quality or simply don't know what TypeScript is. Here, I will explain why you should use TypeScript.",
    "Confidence": 0.9925428
  },
  {
    "Title": "‘Privacy Nightmare on Wheels’:  Every Car Brand Reviewed By Mozilla — Including Ford, Volkswagen and Toyota — Flunks Privacy Test",
    "Url": "https://foundation.mozilla.org/en/blog/privacy-nightmare-on-wheels-every-car-brand-reviewed-by-mozilla-including-ford-volkswagen-and-toyota-flunks-privacy-test/",
    "Timestamp": "2023-09-09T14:03:15",
    "Domain": "foundation.mozilla.org",
    "Description": "Mozilla’s latest edition of *Privacy Not Included reveals how 25 major car brands collect and share deeply personal data, including sexual activity, facial expressions, and genetic and health information.",
    "Confidence": 0.8467335
  },
  {
    "Title": "Extensibility and Flexibility – Dev Leader Weekly Issue 8",
    "Url": "https://www.devleader.ca/2023/09/09/extensibility-and-flexibility-dev-leader-weekly-issue-8/",
    "Timestamp": "2023-09-09T14:03:15",
    "Domain": "www.devleader.ca",
    "Description": "In this issue of Dev Leader Weekly, we have plugin architecture topics being introduced along side beginner programmer resources! So much C# and dotnet!",
    "Confidence": 0.8330575
  },
  {
    "Title": "Fundamentals Of EF Core Transaction #shorts",
    "Url": "https://youtube.com/watch?v=id8J2C7yv_E",
    "Timestamp": "2023-09-09T13:03:14",
    "Domain": "youtube.com",
    "Description": "📌 Check out my Pragmatic Clean Architecture course: https://bit.ly/3PupkOJ🚀 Support me on Patreon to access the source code: https://www.patreon.com/milanj...",
    "Confidence": 0.9861501
  },
  {
    "Title": "File-Scoped Types in C# 11 - Code Maze",
    "Url": "https://code-maze.com/csharp-file-scoped-types/",
    "Timestamp": "2023-09-09T09:03:21",
    "Domain": "code-maze.com",
    "Description": "This article gives a brief introduction to file-scoped types and their practical usage in C# with examples.",
    "Confidence": 0.9973163
  },
  {
    "Title": "05-We Speak: IBM CICS",
    "Url": "https://youtu.be/Qyk6ry1fZGc",
    "Timestamp": "2023-09-09T09:03:19",
    "Domain": "youtu.be",
    "Description": "In this session, we continue with the \"We Speak\", Mission Critical Series with an episode on how Azure Logic Apps can unlock scenarios where is required to i...",
    "Confidence": 0.99114925
  },
  {
    "Title": "05-We Speak: IBM CICS",
    "Url": "https://youtube.com/watch?v=Qyk6ry1fZGc",
    "Timestamp": "2023-09-09T09:03:19",
    "Domain": "youtube.com",
    "Description": "In this session, we continue with the \"We Speak\", Mission Critical Series with an episode on how Azure Logic Apps can unlock scenarios where is required to i...",
    "Confidence": 0.99106115
  }
]