[
  {
    "Title": "How to lock orientation at runtime on iOS 16 with .NET MAUI and Xamarin.Forms",
    "Url": "https://msicc.net/how-to-lock-orientation-at-runtime-on-ios-16-with-net-maui-and-xamarin-forms/",
    "Timestamp": "2023-04-30T07:02:41",
    "Domain": "msicc.net",
    "Description": "With iOS 16, Apple made some old APIs non-functional. This includes also the established way of locking the orientation. In this post, I am going to show you how you can lock orientation on iOS 16 while the app is running with both .NET MAUI and Xamarin.Forms.",
    "Confidence": 0.9989386
  },
  {
    "Title": "Verifying your DI Container",
    "Url": "https://steven-giesel.com/blogPost/ce948083-974a-4c16-877f-246b8909fa6d",
    "Timestamp": "2023-04-30T05:01:34",
    "Domain": "steven-giesel.com",
    "Description": "Microsoft's integrated dependency injection (short DI) container is very powerful, but there are also certain pitfalls. In this article, I will show you what some of the pitfalls are and how you can verify them.\n",
    "Confidence": 0.99856454
  },
  {
    "Title": "Bluesky Social",
    "Url": "https://bsky.app/profile/davidw.bsky.social",
    "Timestamp": "2023-04-30T02:02:14",
    "Domain": "bsky.app",
    "Description": "See what's next.",
    "Confidence": 0.8292144
  },
  {
    "Title": "FOSS I Love",
    "Url": "https://ahelwer.ca/post/2023-04-29-sunshine-moonlight/",
    "Timestamp": "2023-04-29T23:02:32",
    "Domain": "ahelwer.ca",
    "Description": "Local game streaming with Sunshine and Moonlight",
    "Confidence": 0.98491216
  },
  {
    "Title": "Why do I want to Email Myself Every Day?",
    "Url": "https://blog.bettersheets.co/why-do-i-want-to-email-myself-every-day/",
    "Timestamp": "2023-04-29T23:02:32",
    "Domain": "blog.bettersheets.co",
    "Description": "After creating an Apps Script to email myself every day from a Google Sheet, someone asked: Why?\n\nOverall I find I can face the day better when I have timed reminders inside my inbox. My deep work is deeper, and almost nothing gets forgotten, when I want to execute it",
    "Confidence": 0.97379017
  },
  {
    "Title": "More Design Patterns For Machine Learning Systems",
    "Url": "https://eugeneyan.com/writing/more-patterns/",
    "Timestamp": "2023-04-29T23:02:32",
    "Domain": "eugeneyan.com",
    "Description": "9 patterns including HITL, hard mining, reframing, cascade, data flywheel, business rules layer, and more.",
    "Confidence": 0.9839505
  },
  {
    "Title": "You Are Getting Terrible Sleep Advice",
    "Url": "https://ameistad.com/articles/you-are-getting-terrible-sleep-advice/",
    "Timestamp": "2023-04-29T23:02:31",
    "Domain": "ameistad.com",
    "Description": "Obsessing over sleep and trying too hard will backfire.",
    "Confidence": 0.9709239
  },
  {
    "Title": "ChatGPT-4 outperformed 90% developers",
    "Url": "https://zagosk.in/chatgpt-4-outperformed-90-percent-of-developers",
    "Timestamp": "2023-04-29T21:02:20",
    "Domain": "zagosk.in",
    "Description": "Discover how ChatGPT-4 surpasses 90% of developers in solving coding challenges. Explore the future and potential of AI in software development.",
    "Confidence": 0.97862524
  },
  {
    "Title": "Drop down lists in ASP.NET MVC | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2013/08/drop-down-lists-in-asp-net-mvc/",
    "Timestamp": "2023-04-29T16:07:21",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code is a attached here.\nThis post shows two methods of implementing drop down lists in ASP.NET MVC 4. The code for data access and the general layout of the application should not be considered suitable for anything other than pedagogical purposes.",
    "Confidence": 0.9959955
  },
  {
    "Title": "Debugging an AWS Lambda Function Locally with Visual Studio Code (VS Code) on Windows, Linux, and Mac | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/05/debugging-an-aws-lambda-function-locally-with-visual-studio-code-vs-code-on-windows-linux-and-mac/",
    "Timestamp": "2023-04-29T16:07:11",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "It is easy to debug an AWS Lambda function locally with Visual Studio Code, all you need to do is install one tool and make one change to the launch.json file. Read on to see how.",
    "Confidence": 0.998517
  },
  {
    "Title": "Simmy Chaos Engine for .NET – Part 5, Breaking Your Own Code | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/11/simmy-chaos-engine-for-net-part-5-breaking-your-own-code/",
    "Timestamp": "2023-04-29T16:07:10",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nThe blog posts I have written so far about Simmy all deal with the scenario where you don’t have control over the source code that you want to break, in these cases Simmy policies are applied to the calling code.",
    "Confidence": 0.97459334
  },
  {
    "Title": "Text to Speech with Amazon Polly and .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/01/text-to-speech-with-amazon-polly-and-net/",
    "Timestamp": "2023-04-29T16:07:10",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Using Amazon Polly to convert text to speech is very easy, with a small .NET console application you can send the text to Amazon and play it on your computer.",
    "Confidence": 0.99911904
  },
  {
    "Title": "Reading CSV Files into Objects with Node.js | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/10/reading-csv-files-into-objects-with-node-js/",
    "Timestamp": "2023-04-29T16:07:10",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nAs I am learning Node.Js I am constantly surprised by how easy it is to do some things, and how difficult to do others, and how poor the examples out there are.",
    "Confidence": 0.99224335
  },
  {
    "Title": "The Circuit Breaker pattern with Polly | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/03/the-circuit-breaker-pattern-with-polly/",
    "Timestamp": "2023-04-29T16:07:10",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nThis post on the Polly circuit breaker is part of a larger series of post on the Polly Resilience Framework, see here for the others, or check out my Pluralsight course.",
    "Confidence": 0.9566873
  },
  {
    "Title": "GitHub Actions with .NET, Part 2 - Dependent Jobs | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/04/github-actions-with-net-part-2-dependent-jobs/",
    "Timestamp": "2023-04-29T16:07:09",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In the previous post I gave a quick introduction to GitHub Actions showing how to build a small Hello World application and make the artifact available for download. In this post, I'll show how to build debug and release versions of the same application, with the release only being built if the debug one builds successfully.",
    "Confidence": 0.99752694
  },
  {
    "Title": "Varying the Time Between Polly Retries Based on the Exception | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/07/varying-the-time-between-polly-retries-based-on-the-exception/",
    "Timestamp": "2023-04-29T16:07:08",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Polly's Wait and Retry lets you decide how long it should pause based on the exception thrown in the invoked code. This is very useful when you know what problems can occur and how long you need to wait for them to resolve.",
    "Confidence": 0.97154826
  },
  {
    "Title": "Working with JSON in .NET, Infrastructure as Code with Pulumi | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/10/working-with-json-in-net-infrastructure-as-code-with-pulumi/",
    "Timestamp": "2023-04-29T16:07:08",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nThis is a follow up to my previous post where I used dynamic and JSON files to make querying ElasticSearch with a HttpClient much easier.",
    "Confidence": 0.9924174
  },
  {
    "Title": "Installing Rider on Linux with .NET 7 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/01/installing-rider-on-linux-with-net-7/",
    "Timestamp": "2023-04-29T16:07:08",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "While trying to use Rider on Linux, I hit these errors \"load failed\", \"MSBuild is required to load project 'HelloLinux' but it was not found\", and \"MSBuild (Microsoft Build Engine) is required to load and build project 'HelloLinux'\". If you got any of these, read on to find out how to fix them.",
    "Confidence": 0.99506485
  },
  {
    "Title": "Customizing a specific string inside a class using AutoFixture | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/04/customizing-a-specific-string-inside-a-class-using-autofixture/",
    "Timestamp": "2023-04-29T16:07:08",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code.\nI’ve been using AutoFixture for a while with my unit tests. It creates objects with prefilled data, saving me the hassle of manually constructing them.\nBasic usage If you want a string from AutoFixture do something like -",
    "Confidence": 0.99741846
  },
  {
    "Title": "Caching Values Inside HttpResponseMessage with Polly – caching series 2/3 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/04/caching-values-inside-httpresponsemessage-with-polly-caching-series-2-3/",
    "Timestamp": "2023-04-29T16:07:06",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nIn this, the second of three posts on caching in Polly, I will show how to cache the values returned inside a HttpResponseMessage as opposed to caching the response with all its various elements.",
    "Confidence": 0.9943072
  },
  {
    "Title": "Netlify, Hugo, and Wowchemy or: How I Learned to Stop Worrying and Love the Blog | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/05/netlify-hugo-and-wowchemy-or-how-i-learned-to-stop-worrying-and-love-the-blog/",
    "Timestamp": "2023-04-29T16:07:05",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "For years my blog was on WordPress hosted by a third party, I recently moved it to Netlify, Hugo, and Wowchemy. It is much faster, easier to work with, more reliable, and more secure. Getting a blog up and running with those tools is very easy; migrating hundreds of posts, less so, but worth it.",
    "Confidence": 0.9786978
  },
  {
    "Title": "Caching in Polly and the HttpClientFactory | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/11/caching-in-polly-and-the-httpclientfactory/",
    "Timestamp": "2023-04-29T16:07:05",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nPolly allows you to cache a response for reuse by a subsequent request, it supports both local an distributed caches, full information can be found here https://github.",
    "Confidence": 0.99329305
  },
  {
    "Title": "A Simple Example of Amazon Transcribe with .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/02/a-simple-example-of-amazon-transcribe-with-net/",
    "Timestamp": "2023-04-29T16:07:05",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Speech to text is now as simple as uploading a file, starting a transcription job, and waiting for the results.",
    "Confidence": 0.99658877
  },
  {
    "Title": "Entity Framework Core, Calling Stored Procedures and Returning to a Model | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/03/entity-framework-core-calling-stored-procedures-and-returning-to-a-model/",
    "Timestamp": "2023-04-29T16:07:04",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nI wrote a post some time back about calling a stored procedure with Entity Framework using the DbCommand, but it was a bit complicated and not that easy to use.",
    "Confidence": 0.9851624
  },
  {
    "Title": "Fluent Validation in ASP.NET Core | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/06/fluent-validation-in-asp-net-core/",
    "Timestamp": "2023-04-29T16:07:02",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nI have written about Fluent Validation a couple of times. There is a new library available for .Net Core.\nHow to return to validation messages back to the caller is not immediately obvious.",
    "Confidence": 0.99850273
  },
  {
    "Title": "Testing Your Code When Using Polly | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/03/testing-your-code-when-using-polly/",
    "Timestamp": "2023-04-29T16:07:02",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nWhen developing an application with Polly you will also probably want to write some unit tests.",
    "Confidence": 0.99135077
  },
  {
    "Title": "Signing calls to Lambda Function URLs using IAM auth with HttpClient | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/07/signing-calls-to-lambda-function-urls-using-iam-auth-with-httpclient/",
    "Timestamp": "2023-04-29T16:07:02",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you are using IAM auth with Lambda Function URLs, and you want to call the function using HttpClient from a .NET application, you need to sign the request. Read on to see how.",
    "Confidence": 0.9963233
  },
  {
    "Title": "C# and AWS Lambdas, Part 2 - Web API and an API Gateway | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/02/c-and-aws-lambdas-part-2-web-api-and-an-api-gateway/",
    "Timestamp": "2023-04-29T16:07:01",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In the [previous post](/2021/02/c-and-aws-lambdas-part-1-hello-world/) I created a Lambda that executed a C# console application. In this post, I walk through creating a .NET Core 3.1 Web API application inside a Lambda and making it reachable from the web, just like a normal Web API application. ",
    "Confidence": 0.9990126
  },
  {
    "Title": "Using the In-Memory Cache with .NET Core Web API | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/05/using-the-in-memory-cache-with-net-core-web-api/",
    "Timestamp": "2023-04-29T16:07:01",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIf you need to store anything temporarily within an application, you should consider using the In-Memory Cache from Microsoft. In .NET Core it is much easier to use than its predecessor from Framework 4.",
    "Confidence": 0.99705696
  },
  {
    "Title": "Caching Secrets Manager Secrets with a Lambda Layer | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/10/caching-secrets-manager-secrets-with-a-lambda-layer/",
    "Timestamp": "2023-04-29T16:07:00",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Lambda layers allow you to leverage functionality provided by AWS. This post shows how to use the AWS Parameters and Secrets Lambda Extension to cache Secrets Manager secrets.",
    "Confidence": 0.99667394
  },
  {
    "Title": "Doing a bit of Docker Cleanup | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/11/doing-a-bit-of-docker-cleanup/",
    "Timestamp": "2023-04-29T16:07:00",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "After using Docker for a while I like cleaning out all my images, containers, volumes, and the build cache. Here are some simple commands to do that.",
    "Confidence": 0.97501236
  },
  {
    "Title": "The Simplest Hello World in Node.js | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/09/the-simplest-hello-world-in-node-js/",
    "Timestamp": "2023-04-29T16:06:58",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nI am learning Node.js and have found it a bit of a struggle to locate good, simple documentation. It feels like most people writing in the space assume a lot of existing knowledge, like you know how plenty of JavaScript, or how to effectively use web browser debug tools, have a good understanding of HTML and CSS.",
    "Confidence": 0.99560565
  },
  {
    "Title": "Cached nuget packages causing you problems? | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/05/cached-nuget-packages-causing-you-problems/",
    "Timestamp": "2023-04-29T16:06:58",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Short version If you are having problems with nuget packages and think it might be related to local caching delete packages from these directories -\n%LocalAppData%\\NuGet\\Cache and %userprofile%\\.nuget\\packages\\\nLong version I was making nuget package, lets call it Foo, for my own use, not one that I was going to distribute publicly, but I was putting in on MyGet.",
    "Confidence": 0.9603876
  },
  {
    "Title": "Fleet Manager, an easy way to check in on an EC2 Windows instance | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/01/fleet-manager-an-easy-way-to-check-in-on-an-ec2-windows-instance/",
    "Timestamp": "2023-04-29T16:06:57",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Sometimes all you want to do is have a quick look at a Windows EC2 instance to see what is going on, or make a small change.  I'll show how to do that without the difficulty of making security group changes.",
    "Confidence": 0.9664895
  },
  {
    "Title": "Indexing the Works of Shakespeare in Elasticsearch - Part 1, Infrastructure as Code | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/11/indexing-the-works-of-shakespeare-in-elasticsearch-part-1-infrastructure-as-code/",
    "Timestamp": "2023-04-29T16:06:57",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Part one of a four-parter where I'm going to show how to index the complete works of Shakespeare in Elasticsearch. This first part will set up the infrastructure on AWS. The second will go through the lambda that bulk loads data into Elasticsearch. The third will show how to, in Node.js, create the index on the Elasticsearch domain, read the works of Shakespeare from CSV and send to Kinesis, and the fourth will put a .NET 5 Web Api in front of the Elasticsearch cluster.",
    "Confidence": 0.995114
  },
  {
    "Title": "Pizza Delivery IoT Project Pt. 2",
    "Url": "https://basementprogrammer.hashnode.dev/pizza-delivery-iot-project-pt-2",
    "Timestamp": "2023-04-29T16:06:57",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "Continuing from Pizza Delivery IoT Project Pt. 1, I have completed much of the circuit design on my breadboard and completed the basic code necessary to interact with the sensors on the board.\n\nTo interact with the various components on the board, I ...",
    "Confidence": 0.9974313
  },
  {
    "Title": "Dotclear blog editing problem | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2013/08/dotclear-blog-editing-problem/",
    "Timestamp": "2023-04-29T16:06:55",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "The dotclear blogging engine has some issues when including pre-formated html; it removes all leading spaces and mangles empty lines.\nThis is a significant problem when posting nicely coloured code snippets like those produced by hilite.",
    "Confidence": 0.9946749
  },
  {
    "Title": "Accidental LLM Backdoor - Prompt Tricks",
    "Url": "https://youtube.com/watch?v=h74oXb4Kk8k",
    "Timestamp": "2023-04-29T16:06:55",
    "Domain": "youtube.com",
    "Description": "In this video we explore various prompt tricks to manipulate the AI to respond in ways we want, even when the system instructions want something else. This c...",
    "Confidence": 0.9389178
  },
  {
    "Title": "Improving Lambda Custom Runtime Cold Start and Deployment Speeds with .NET 6 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/12/improving-lambda-custom-runtime-cold-start-and-deployment-speed-with-net-6/",
    "Timestamp": "2023-04-29T16:06:54",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "A couple of new features in .NET 6 improve Lambda cold start times and the speed of deploying new functions. Read on to see how.",
    "Confidence": 0.99317485
  },
  {
    "Title": "WhenAny with a List of Different Types of Task, Processing Each as They Finish | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/11/whenany-with-a-list-of-different-types-of-task-processing-each-as-they-finish/",
    "Timestamp": "2023-04-29T16:06:54",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "After some discussions on Twitter a few new ways of using WhenAny with Tasks of different types came up. Here is what I think will be my last post on this topic for a while, probably...",
    "Confidence": 0.9915522
  },
  {
    "Title": "GitHub Actions with .NET, Part 3 - Manual Approvals | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/05/github-actions-with-net-part-3-manual-appovals/",
    "Timestamp": "2023-04-29T16:06:53",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Sometimes you will want a user to approve a build job/step in GitHub Actions, in this post I show you how to do just that.",
    "Confidence": 0.99608606
  },
  {
    "Title": "Executing an AWS .NET Lambda at an Exact Time with Step Functions | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/06/executing-an-aws-net-lambda-at-an-exact-time-with-step-functions/",
    "Timestamp": "2023-04-29T16:06:51",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "AWS Step Functions are a very easy way to orchestrate many things. But they can also be used to run a Lambda at an exact time (down to a tenth of a second, or less), up to a year in the future.",
    "Confidence": 0.99374026
  },
  {
    "Title": "Web API 2 and ninject, how to make them work together | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/04/web-api-2-and-ninject-how-to-make-them-work-together/",
    "Timestamp": "2023-04-29T16:06:51",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code to download.\nI’ve been using ninject for a few years, but every time I use it with Web Api I hit some problem and they usually stem from not including the right nuget packages, not changing the DependencyResolver or (once) forgetting how to make a binding!",
    "Confidence": 0.99744785
  },
  {
    "Title": "Indexing the Works of Shakespeare in Elasticsearch – Part 3, Sending the Lines to Kinesis | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/11/indexing-the-works-of-shakespeare-in-elasticsearch-part-3-sending-the-lines-to-kinesis/",
    "Timestamp": "2023-04-29T16:06:50",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In this, the third part of the series, I show how to read from the Shakespeare CSV file where each row represents a line from a play, ([download here](https://file.ac/5b5t4n9lN5o/Shakespeare%20Plays.csv)), and send these lines to Kinesis. The lambda in AWS will pick up the lines from Kinesis and forward them to Elasticsearch for indexing.",
    "Confidence": 0.99477404
  },
  {
    "Title": "Accessing AWS Secrets Manager from .NET Lambda Functions, Part 2 - Using Async Code | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/05/accessing-aws-secrets-manager-from-net-lambda-functions-part-2-using-async-code/",
    "Timestamp": "2023-04-29T16:06:50",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In an earlier post I showed how to use a .NET 6 Lambda function to retrieve a secret from Secrets Manager synchronously, but it is also easy to do this  asynchronously.",
    "Confidence": 0.9780204
  },
  {
    "Title": "Downloading an in-memory file using Web Api 2 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/02/downloading-an-inmemory-file-using-web-api-2/",
    "Timestamp": "2023-04-29T16:06:48",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Download full source code\nAt first you think it’s going to be easy to download a file from Web Api, but as I discovered, it was not.\nIn my case I wanted to load data from the database, perform some processing and return a subset of the data as a file.",
    "Confidence": 0.99811774
  },
  {
    "Title": "Running an AWS Lambda Command from Windows Shells | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/08/running-an-aws-lambda-command-from-windows-shells/",
    "Timestamp": "2023-04-29T16:06:48",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Calling an AWS Lambda from Windows 10 is different depending on the shell you are using. In this post, I'll show how to call a simple Lambda that takes a simple event document from PowerShell, the command prompt, the WSL Ubuntu shell, and the git bash shell.",
    "Confidence": 0.97413355
  },
  {
    "Title": "Logging to DataDog with Serliog and .Net 5 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/01/logging-to-datadog-with-serliog-and-net-5/",
    "Timestamp": "2023-04-29T16:06:47",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Quick example of using DataDag with a .Net 5 Web Api application on your local computer.",
    "Confidence": 0.99807364
  },
  {
    "Title": "HttpContent ReadAsAsync with .NET Core 2 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/10/httpcontent-readasasync-with-net-core-2/",
    "Timestamp": "2023-04-29T16:06:46",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIf you are used to using HttpContent.ReadAsAsync you might be surprised to learn that it is missing from .NET Core 2. You can try adding Microsoft.",
    "Confidence": 0.9920736
  },
  {
    "Title": "Loading Config from Multiple Sources with .NET Core 2.x Web Api or MVC | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/06/loading-config-from-multiple-sources-with-net-core-2-x-web-api-or-mvc/",
    "Timestamp": "2023-04-29T16:06:45",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\n.NET Core 2 and .NET Core 2.1 offer many ways to load configuration and they are well documented by Microsoft. But there is one scenario that I didn’t see explained.",
    "Confidence": 0.9970583
  },
  {
    "Title": "VS Code Bug - Interpolation and Commented Lines, Workaround | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/11/vs-code-bug-interpolation-and-commented-lines-workaround/",
    "Timestamp": "2023-04-29T16:06:43",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "There is a bug in VS Code that occurs when you use string with `@$` - the verbatim character and the interpolation characters, but there is a workaround.",
    "Confidence": 0.98943985
  },
  {
    "Title": "Parameterized SQL WHERE IN clause C# | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/01/parameterized-sql-where-in-clause-c/",
    "Timestamp": "2023-04-29T16:06:43",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you are using some legacy SQL in C# you’ll occasionally need to write a WHERE IN. You don’t want to end up writing something like the below, either directly or through some sort of loop.",
    "Confidence": 0.9875825
  },
  {
    "Title": "Polly with .NET 6, Part 2 - Dependency Injection of a HttpClientFactory with a Retry Policy | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/02/polly-with-net-6-part-2-dependency-injection-of-a-httpclientfactory-with-a-retry-policy/",
    "Timestamp": "2023-04-29T16:06:43",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This post shows how to use Polly with .NET 6; injecting a HttpClientFactory with a Retry policy into a controller.",
    "Confidence": 0.9989523
  },
  {
    "Title": "Entity Framework in an Dynamics Nav (Navision) environment (or using EF to access tables with unknown table names) | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2013/08/entity-framework-in-an-dynamics-nav-navision-environment-or-using-ef-to-access-tables-with-unknown-table-names/",
    "Timestamp": "2023-04-29T16:06:43",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Summary In this post I show how to use dynamic compilation to allow Entity Framework to reference tables whose names are not known at compile time.\nDetails Entity Framework works great for the majority of scenarios; it handles tables in one database or spread across multiple databases very well.",
    "Confidence": 0.9995779
  },
  {
    "Title": "Entity Framework lazy loading vs explicit loading and the generated SQL | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2014/08/entity-framework-lazy-loading-vs-explicit-loading-and-the-generated-sql/",
    "Timestamp": "2023-04-29T16:06:42",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Download the source code here.\nIf you are using lazy loading with Entity Framework you should check that queries to the database are working as expected.\nA lazy load call to something like customer.",
    "Confidence": 0.9686485
  },
  {
    "Title": "Calling one Lambda Function from another with the Lambda .NET SDK | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/06/calling-one-lambda-function-from-another-with-the-lambda-net-sdk/",
    "Timestamp": "2023-04-29T16:06:42",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Calling one Lambda function from another is something you'll occasionally need to do. If you are using Lambda function URLs it is a simple HTTP request. But you can also use the AWS Lambda SDK to invoke the other function.",
    "Confidence": 0.9960895
  },
  {
    "Title": "Creating an ASCII Table with C# | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/09/creating-an-ascii-table-with-c/",
    "Timestamp": "2023-04-29T16:06:42",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I was re-watching The Martian a few weeks ago. There is a scene Mark Watney needs an ASCII table, he rummages through the laptop of one of the crew to find one. This got me thinking that it should be very easy to create a table with a simple program.",
    "Confidence": 0.9928339
  },
  {
    "Title": "Simmy Chaos Engine for .NET – Part 3, Adding Latency | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/08/simmy-chaos-engine-for-net-part-3-adding-latency/",
    "Timestamp": "2023-04-29T16:06:42",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nThis is the third in my series on chaos engineering with Simmy. The first two posts dealt with the fault policy throwing exceptions and returning failed responses rather than calling the remote service.",
    "Confidence": 0.9715865
  },
  {
    "Title": "Getting .NET Core 2.1 Preview 2 Working with Visual Studio 2017 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/04/getting-net-core-2-1-preview-2-working-with-visual-studio-2017/",
    "Timestamp": "2023-04-29T16:06:40",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "About a year ago I wanted to start using .NET Framework 4.7, it should have been an easy process, but wasn’t. After some trial and error if figured it out and wrote a blog post explaining how to get it working.",
    "Confidence": 0.9979181
  },
  {
    "Title": "Saving enums as strings with Entity Framework | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2014/11/saving-enums-as-strings-with-entity-framework/",
    "Timestamp": "2023-04-29T16:06:38",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In September 2018 I wrote a new post explaining how to store enums as ints or strings with Entity Framework Core. It is a nicer solution than the one presented here.",
    "Confidence": 0.9942413
  },
  {
    "Title": "Performing a WHERE IN with Entity Framework or on a List | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/02/performing-a-where-in-with-entity-framework-or-on-a-list/",
    "Timestamp": "2023-04-29T16:06:38",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "WHERE IN is a very useful and commonly used feature of SQL, it looks like this -\nSELECT * FROM ORDER WHERE OrderId IN (10248, 10249, 10250, 10251)\nThe will return up to four rows of data, showing just the orders that have an OrderId in the list you passed to the select statement.",
    "Confidence": 0.9947021
  },
  {
    "Title": "Polly and Blazor, Part 2 – Using the Context | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/01/polly-and-blazor-part-2-using-the-context/",
    "Timestamp": "2023-04-29T16:06:35",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "When using Blazor and Polly there are a few ways to pass data from Polly back to the UI, this example shows how to do this with the Polly Context.",
    "Confidence": 0.99655455
  },
  {
    "Title": "Forcing the Lambda Service to Warm 100 Execution Environments for your Function | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/11/forcing-the-lambda-service-to-warm-100-execution-environments-for-your-function/",
    "Timestamp": "2023-04-29T16:06:35",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you know that your Lambda function needs to handle bursts of activity at a predictable time, and you want to avoid the slower response of cold stars for that burst, you can force the Lambda service to warm up execution environments for you ahead of the burst.",
    "Confidence": 0.9957829
  },
  {
    "Title": "C# and AWS Lambdas, Part 3 – Pulumi IaC for Web API and an API Gateway | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/02/c-and-aws-lambdas-part-3-pulumi-iac-for-web-api-and-an-api-gateway/",
    "Timestamp": "2023-04-29T16:06:34",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In this the third in a series of posts on using .NET in AWS Lambdas I build on the previous post where I connected a Http Gateway to a Lambda running a Web API application. In that post I built the infrastructure by hand, i.e. via the GUI, pointing and clicking.\n\nIn this post, I will show how to build everything with Pulumi.",
    "Confidence": 0.99802375
  },
  {
    "Title": "Using Dependency Injection with Startup.cs in ASP.NET Core | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/05/using-dependency-injection-with-startup-in-asp-net-core/",
    "Timestamp": "2023-04-29T16:06:33",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nDid you know that .NET Core 2 can pass in an instance of any type you want to the Startup.cs constructor? Well you can! Here’s how.",
    "Confidence": 0.9997521
  },
  {
    "Title": "How to Turn Off Console Logging for Kestrel in .NET Core | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/12/how-to-turn-off-console-logging-for-kestrel-in-net-core/",
    "Timestamp": "2023-04-29T16:06:33",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This post is mostly a note to myself.\nI am often annoyed with the amount of logging to the console that occurs when I start a Kestrel hosted application and I can never remember how to turn it off.",
    "Confidence": 0.9599792
  },
  {
    "Title": "Entity Framework Core 2 Unit Testing in .NET Core 2 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/09/entity-framework-core-2-unit-testing-in-net-core-2/",
    "Timestamp": "2023-04-29T16:06:33",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nUnit testing Entity Framework used to be quite a chore, but over the past few years it has become significantly easier.\nIn this post I’m going to show you how to use the InMemory database with named instances.",
    "Confidence": 0.9969691
  },
  {
    "Title": "Varying the Time Between Polly Retries Based on the Result | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/07/varying-the-time-between-polly-retries-based-on-the-result/",
    "Timestamp": "2023-04-29T16:06:32",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This is a follow-up to a post I wrote a few days ago about varying the delay between retries based on the exception. This time I'm going to show how to vary the delay based on the result.",
    "Confidence": 0.96307653
  },
  {
    "Title": "Requesting Data from two Data Stores in Sequence - Cache and a Database | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/12/requesting-data-from-two-data-stores-in-sequence-cache-and-database/",
    "Timestamp": "2023-04-29T16:06:32",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "There are times when firing off the same query in parallel to two or more data stores is a good choice, but normally hitting one, waiting for the response, and only hitting the second if necessary is a better approach. Here I'll show how to query Redis, and if the key is missing, query MS SQL.",
    "Confidence": 0.9844448
  },
  {
    "Title": "Dynamically Updating the Request Header of a HttpClientFactory Generated HttpClient, Part 1 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/12/dynamically-updating-the-request-header-of-a-httpclientfactory-generated-httpclient-part-1/",
    "Timestamp": "2023-04-29T16:06:32",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nThere are some subtle issues in the way I use DI in this post, see here for an alternative if you don’t want to follow this approach",
    "Confidence": 0.9973322
  },
  {
    "Title": ".NET Minimal API part 8 - Structuring a minimal API project",
    "Url": "https://youtube.com/watch?v=qExiM5N6Jp8",
    "Timestamp": "2023-04-29T16:06:31",
    "Domain": "youtube.com",
    "Description": "This video is somewhat long as it covers the following topics:0:00 Introduction0:20 Horizontal Layers & Vertical Slices4:20 Reasoning behind using a DbContex...",
    "Confidence": 0.98404783
  },
  {
    "Title": "Programmatically Determine what Ports Kestrel is Running On | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/01/programmatically-determine-what-ports-kestrel-is-running-on/",
    "Timestamp": "2023-04-29T16:06:31",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In the unlikely event you need to determine what port Kestrel is running on...",
    "Confidence": 0.9992983
  },
  {
    "Title": "Using the Secrets Manager Cache with .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/09/using-the-secrets-manager-cache-with-net/",
    "Timestamp": "2023-04-29T16:06:31",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Secrets are usually retrieved far more often than they are changed. The AWS Secrets Manager cache lets you cache secrets for a specified period, reducing the number of requests your applications need to make.",
    "Confidence": 0.99602866
  },
  {
    "Title": "Filtering a Dictionary by value with a List as the value | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/02/filtering-a-dictionary-by-value-with-a-list-as-the-value/",
    "Timestamp": "2023-04-29T16:06:29",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Filtering out entries in a dictionary is not too difficult when the key and value are simple. For example if you had -\nIDictionary oneToFourDictionary = new Dictionary {{ \"one\", 1 }, { \"two\", 2 }, { \"three\", 3 }, { \"four\", 4 } };",
    "Confidence": 0.9865132
  },
  {
    "Title": "Selectively Caching Values Inside HttpResponseMessage with Polly – caching series 3/3 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/05/selectively-caching-values-inside-httpresponsemessage-with-polly-caching-series-3-3/",
    "Timestamp": "2023-04-29T16:06:26",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nThis is the last of three posts on caching with Polly. The first showed how to selectively cache HttpResponseMessages based on the status code of the response.",
    "Confidence": 0.998571
  },
  {
    "Title": "Transcribing Two Speakers with Amazon Transcribe via Speaker Identification with .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/03/transcribing-two-speakers-with-amazon-transcribe-via-speaker-identification-with-net/",
    "Timestamp": "2023-04-29T16:06:26",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Amazon Transcribe provides two ways to identify speakers in a piece of audio. In this post, you will see how to use speaker identification to distinguish between the voices of two people.",
    "Confidence": 0.99493784
  },
  {
    "Title": "Web API 2 Controller with multiple get methods | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/10/web-api-2-controller-with-multiple-get-methods/",
    "Timestamp": "2023-04-29T16:06:25",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I have two other posts on multiple GET methods, one for ASP.NET 5 Web Api, and another for Web Api 2.\nIt seems that every version of Web API changes how it handles default routes or route prefixes or whatever the next name will be.",
    "Confidence": 0.9889638
  },
  {
    "Title": "Simple Deserialization of JSON from a File in C# | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/02/simple-deserialization-of-json-from-a-file-in-c/",
    "Timestamp": "2023-04-29T16:06:25",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This is one of those posts that I write for my future self. Here's how to deserialize JSON from a file in C#. It also lists multiple ways to create the C# model from the JSON.",
    "Confidence": 0.99842644
  },
  {
    "Title": "Skipping ActionFilters in ASP.NET MVC | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2014/01/skipping-actionfilters-in-asp-net-mvc/",
    "Timestamp": "2023-04-29T16:06:24",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nIn the previous post I showed how you can use an action filter to execute code both before and after an action method and how to apply the filter globally.",
    "Confidence": 0.99630284
  },
  {
    "Title": "AWS .NET Tools and Templates for Command Line | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/11/aws-dotnet-tools-and-templates-for-command-line/",
    "Timestamp": "2023-04-29T16:06:24",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you are developing .NET applications for AWS there are many command line, and `dotnet` tools and templates that will help you. Here is a brief list, with install instructions.",
    "Confidence": 0.984835
  },
  {
    "Title": "Polly and Blazor, Part 3 - Dependency Injection | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/01/polly-and-blazor-part-3-dependency-injection/",
    "Timestamp": "2023-04-29T16:06:23",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Using Polly with Blazor is simple, as I've shown in the previous two posts. In this, I will define the Wait and Retry Policy in the `Startup`, add it to the service collection and use dependency injection to pass it into the Razor page.",
    "Confidence": 0.9980187
  },
  {
    "Title": "Adaptive/dynamic page numbering in c# | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2013/08/adaptive-dynamic-page-numbering-in-c/",
    "Timestamp": "2023-04-29T16:06:22",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you need to show many results (tens, hundreds or thousands), in a paged manner, you won’t want to display links to all those pages. I looked online for some c# that would adapt the number of page links shown to with the number of pages returned, but found nothing.",
    "Confidence": 0.99446344
  },
  {
    "Title": "Getting Started with Elasticsearch, Part 3 - Deploying to AWS with Pulumi | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/10/getting-started-with-elasticsearch-part-3-deploying-to-aws-with-pulumi/",
    "Timestamp": "2023-04-29T16:06:22",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nThis is part 3 of my short introduction to Elasticsearch. In the first part I showed how to create an Elasticsearch index, mapping, and seeded it with data.",
    "Confidence": 0.98929596
  },
  {
    "Title": "dotnet new failing with Error: Invalid parameter(s) | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/04/dotnet-new-failing-with-error-invalid-parameters/",
    "Timestamp": "2023-04-29T16:06:21",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you are using Visual Studio Code and you want to add a new project to your workspace, the easiest thing to do is something like -\ndotnet new xunit -f netcoreapp2.",
    "Confidence": 0.99332565
  },
  {
    "Title": "Dependency Injection of an Entity Framework Context within Program.cs Using Top Level Statements | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/09/dependency-injection-of-an-entity-framework-context-within-program-cs-using-top-level-statements/",
    "Timestamp": "2023-04-29T16:06:21",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I have been a fan of Entity Framework for many years, and have relied on using the context within the `Configure(..)` method in Startup.cs, but that is not available when using top-level statements. This post shows how to use the context within `Program.cs`.",
    "Confidence": 0.99570435
  },
  {
    "Title": "DynamoDb, Reading and Writing Data with .Net Core - Part 1 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/07/dynamodb-reading-and-writing-data-with-net-core-part-1/",
    "Timestamp": "2023-04-29T16:06:19",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nA few weeks ago I started playing with DynamoDb in a .NET application. I read through the AWS documentation but felt it was incomplete and a little out of date.",
    "Confidence": 0.9992354
  },
  {
    "Title": "A Few Ways of Pattern Matching with C# | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/11/a-few-ways-of-pattern-matching-with-c/",
    "Timestamp": "2023-04-29T16:06:18",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "A follow up on an earlier post showing a few different ways to use pattern matching.",
    "Confidence": 0.997424
  },
  {
    "Title": "Finding and Killing .NET Processes that you Disconnect from Instead of Stopping while Debugging on Windows | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/01/finding-and-killing-net-processes-that-you-disconnect-from-instead-of-stopping-while-debugging-on-windows/",
    "Timestamp": "2023-04-29T16:06:17",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Sometimes I accidentally \"Disconnect\" from a debug session instead of \"Stopping\" it. When this happens you leave behind a running process, holding on to files and preventing your starting a new debug session. Sometimes it also holds onto a port. Here I show how I find these processes and stop them.",
    "Confidence": 0.9864219
  },
  {
    "Title": "Simmy Chaos Engine for .NET – Part 6, Configuring Policies Dynamically | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/12/simmy-chaos-engine-for-net-part-6-configuring-policies-dynamically/",
    "Timestamp": "2023-04-29T16:06:16",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nSimmy chaos policies have configurable options, via these options the polices can be turned on or off, have the rate at which they fire set, and in the case of the latency policy, the injected delay.",
    "Confidence": 0.997449
  },
  {
    "Title": "Using an mdf file database with Entity Framework Core 2 in Visual Studio 2017 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/02/using-an-mdf-file-database-with-entity-framework-core-2-in-visual-studio-2017/",
    "Timestamp": "2023-04-29T16:06:16",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIf you want to play around with Entity Framework it can be a little frustrating to create a complex database with a lot of sample data.",
    "Confidence": 0.9997323
  },
  {
    "Title": "C# and AWS Lambdas, Part 4 – Storing the Zip in S3, Setup with Pulumi IaC | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/03/c-and-aws-lambdas-part-4-storing-the-zip-in-s3-setup-with-pulumi-iac/",
    "Timestamp": "2023-04-29T16:06:14",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In the previous post, I showed how to use Pulumi to create a Lambda, API gateway and upload a zip of Web API application directly to the Lambda.\n\nIn the post I'm going to use S3 to store the zip of a simple .NET application (not a Web API app) and point the Lambda at it, bringing all the resources up using Pulumi. One drawback of using S3 to store the zip for a Lambda is that when you update the zip in S3, AWS doesn't deploy the new zip to the Lambda, but I will show a way of handling that in the next blog post. ",
    "Confidence": 0.99691224
  },
  {
    "Title": "Unit Testing .NET Core 2 Web Api | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/09/unit-testing-net-core-2-web-api/",
    "Timestamp": "2023-04-29T16:06:13",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nUnit testing Web API controllers in .NET Core 2 is very easy.\nI have very simple GET and POST methods.\n1[Route(\"api/[controller]\")] 2public class ValuesController : Controller 3{ 4[HttpGet] 5 public async Task<IActionResult> Get() 6 { 7 // imagine some db logic 8 List<string> values = new List<string>() { \"value1\", \"value2\" }; 9 return Ok(values); 10 } 1112[HttpPost] 13 public async Task<IActionResult> Post([FromBody]string value) 14 { 15 // imagine some db logic 16 return Created(\"\", value); 17 } 18} Add an xUnit Test Project to your solution.",
    "Confidence": 0.9957404
  },
  {
    "Title": "Accessing AWS Secrets Manager from .NET Lambda Functions, Part 4 - Connected to a VPC, and using a NAT Gateway | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/06/accessing-aws-secrets-manager-from-net-lambda-functions-part-4-connected-to-a-vpc-and-using-a-nat-gateway/",
    "Timestamp": "2023-04-29T16:06:13",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In a previous post, I showed how to use a VPC Endpoint to give a Lambda function (which is connected to the VPC) access to Secrets Manager. In this post, I will show how to use a NAT Gateway to give a Lambda function access to Secrets Manager and the internet.",
    "Confidence": 0.998105
  },
  {
    "Title": "Ignoring JSON Key Casing and Numbers as Strings when Deserializing with System.Text.Json | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/04/ignoring-json-key-casing-and-numbers-as-strings-when-deserializing-with-system-text-json/",
    "Timestamp": "2023-04-29T16:06:13",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "When deserializing JSON from a console application or library, you have to handle unusual casing of JSON key names, and numbers represented as strings yourself. This is done with a couple of serialization options.",
    "Confidence": 0.99007136
  },
  {
    "Title": "Reusing Polly Policies with Dependency Injection | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/03/reusing-polly-policies-with-dependency-injection/",
    "Timestamp": "2023-04-29T16:06:13",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Download full source code.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nIn my previous post “A simple Polly example with WebApi 2” I showed how to make a request to an unreliable endpoint protected by a Polly retry policy.",
    "Confidence": 0.9954686
  },
  {
    "Title": "Locating and checking an executing DLL on a running web server or other application | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/09/locating-and-checking-an-executing-dll-on-a-running-web-server-or-other-application/",
    "Timestamp": "2023-04-29T16:06:12",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Edit - even though the steps described below related to an example with IIS, you can use this technique for any running process, it’s just a matter of identifying the process id.",
    "Confidence": 0.99346393
  },
  {
    "Title": "AutoMapper, ProjectTo() – Static Version | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/04/automapper-projectto-static-version/",
    "Timestamp": "2023-04-29T16:06:12",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nI’ve been using AutoMapper for quite a few years, but one of the features that I like the most is the ProjectTo method. When using Entity Framework it lets me reduce the number of fields I query from the database to match the model I want to return to the caller.",
    "Confidence": 0.9937843
  },
  {
    "Title": "Hugo Aliases Workaround with Netlify | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/06/hugo-aliases-workaround-with-netlify/",
    "Timestamp": "2023-04-29T16:06:11",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I love using Hugo and Netlify for my blog, but one thing I have not been able to get working is aliases, it might be because of a custom permalink I'm using, my slugs, or something else, but here is a workaround.",
    "Confidence": 0.97086257
  },
  {
    "Title": "Arguments model and action methods in ASP.NET MVC Part 2 - using Glimpse | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2013/11/arguments-model-and-action-methods-in-asp-net-mvc-part-2-using-glimpse/",
    "Timestamp": "2023-04-29T16:06:10",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In my previous post I discussed how values sent from the browser are bound to objects in the action methods of a controller.\nIf binding is not working as expected you need to examine the html element names and the types you are binding to, I showed how the FormCollection can be of help in this regard.",
    "Confidence": 0.9392626
  },
  {
    "Title": "Workaround for \"Failed to create template\" Error with .NET 7 RC1 and Lambda Functions | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/09/workaround-for-failed-to-create-template-error-with-net-7-rc1-and-lambda-functions/",
    "Timestamp": "2023-04-29T16:06:10",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you are Amazon.Lambda.Templates, version 6.3.0 or earlier with .NET 7 RC 1, you may get an error when creating new project templates. Read on for a fix or a workaround.",
    "Confidence": 0.998984
  },
  {
    "Title": "Polly Retry with Lambda Discards | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/10/polly-retry-with-lambda-discards/",
    "Timestamp": "2023-04-29T16:06:09",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Very quick post on using Lambda discards with Polly retries, includes an example with the HttpClientHandler too.",
    "Confidence": 0.9931821
  },
  {
    "Title": "Entity Framework, checking the connection string of your context | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/04/entity-framework-checking-the-connection-string-of-your-context/",
    "Timestamp": "2023-04-29T16:06:06",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Sometimes when using Entity Framework I want to verify that I’m connected to the database I think I’m connected to.\nHere’s how to check in Entity Framework 5, Entity Framework 6 and Entity Framework Core 1 (EF 7)",
    "Confidence": 0.99164575
  },
  {
    "Title": "GitHub Actions with .NET, Part 5 - Build a .NET Application and Upload to S3 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/06/github-actions-with-net-part-5-build-a-net-application-and-upload-to-s3/",
    "Timestamp": "2023-04-29T16:06:06",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In the previous post I used GitHub Actions and Pulumi to create an S3 bucket. This post shows how to build a .Net 5 application and upload the zip to the S3 bucket.",
    "Confidence": 0.99460655
  },
  {
    "Title": "Using Build and Test Tasks from the Parent Directory of src/test with VS Code | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/07/using-build-and-test-tasks-from-the-parent-directory-of-src-test-with-vs-code/",
    "Timestamp": "2023-04-29T16:06:05",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I often follow the src, test directory structure for my .NET projects. But if you open Visual Studio Code to the parent of these directories, you can't use the build and test tasks without some modifications to the tasks.json file.",
    "Confidence": 0.9836461
  },
  {
    "Title": "Using Amazon Polly to read a Dialogue from Julius Caesar | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/01/using-amazon-polly-to-read-a-dialogue-from-julius-caesar/",
    "Timestamp": "2023-04-29T16:06:05",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Amazon Polly can convert text to speech in a variety of voices. In this post, I'll use it to read a file containing a dialogue from the play Julius Caesar where Cassius and Brutus discuss Caesar, using a different voice for each speaker.",
    "Confidence": 0.9986452
  },
  {
    "Title": "Programmatically get your AWS Account ID with .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/03/programmatically-get-your-aws-account-id-with-net/",
    "Timestamp": "2023-04-29T16:06:05",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "It took me a little while to figure this out, so I thought I'd share.",
    "Confidence": 0.9838736
  },
  {
    "Title": "Altering the ASP NET MVC model with an ActionFilter | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2014/01/altering-the-asp-net-mvc-model-with-an-actionfilter/",
    "Timestamp": "2023-04-29T16:06:03",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nAction filters are executed before and/or after the execution of an action method, they can be used to modify how an action executes or to perform a separate task, such as authorization or logging.",
    "Confidence": 0.9974729
  },
  {
    "Title": "Getting Started with Elasticsearch, Part 2 - Searching with a HttpClient | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/09/getting-started-with-elasticsearch-part-2-searching-with-a-httpclient/",
    "Timestamp": "2023-04-29T16:06:03",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIn the previous blog post I showed how to setup Elasticsearch, create and index and seed the index with some sample documents. That is not a lot of use without the ability to search it.",
    "Confidence": 0.99787
  },
  {
    "Title": "Executing a Method on All Implementations of an Interface | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/06/executing-a-method-on-all-implementations-of-an-interface/",
    "Timestamp": "2023-04-29T16:06:03",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nHave you ever wanted to execute a method on all implementations of an interface? Say you have an interface called IGenerator and four implementations of it – GeneratorA, GeneratorB, GeneratorC, and GeneratorD.",
    "Confidence": 0.99005413
  },
  {
    "Title": "ASP.MVC and Web Forms in one web application | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2013/10/asp-mvc-and-web-forms-in-one-web-application/",
    "Timestamp": "2023-04-29T16:06:02",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I was recently asked to add an ASP.NET MVC 4 application to an existing Web Forms site. The ideal solution was to keep the code bases separate and the apps on a common domain.",
    "Confidence": 0.9931116
  },
  {
    "Title": "Unit testing Entity Framework Core Stored Procedures | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/11/unit-testing-entity-framework-core-stored-procedures/",
    "Timestamp": "2023-04-29T16:06:02",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nEntity Framework Core has made unit testing CRUD functions much easier, see here for an example of using the In Memory Database, it allows you to search, add, remove and update rows.",
    "Confidence": 0.997957
  },
  {
    "Title": "Entity Framework Core and calling a stored procedure | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/07/entity-framework-core-and-calling-a-stored-procedure/",
    "Timestamp": "2023-04-29T16:06:02",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Download full source code here.\nI thought this would be easy, there is a method called ExecuteSqlCommand which takes the stored proc name and an array of parameters. I wanted to pass in two parameters and get one back, no problem, I’ve done this with ADO.",
    "Confidence": 0.9932918
  },
  {
    "Title": "Value cannot be null. Parameter name: constructor | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/09/value-cannot-be-null-parameter-name-constructor/",
    "Timestamp": "2023-04-29T16:06:01",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Using Entity Framework I occasionally get the following error when reading from the database - `exceptionMessage=Value cannot be null. Parameter name: constructor`\nMy Person class looked like this -\n1 public class Person 2 { 3 public Person(string firstname, string lastname) 4 { 5 Firstname = firstname; 6 Lastname = lastname; 7 } 8 9 public Guid PersonId { get; set; } 10 public string Firstname { get; set; } 11 public string Lastname { get; set; } 12 public DateTime SomeDate { get; set; } 13 } There is no way for Entity Framework to know how to instantiate this object because there is no empty constructor.",
    "Confidence": 0.9805454
  },
  {
    "Title": "Dynamically Updating the Request Header of a HttpClientFactory Generated HttpClient, Part 2 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/12/dynamically-updating-the-request-header-of-a-httpclientfactory-generated-httpclient-part-2/",
    "Timestamp": "2023-04-29T16:06:00",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nThis is a alternative to the approach described in a previous post.\nOn a slack channel there was some discussion around the use of a little known extension method on HttpClientBuilder, ConfigureHttpClient.",
    "Confidence": 0.9975752
  },
  {
    "Title": "Using Versions and Aliases to Pre-Warm Lambda Execution Environments when Handling Bursts of Traffic | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/12/using-versions-and-aliases-to-pre-warm-lambda-execution-environments-when-handling-bursts-of-traffic/",
    "Timestamp": "2023-04-29T16:05:59",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In two recent posts I showed how to warm up execution environments for your Lambda functions so you can avoid the cold start penalty when you have a burst of traffic. In this post I'll show how to use Lambda versions and aliases to make this process easier.",
    "Confidence": 0.98207664
  },
  {
    "Title": "GitHub Actions with .NET, Part 4 - Building an S3 bucket with Pulumi | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/06/github-actions-with-net-part-4-building-an-s3-bucket-with-pulumi/",
    "Timestamp": "2023-04-29T16:05:58",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "With GitHub Actions, C#, and Pulumi it is easy to create an AWS S3 bucket, here's how.",
    "Confidence": 0.9953503
  },
  {
    "Title": "Fluent Validation in ASP.NET Core 3.1 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/02/fluent-validation-in-asp-net-core-3-1/",
    "Timestamp": "2023-04-29T16:05:58",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nThis is an update to a post I wrote in 2017 talking about Fluent Validation in ASP.NET Core.\nThe example is the same but there has been few updates.",
    "Confidence": 0.99395066
  },
  {
    "Title": "C# and AWS Lambdas, Part 7 – .NET 5 Web API inside a Container inside a Lambda, with API Gateway in front | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/03/c-and-aws-lambdas-part-7-net-5-web-api-inside-a-container-inside-a-lambda-with-api-gateway-in-front/",
    "Timestamp": "2023-04-29T16:05:57",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In my previous post I showed how to build a .NET 5 library inside a docker image and deploy it to an AWS Lambda. This post is a small extension on that.\nI'm going to build a .NET 5 Web API application, turn it into a docker image, deploy it to an AWS Lambda, and connect an API Gateway to the Lambda to call the controller inside the application, inside the container, inside the Lambda! ",
    "Confidence": 0.9989022
  },
  {
    "Title": "Ordering of two Blog Posts on the Same Day with Hugo | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/01/ordering-two-blog-posts-published-on-the-same-day-with-hugo/",
    "Timestamp": "2023-04-29T16:05:57",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "There have been a few times when I wanted to publish two blog posts on the same day, but I wanted to be sure of the order they would appear in.",
    "Confidence": 0.9506773
  },
  {
    "Title": "Making a column sparse with Entity Framework Migrations | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2014/07/making-a-column-sparse-with-entity-framework-migrations/",
    "Timestamp": "2023-04-29T16:05:56",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I have a database built off code first models, but I want to set some of the columns to sparse. There isn’t a way to this with the fluent api or through annotations.",
    "Confidence": 0.9948889
  },
  {
    "Title": "Using the Polly Timeout when making a Http Request | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/12/using-the-polly-timeout-when-making-a-http-request/",
    "Timestamp": "2023-04-29T16:05:55",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nWhen making remote service requests the remote side will sometimes take longer than acceptable to respond.",
    "Confidence": 0.97030026
  },
  {
    "Title": "Finding the Location of a Running Assembly in .Net | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2015/05/finding-the-location-of-a-running-assembly-in-net/",
    "Timestamp": "2023-04-29T16:05:54",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "For many reasons you might want to know where a running assembly is located on your filesystem.\nI had to do this once when I was compiling classes at runtime and had a dependency on EntityFramework.",
    "Confidence": 0.9685519
  },
  {
    "Title": "ASP.NET 5 Web Api Controller with multiple get methods | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/01/asp-net-5-web-api-controller-with-multiple-get-methods/",
    "Timestamp": "2023-04-29T16:05:54",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I have two other posts on multiple GET methods, both for Web Api 2.\n  the first shows how to use routes like http://…/api/values/geta.\n  the second shows http://…/api/values/22 or http://…/api/values/AAC1FB7B-978B-4C39-A90D-271A031BFE5D.",
    "Confidence": 0.994579
  },
  {
    "Title": "Arguments model and action methods in ASP.NET MVC Part 1 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2013/10/arguments-model-and-action-methods-in-asp-net-mvc-part-1/",
    "Timestamp": "2023-04-29T16:05:53",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Sending values from an MVC view to a controller works very well when you are binding back to the same model/viewmodel you populated the view with. But when you start trying to do something a little different, it’s not so obvious or straightforward.",
    "Confidence": 0.991725
  },
  {
    "Title": "A Web Server that Echoes Requests and Sometimes Faults with a 500 Error | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/12/a-web-server-that-echoes-requests-and-sometimes-faults-with-a-500-error/",
    "Timestamp": "2023-04-29T16:05:53",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I sometimes want to test how an application will handle errors when calling a web service. To do this, I built a simple echo server that responds to any HTTP verb on any URL. Some percentage of the time, the server will return 500 errors. It uses the Simmy package to achieve this.",
    "Confidence": 0.99913615
  },
  {
    "Title": "re:Invent Session on Refactoring",
    "Url": "https://basementprogrammer.hashnode.dev/reinvent-session-on-refactoring",
    "Timestamp": "2023-04-29T16:05:52",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "Yesterday I had the honor and privilege of sharing the re:Invent stage once again with my good friend and colleague Runeet Vashisht for our session “Refactoring strategies for .NET applications as you migrate to the cloud” In this session, we were co...",
    "Confidence": 0.9919667
  },
  {
    "Title": "How to use HttpClientFactory Inside Program.cs | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/12/how-to-use-httpclientfactory-inside-program-cs/",
    "Timestamp": "2023-04-29T16:05:52",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nOver the past week I have written a few articles about HttpClientFactory and dependency injection in .NET Core 2.1. There is one scenario I didn’t deal with - calling a HttpClient from inside the Main method in Program.",
    "Confidence": 0.99916035
  },
  {
    "Title": ".NET 6 Web API in a Container in a Lambda | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/01/net-6-web-api-in-a-container-in-a-lambda/",
    "Timestamp": "2023-04-29T16:05:50",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "With the AWS tools and templates for Lambdas it is very easy to build and deploy a .NET 6 Web API application as a container image.",
    "Confidence": 0.9892612
  },
  {
    "Title": "Letting a request fail with Polly | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/04/letting-a-request-fail-with-polly/",
    "Timestamp": "2023-04-29T16:05:49",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Want to learn more about Polly? Check out my Pluralsight course on it.\nPolly is fantastic for transparently retrying a request but there is always a point at which you must give up.",
    "Confidence": 0.99160784
  },
  {
    "Title": "Finding and Killing .NET Processes that you Disconnect from Instead of Stopping while Debugging on Linux | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/01/finding-and-killing-net-processes-that-you-disconnect-from-instead-of-stopping-while-debugging-on-linux/",
    "Timestamp": "2023-04-29T16:05:48",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Sometimes I accidentally \"Disconnect\" from a debug session instead of \"Stopping\" it. When this happens you leave behind a running process, holding on to files and preventing your starting a new debug session. Sometimes it also holds onto a port. Here I show how I find these processes and stop them.",
    "Confidence": 0.9934152
  },
  {
    "Title": "Using .NET 7 With Code Build",
    "Url": "https://basementprogrammer.hashnode.dev/using-net-7-with-code-build",
    "Timestamp": "2023-04-29T16:05:48",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "Introduction\nAWS CodeBuild is one of AWS’s core development services for creating CI/CD Pipelines. CodeBuild is a fully managed service that helps developers to create automated builds of their development projects. With CodeBuild there is no develop...",
    "Confidence": 0.9993688
  },
  {
    "Title": "GitHub Actions with .NET, Part 1 - Hello World and Downloading the Artifact | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/04/github-actions-with-net-part-1-hello-world-and-downloading-the-artifact/",
    "Timestamp": "2023-04-29T16:05:48",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This is the first of a few posts on GitHub Actions. This first will be fairly basic, compile a Hello World application, zip up the binaries, and make them available to download.\nIn future posts, I'll show how to add approvals and deploying to AWS, but for now, simple is best. ",
    "Confidence": 0.99108547
  },
  {
    "Title": "Hosting a .NET Core 2 Kestrel Server in a Windows Service | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/04/hosting-a-net-core-2-kestrel-server-in-a-windows-service/",
    "Timestamp": "2023-04-29T16:05:48",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIf you have been using the Kestrel web server with Framework 4.x, you might already be hosting Kestrel inside a Windows service. But what if you want to use Kestrel with .",
    "Confidence": 0.9953654
  },
  {
    "Title": "Using Multiple SSH Keys at the same time - GitHub, BitBucket, etc. | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/02/using-multiple-ssh-keys-at-the-same-time/",
    "Timestamp": "2023-04-29T16:05:47",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This is mostly a reminder to myself on how to store multiple SSH keys in my .ssh directory.",
    "Confidence": 0.99647087
  },
  {
    "Title": "AutoMapper, ProjectTo() – Instance Version | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/05/automapper-projectto-instance-version/",
    "Timestamp": "2023-04-29T16:05:47",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIn my previous post I showed how to use the wonderful AutoMapper ProjectTo() feature, the demo code shown worked with AutoMapper up to v8.1.1. It looked like this –",
    "Confidence": 0.99903244
  },
  {
    "Title": "Paging Through Files in an S3 Bucket with .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/07/paging-through-files-in-an-s3-bucket-with-net/",
    "Timestamp": "2023-04-29T16:05:46",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Here are two ways to page through files in an S3 bucket.",
    "Confidence": 0.9938029
  },
  {
    "Title": "Polly with .NET 6, Part 5 - Using a Cancellation Token | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/05/polly-with-net-6-part-5-using-a-cancellation-token/",
    "Timestamp": "2023-04-29T16:05:46",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Even when using Polly retries, there are times when you just want to give. The cancellation token is a great way to do this.",
    "Confidence": 0.96926117
  },
  {
    "Title": "Polly, HttpClientFactory and the Policy Registry - choosing the right policy based on the HTTP request | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/07/polly-httpclientfactory-and-the-policy-registry-choosing-the-right-policy-based-on-the-http-request/",
    "Timestamp": "2023-04-29T16:05:45",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nThe release of .NET Core 2.1 has made using HttpClient much easier. If you have been using HttpClient for a while you will know about its limitations around reuse and DNS expiry, I wrote about this some time ago.",
    "Confidence": 0.99817836
  },
  {
    "Title": "Removing Manually Installed .NET SDKs from Linux | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/02/removing-manually-installed-net-sdks-from-linux/",
    "Timestamp": "2023-04-29T16:05:42",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "For years I've been manually installing the .NET SDK on Linux. There is no automated way to remove them, but deleting everything and starting clean is very easy.",
    "Confidence": 0.9625918
  },
  {
    "Title": "Support this site | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/support/",
    "Timestamp": "2023-04-29T16:05:42",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you found this blog or podcast useful, please help support it by buying me a coffee or by using this Amazon referrer link when you buy items from Amazon. Using this link does not affect the price of the items.",
    "Confidence": 0.8238483
  },
  {
    "Title": "The terminal shell path \"dotnet\" is a directory - Visual Studio Code | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/02/the-terminal-shell-path-dotnet-is-a-directory-visual-studio-code/",
    "Timestamp": "2023-04-29T16:05:42",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I have been using Visual Studio Code in Ubuntu Linux for a while, but it was not an easy process to get it working the first time.\nI just got around to installing .",
    "Confidence": 0.9888959
  },
  {
    "Title": "Streaming your IoT Data to DynamoDB",
    "Url": "https://basementprogrammer.hashnode.dev/streaming-your-iot-data-to-dynamodb",
    "Timestamp": "2023-04-29T16:05:39",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "Setting up your \"Thing\" in the AWS Console.\nThis post is the third in my series IoT for the .NET Developer. You can find the companion video for this blog post here: Sending IoT Data to AWS IoT Core using .NET - YouTube.\nIn the last post in this seri...",
    "Confidence": 0.99576426
  },
  {
    "Title": "Building .NET 7 Applications using Amazon CodeCatalyst",
    "Url": "https://basementprogrammer.hashnode.dev/building-net-7-applications-using-amazon-codecatalyst",
    "Timestamp": "2023-04-29T16:05:38",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "This past re:Invent AWS Launched Amazon CodeCatalyst the new All-In-One DevOps service. CodeCatalyst provides you with a single pane of glass to source control management, handling pull requests, issue management and software builds.\nCodeCatalyst use...",
    "Confidence": 0.99773496
  },
  {
    "Title": "Polly, HttpClientFactory and the Policy Registry in a console application | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/07/polly-httpclientfactory-and-the-policy-registry-in-a-console-application/",
    "Timestamp": "2023-04-29T16:05:38",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nHow to use the HttpClientFactory with a console application is not immediately obvious.",
    "Confidence": 0.99622345
  },
  {
    "Title": "Keeping your .NET Lambda Function Warm with Provisioned Concurrency | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/11/keeping-your-net-lambda-function-warm-with-provisioned-concurrency/",
    "Timestamp": "2023-04-29T16:05:38",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Cold starts with .NET AWS Lambda functions are a concern for some, but provisioned concurrency provides a simple and cost-effective way to keep your Lambda function warm.",
    "Confidence": 0.9964459
  },
  {
    "Title": "Indexing the Works of Shakespeare in Elasticsearch - Part 2, Bulk Indexing | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/11/indexing-the-works-of-shakespeare-in-elasticsearch-part-2-bulk-indexing/",
    "Timestamp": "2023-04-29T16:05:38",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "With Elasticsearch, indexing data in bulk is a more reliable and scalable approach than indexing a high volume of documents one at time. Here is how to achieve this with AWS Kinesis and a Lambda.",
    "Confidence": 0.9966239
  },
  {
    "Title": "Opening new PowerShell Windows from PowerShell and Running Commands in them | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/03/opening-new-powershell-windows-from-powershell-and-running-commands-in-them/",
    "Timestamp": "2023-04-29T16:05:37",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Opening a new PowerShell window from an open one and running a command inside it was not as simple to figure out as I expected.",
    "Confidence": 0.9687675
  },
  {
    "Title": ".NET 6 Custom Runtime for AWS Lambda | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/11/dotnet-6-custom-runtime-for-aws-lambda/",
    "Timestamp": "2023-04-29T16:05:36",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "You can't yet run .NET 6 on AWS Lambda with the familiar managed runtime, but you can with a custom runtime. Here are the few small steps you need.",
    "Confidence": 0.9970721
  },
  {
    "Title": "Mass Transit with RabbitMQ Hello World | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2015/04/mass-transit-with-rabbitmq-hello-world/",
    "Timestamp": "2023-04-29T16:05:35",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code is available here.\nBelow is an example of how to use RabbitMQ with Mass Transit service bus.\nSee here for instructions on how to install Rabbit MQ.",
    "Confidence": 0.99675673
  },
  {
    "Title": "An exception of type 'System.MissingMethodException' occurred in System.Collections.Concurrent.dll | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/03/an-exception-of-type-system-missingmethodexception-occurred-in-system-collections-concurrent-dll/",
    "Timestamp": "2023-04-29T16:05:35",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I left out version number in a package reference and got the exception - Exception has occurred: CLR/System.MissingMethodException An exception of type 'System.MissingMethodException' occurred in System.Collections.Concurrent.dll but was not handled in user code: 'Method not found: 'System.IServiceProvider.",
    "Confidence": 0.99182606
  },
  {
    "Title": "Working with Lambda function versions | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/08/working-with-lambda-function-versions/",
    "Timestamp": "2023-04-29T16:05:35",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you want to experiment with code variations for a Lambda function, try Lambda versions. In this post, you'll see how to deploy a stable and experimental version of the same function.",
    "Confidence": 0.9974858
  },
  {
    "Title": "Indexing the Works of Shakespeare in Elasticsearch – Part 4, Searching via Web API in .NET 5 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/12/indexing-the-works-of-shakespeare-in-elasticsearch-part-4-searching-via-web-api-in-net-5/",
    "Timestamp": "2023-04-29T16:05:34",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This is part four of my four-part series on indexing the works of Shakespeare in Elasticsearch.\n\nIn this, I'll show how to use the Elasticsearch \"low level client\" to perform the search. Previously, I wrote a [blog showing how to use a HttpClient](/2020/09/getting-started-with-elasticsearch-part-2-searching-with-a-httpclient/) to perform the search using Json, and this works fine, but Steve Gordon suggested I try the Elastic client as it supports things like connection pooling and still lets me use Json directly with Elasticsearch.",
    "Confidence": 0.9951422
  },
  {
    "Title": "Wowchemy, Changing from /post to /blog for Posts | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/02/wowchemy-changing-from-post-to-blog-for-posts/",
    "Timestamp": "2023-04-29T16:05:33",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "By default, Wowchemy publishes blog posts to a /post path, if you want to change this to /blog or something else there are a few small changes needed. ",
    "Confidence": 0.97369987
  },
  {
    "Title": "Error converting the Lambda event JSON payload to type System.String | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/06/error-converting-the-lambda-event-json-payload-to-type-system-string/",
    "Timestamp": "2023-04-29T16:05:31",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you are getting this - \"Error converting the Lambda event JSON payload to type System.String\", you might need to serialize the payload you are sending. Read on to see how.",
    "Confidence": 0.9805305
  },
  {
    "Title": "Streaming Results from Entity Framework Core and Web API Core | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/06/streaming-results-from-entity-framework-core-and-web-api-core/",
    "Timestamp": "2023-04-29T16:05:30",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here. The code provided will not compile until you make a change in seeder.cs, the way it’s written it generates 500,000 rows in a local db. Set this to whatever value you want.",
    "Confidence": 0.99398386
  },
  {
    "Title": "Unit Testing a Method That Uses HttpClient | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/12/unit-testing-a-method-that-uses-httpclient/",
    "Timestamp": "2023-04-29T16:05:29",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIn this post I’m going to show you how to test an action method of controller that uses a HttpClient. When performing this test you want to isolate just the code of the action method for testing, you want to remove the dependency on the HttpClient.",
    "Confidence": 0.99562323
  },
  {
    "Title": "Entity Framework non null foreign key migration | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2015/04/entity-framework-non-null-foreign-key-migration/",
    "Timestamp": "2023-04-29T16:05:28",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code is provided.\nOverview This post gives a quick overview of how to use Entity Framework migrations and a detailed example of how to handle the addition of a new non null foreign keyed column to an existing table with data in it.",
    "Confidence": 0.9944126
  },
  {
    "Title": "Using MediatR with API Endpoints | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/10/using-mediatr-with-api-endpoints/",
    "Timestamp": "2023-04-29T16:05:28",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "The mediator pattern is very helpful for keeping business logic out of your API endpoints. This post provides a simple example of this with the MediatR library.",
    "Confidence": 0.9983877
  },
  {
    "Title": "Multiple Get Methods with the Action Method Selector Attribute in .NET Core  | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/08/multiple-get-methods-with-the-action-method-selector-attribute-in-net-core/",
    "Timestamp": "2023-04-29T16:05:28",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIn .Net Core Web Api it is not possible for the routing mechanism to distinguish between the following action methods.\npublic string GetSomething(int id, int something) and public string GetAnother(int id, int another)",
    "Confidence": 0.9933239
  },
  {
    "Title": "Lambda ARM64 Custom Runtime with .NET 6 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/12/lambda-arm64-custom-runtime-with-net-6/",
    "Timestamp": "2023-04-29T16:05:27",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Want to run a .NET 6 Lambda on ARM64?",
    "Confidence": 0.9951266
  },
  {
    "Title": "CastleWindsor chained dependency | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2014/09/castlewindsor-chained-dependency/",
    "Timestamp": "2023-04-29T16:05:27",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Source code is available here.\nI recently had a problem where I wanted an MVC controller to use constructor injection of specified dependency and have that dependency load another specified dependency using Windsor.",
    "Confidence": 0.99198914
  },
  {
    "Title": "Deserializing to an enum | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2013/12/deserializing-to-an-enum/",
    "Timestamp": "2023-04-29T16:05:27",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I have an application where I deserialize an xml stream from a third party. One of the fields is a task code which can be one of only three values, insert, update and delete.",
    "Confidence": 0.9933756
  },
  {
    "Title": "Why I blog | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/whyiblog/",
    "Timestamp": "2023-04-29T16:05:24",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I’ve been developing software for some years and found that simple usually beats complicated and pragmatic choices beat dogmatic ones. In this blog, I want to share some useful pieces of code and ideas.",
    "Confidence": 0.96439177
  },
  {
    "Title": "C# and AWS Lambdas, Part 1 - Hello World | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/02/c-and-aws-lambdas-part-1-hello-world/",
    "Timestamp": "2023-04-29T16:05:24",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "First in a series of posts on using .NET with AWS Lambdas. It will start with the simplest example that converts a lowercase string to an uppercase string, but by the end, you will be running a .NET Web API powered by Lambda, fronted by an API gateway where all the infrastructure is set up by Pulumi - this will take a few posts over the next while.",
    "Confidence": 0.9933331
  },
  {
    "Title": "Amazon CodeCatalyst Development Environments",
    "Url": "https://basementprogrammer.hashnode.dev/amazon-codecatalyst-development-environments",
    "Timestamp": "2023-04-29T16:05:24",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "If you are like me, you like to be able to write code anywhere. While I pretty much always have my laptop set up with development tools, I also have a bad habit of not pushing my changes when I get done. I then pull out a different device and get rea...",
    "Confidence": 0.99079525
  },
  {
    "Title": "Running SQL Server in a Container | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/08/running-sql-server-in-a-container/",
    "Timestamp": "2023-04-29T16:05:23",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Over the years I've hesitated to add SQL Server to my laptop because of its size, but now it's easy to run in inside a container with a single command.",
    "Confidence": 0.99714434
  },
  {
    "Title": "Registering Multiple Implementations of an Interface with Service Collection in ASP.NET Core | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/10/registering-multiple-implementations-of-an-interface-with-service-collection-in-asp-net-core/",
    "Timestamp": "2023-04-29T16:05:23",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nThis is a simplistic approach to the problem and assumes that the dependencies created by the factory do not in turn have their own dependencies. This deficiency could be mediated by passing those dependencies into the factory.",
    "Confidence": 0.9979874
  },
  {
    "Title": "Streaming Results from Entity Framework Core and Web API Core – Part 2 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/03/streaming-results-from-entity-framework-core-and-web-api-core-part-2/",
    "Timestamp": "2023-04-29T16:05:21",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nSome time ago I wrote a post showing how to stream results from Entity Framework over Web API. This approach a few benefits – the results would not be materialized in the API code, a small amount of memory would be used irrespective of the size of the data returned, the results would being steaming as soon as possible and the speed of the request was faster than doing something like .",
    "Confidence": 0.9979403
  },
  {
    "Title": "Using the HttpClientInterception to Test Methods That Use a HttpClient | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/01/using-the-httpclientinterception-to-test-methods-that-use-a-httpclient/",
    "Timestamp": "2023-04-29T16:05:20",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIn my previous post I showed a way of testing a controller that uses a HttpClient.\nI had to mock the HttpMessageHandler pass that to the HttpClient and set a bunch of properties.",
    "Confidence": 0.9959892
  },
  {
    "Title": "Extracting Form Fields from a Multi-Page PDF with Amazon Textract and .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/02/extracting-form-fields-from-a-multi-page-pdf-with-amazon-textract-and-net/",
    "Timestamp": "2023-04-29T16:05:19",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This post shows how to extract key-value pair from fields in a multi-page PDF with Textract.",
    "Confidence": 0.9975132
  },
  {
    "Title": "The type 'xxxx' is defined in an assembly that is not referenced. System.Runtime. | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/01/the-type-is-defined-in-an-assembly-that-is-not-referenced-system-runtime/",
    "Timestamp": "2023-04-29T16:05:19",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you recognize the error from the title of this post, you can jump to the solution.\nThe problem I have a ASP.NET 5 solution with two projects, a web application project and a class library project.",
    "Confidence": 0.98681355
  },
  {
    "Title": "How to Dependency Inject a Service from Startup back in Program | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/12/how-to-dependency-inject-a-service-from-startup-back-in-program/",
    "Timestamp": "2023-04-29T16:05:19",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWhile writing some recent blog posts on HttpClientFactory I had to work with some of the obscure features of ServiceCollection and dependency injection in .NET Core 2.",
    "Confidence": 0.9964664
  },
  {
    "Title": "Simple Func<T> and Func<T1, T2, TResult> Examples | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/04/simple-funct-and-funct1-t2-tresult-examples/",
    "Timestamp": "2023-04-29T16:05:19",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nAbout a month ago I wrote a post with a simple explanation of how to use methods that take Action or Action<T> as parameters. Actions themselves take 0 to 16 parameters and return nothing.",
    "Confidence": 0.9839691
  },
  {
    "Title": "How To Run .NET 6, Kestrel, and Web API, on an AWS EC2 Windows Instance | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/12/how-to-run-net-6-kestrel-and-web-api-on-an-aws-ec2-windows-instance/",
    "Timestamp": "2023-04-29T16:05:17",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "In this post I show how to get a .NET 6 Web API application up an running on a Windows instance in AWS, and how to make the instance accessible to the web.",
    "Confidence": 0.98539263
  },
  {
    "Title": "Requesting Data from two Data Stores in Parallel - Cache and Database | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/12/requesting-data-from-two-data-stores-in-parallel-cache-and-database/",
    "Timestamp": "2023-04-29T16:05:15",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "There are times when firing off the same query in parallel to two or more data stores is a good choice, keeping the first response, and canceling the other requests. Here I show how a achieve that even if the Task<> types are different.",
    "Confidence": 0.9995453
  },
  {
    "Title": "Using a Stream Extension Method to Read Directly from a Stream into a String | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/06/using-a-stream-extension-method-to-read-directly-from-a-stream-into-a-string/",
    "Timestamp": "2023-04-29T16:05:15",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I always forget how to read from a stream to a string, so I've create an extension method that does that and works with all stream types.",
    "Confidence": 0.99578303
  },
  {
    "Title": "Saving Enums with Entity Framework Core | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/09/saving-enums-with-entity-framework-core/",
    "Timestamp": "2023-04-29T16:05:14",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nA few years ago I wrote a post about saving enums to the database with Entity Framework. It was able to save the enum as a string to the database and when reading from the database it was able to take that string and populate the enum correctly.",
    "Confidence": 0.9965787
  },
  {
    "Title": "Blazor, Updating or Refreshing the Display During a Method Call | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/12/blazor-updating-or-refreshing-the-display-during-a-method-call/",
    "Timestamp": "2023-04-29T16:05:14",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "It is possible to refresh or update components on a Blazor page asynchronously in response to a task or tasks completing, here is an example.",
    "Confidence": 0.9977981
  },
  {
    "Title": "Zipping Files From the Command Line in Windows 10 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/08/zipping-files-from-command-line-with-windows-10/",
    "Timestamp": "2023-04-29T16:05:14",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "It is strangely difficult to zip files from the command line with Windows 10. I spent an hour going round in circles between what you should be able to and what you can actually do. Here is a simple solution...",
    "Confidence": 0.9889278
  },
  {
    "Title": "Lambda Function URLs - triggering .NET 6 Lambda functions with a HTTPS Request | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/04/lambda-function-urls-triggering-net-6-lambda-functions-with-a-https-request/",
    "Timestamp": "2023-04-29T16:05:14",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Lambda Function URLs are a very easy way to make a Lambda function executable via an HTTPS request, they deploy in seconds, and can scale to your needs.",
    "Confidence": 0.99305016
  },
  {
    "Title": "Redis in Web API | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/12/redis-in-web-api/",
    "Timestamp": "2023-04-29T16:05:12",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "A simple Web API application using Redis.",
    "Confidence": 0.99942905
  },
  {
    "Title": "Why you should use IDictionary, IList, etc | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/02/why-you-should-use-idictionary-ilist-etc/",
    "Timestamp": "2023-04-29T16:05:11",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Summary When returning objects from a method try to use IList, IDictionary, etc instead of List and Dictionary. This is especially important when the method is inside a class library which you distribute.",
    "Confidence": 0.994522
  },
  {
    "Title": "Accessing the Internet from VPC Connected Lambda Functions using a NAT Gateway | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/06/accessing-the-internet-from-vpc-connected-lambda-functions-using-a-nat-gateway/",
    "Timestamp": "2023-04-29T16:05:11",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "When a Lambda function is connected to a VPC, the function can no longer access the internet. One way to resolve this is to use a NAT gateway, read on to see how.",
    "Confidence": 0.99848545
  },
  {
    "Title": "Setting the Kestrel Port from appsettings.json | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/04/setting-the-kestrel-port-from-appsettings-json/",
    "Timestamp": "2023-04-29T16:05:11",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available CoreWithKestrelFromConfighere.\nIn my previous post I explained how to host Kestrel web server running on (the default) port 5000 as a Windows service. But what if you want to run the server on a different port?",
    "Confidence": 0.9991061
  },
  {
    "Title": "How To Run .NET 6, Kestrel, and Web API, on an AWS EC2 Linux Instance | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/12/how-to-run-net-6-kestrel-and-web-api-on-an-aws-ec2-linux-instance/",
    "Timestamp": "2023-04-29T16:05:10",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This post is very like the previous, getting a Web API application using .NET 6 and Kestrel up and running on an EC2 instance, but with Linux this time.",
    "Confidence": 0.9879324
  },
  {
    "Title": "Creating an Automation Document Using C# and CDK",
    "Url": "https://basementprogrammer.hashnode.dev/creating-an-automation-document-using-c-and-cdk",
    "Timestamp": "2023-04-29T16:05:10",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "Introduction\nWhen you are looking to deploy infrastructure into an AWS Account, one of the best practices is to use Infrastructure as Code (IaC). This is a recommended approach because it allows the process to be repeatable, and traceable. It also al...",
    "Confidence": 0.9983423
  },
  {
    "Title": "Let's Encrypt Cert Error and Polly Retry | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/10/lets-encrypt-cert-error-and-polly-retry/",
    "Timestamp": "2023-04-29T16:05:09",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Let's Encrypt updated their root cert recently and now calls from some systems to APIs that use Let's Encrypt certs are failing. Here's one way to fix it with Polly and the HttpClientHandler.",
    "Confidence": 0.9827764
  },
  {
    "Title": "DynamoDb, Reading and Writing Data with .Net Core – Part 2 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/08/dynamodb-reading-and-writing-data-with-net-core-part-2/",
    "Timestamp": "2023-04-29T16:05:09",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nA few weeks ago I posted about reading and writing data to DynamoDb. I gave instructions on how to get create tables on localstack and how to use the AWS Document Model approach.",
    "Confidence": 0.99648297
  },
  {
    "Title": "Calling Generic Methods Using Reflection | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/02/calling-generic-methods-using-reflection/",
    "Timestamp": "2023-04-29T16:05:08",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nAccessing generic methods by reflection is not easy. A while ago I needed to do just that and found relatively little information out there. So I dug in and figured it out for myself.",
    "Confidence": 0.9956517
  },
  {
    "Title": "Dependency Injection of a Type within Program.cs Using Top Level Statements | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/09/dependency-injection-of-a-type-within-program-cs-using-top-level-statements/",
    "Timestamp": "2023-04-29T16:05:06",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "There are times when you will want to use something from the service collection within `Program.cs`, in this post shows how to do that when using top-level statements",
    "Confidence": 0.99922335
  },
  {
    "Title": "Dependency Inject a Service from Startup back to Program in .Net Core 3.1 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/06/dependency-inject-a-service-from-startup-back-to-program-in-net-core-3-1/",
    "Timestamp": "2023-04-29T16:05:06",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nOver the past couple of years I wrote a few posts about Dependency Injection in .Net Core 2.1, and this week I received comments from a reader telling me that some of the changes in .",
    "Confidence": 0.998348
  },
  {
    "Title": "Fluent Validation with Web Api 2 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/12/fluent-validation-with-web-api-2/",
    "Timestamp": "2023-04-29T16:05:05",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nI wrote blog post in 2015 on using the Fluent Validation NuGet package for complex validation needs. In the post the validator checked that a create person request had at least one active primary phone and at least one active primary email.",
    "Confidence": 0.9981738
  },
  {
    "Title": "Using Memcached with a .NET Console Application | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/12/using-memcached-with-a-net-console-application/",
    "Timestamp": "2023-04-29T16:05:05",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Getting Memcached running with a .NET Console application took a little longer than expected. If you are trying to do the same this might save you half an hour of messing about with constructor parameters.",
    "Confidence": 0.9957681
  },
  {
    "Title": "WhenAny with Two Different Types of Task and Waiting for Both to Finish | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/11/whenany-with-two-different-types-of-task-and-waiting-for-both-to-finish/",
    "Timestamp": "2023-04-29T16:05:04",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If you use WhenAny with different types of Task you may want to do something when the first finishes, but also wait for the second to finish. Here's how.",
    "Confidence": 0.9958447
  },
  {
    "Title": "Adding ROWGUIDCOL to Entity Framework Code First using migrations | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2014/07/adding-rowguidcol-to-entity-framework-code-first-using-migrations/",
    "Timestamp": "2023-04-29T16:05:02",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "To add add a ROWGUIDCOL to a unique identifier in a table using code first you have to use code migrations.\nBelow is the snippet you need. I haven’t covered how to perform a migration because there are plenty of articles available.",
    "Confidence": 0.9934516
  },
  {
    "Title": "Simmy Chaos Engine for .NET – Part 4, Doing Some Real Damage, Dropping a Table | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/10/simmy-chaos-engine-for-net-part-4-doing-some-real-damage-dropping-a-table/",
    "Timestamp": "2023-04-29T16:05:02",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nUp until now the Simmy examples I’ve written have thrown exceptions, changed successes to failures or slowed down a request.",
    "Confidence": 0.9962059
  },
  {
    "Title": "Selectively Caching a HttpResponseMessage with Polly - caching series 1/3 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/03/selectively-caching-a-httpresponsemessage-with-polly/",
    "Timestamp": "2023-04-29T16:05:02",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nWhen I give talks on Polly I show how to use it in a Web API application that calls another Web Api application.",
    "Confidence": 0.9930803
  },
  {
    "Title": ".NET 6 Lambdas on ARM64 - Part 1, Functions | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/03/net-6-lambdas-on-arm64-part-1-functions/",
    "Timestamp": "2023-04-29T16:05:01",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "It is very easy to run .NET 6 AWS Lambda functions on ARM64 processors, read on to find out how...",
    "Confidence": 0.99612397
  },
  {
    "Title": "Accessing the HttpContext from the Constructor of a Controller or a Dependency | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/09/accessing-the-httpcontext-from-the-constructor-of-a-controller-or-a-dependency/",
    "Timestamp": "2023-04-29T16:05:00",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nThere are times when you may need to access the HttpRequest from places that it is not normally available such as the constructor of a controller or the constructor of a service that is built by dependency injection.",
    "Confidence": 0.99866235
  },
  {
    "Title": "How to install .NET Framework 4.7 in Visual Studio 2017 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/04/how-to-install-net-framework-4-7-in-visual-studio-2017/",
    "Timestamp": "2023-04-29T16:05:00",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Microsoft just released .NET Framework 4.7, but surprisingly it is not the easiest to install.\nHere are the steps for Windows 10, as of this writing, it is not available for earlier versions for of Windows.",
    "Confidence": 0.9964692
  },
  {
    "Title": "Getting Web API Exception Details from a HttpResponseMessage | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/07/getting-web-api-exception-details-from-a-httpresponsemessage/",
    "Timestamp": "2023-04-29T16:05:00",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "The Problem It’s hard to get the details of an exception from a Web Api response when calling Web Api from a C# program. (Skip to the solution if you don’t care about the background), it even handles inner exceptions!",
    "Confidence": 0.99613726
  },
  {
    "Title": "Extracting Text from an Image with Amazon Textract and .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/02/extracting-text-from-an-image-with-amazon-textract-and-net/",
    "Timestamp": "2023-04-29T16:04:59",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Occasionally you need to extract text from an image. Amazon Textract makes this easy. In this post, I'll show how to use it to extract text from a single image.",
    "Confidence": 0.99536204
  },
  {
    "Title": "Securing Lab Environments Part 1",
    "Url": "https://basementprogrammer.hashnode.dev/securing-lab-environments-part-1",
    "Timestamp": "2023-04-29T16:04:59",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "One of the great things that operating in the cloud allows us to do, is create lab environments. With Infrastructure as Code (IoC) tools, it makes it really easy for users to create preconfigured lab environments to try new things, and experiment wit...",
    "Confidence": 0.9955806
  },
  {
    "Title": "Web Api 2 Without MVC | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/02/web-api-2-without-mvc/",
    "Timestamp": "2023-04-29T16:04:56",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Download full source code.\nWhen building a Web Api 2 application there is much unneeded MVC baggage that comes along with it.\nTo start with all the css, html and javascript can go, then most of the packages, most of referenced dlls and almost all the C#.",
    "Confidence": 0.99578685
  },
  {
    "Title": "Passing Configuration Options Into Middleware, Services and Controllers in ASP.NET Core 3.1 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/12/passing-configuration-options-into-middleware-services-and-controllers-in-asp-net-core-3-1/",
    "Timestamp": "2023-04-29T16:04:56",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nI recently hit a problem where I needed to reload configuration settings as they changed, fortunately, this is relatively straightforward when using the IOptionsMonitor, in .NET Core.",
    "Confidence": 0.99873286
  },
  {
    "Title": "How to fix 'No database providers are configured' when scaffolding a controller in ASP.NET 5 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2016/01/how-to-fix-no-database-providers-are-configured-when-scaffolding-a-controller-in-asp-net-5/",
    "Timestamp": "2023-04-29T16:04:56",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "If got this error when trying to scaffold a new controller (MVC and Web Api) for an ASP.NET 5 web app using Visual Studio 2015.\nThere was an error running the selected code generator: 'No database providers are configured.",
    "Confidence": 0.98798615
  },
  {
    "Title": "Registering Multiple Implementations of an Interface in ASP.NET Core with Autofac | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/10/registering-multiple-implementations-of-an-interface-in-asp-net-core-with-autofac/",
    "Timestamp": "2023-04-29T16:04:54",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nA few weeks ago I wrote a post about using dependency injection to pick between two implementations of an interface. It was a solution I was not very happy with because it meant I had to new up the implementations inside a factory or I had to use service collection to instantiate all implementations of the interface and then use a piece of code to return the one the was wanted.",
    "Confidence": 0.9991946
  },
  {
    "Title": "Performance Comparison of Entity Framework Core 2.1 and Dapper 1.5 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/08/performance-comparison-of-entity-framework-core-2-1-and-dapper-1-5/",
    "Timestamp": "2023-04-29T16:04:54",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "tl;dr - ignore most (maybe all) of the posts out there comparing Dapper and Entity Framework performance, you need to measure it yourself.\nHere’s why -\n Some are angry opinion pieces from people who don’t like one technology or the other and clearly haven’t run any tests.",
    "Confidence": 0.9677399
  },
  {
    "Title": "Entity Framework Core 3.1 Bug vs 2.2, Speed and Memory During Streaming | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/09/entity-framework-core-3-1-bug-vs-2-2-speed-and-memory-during-streaming/",
    "Timestamp": "2023-04-29T16:04:53",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nA while ago I wrote a blog post about the advantages of streaming results from Entity Framework Core as opposed to materializing them inside a controller and the returning the results.",
    "Confidence": 0.9770631
  },
  {
    "Title": "Working with JSON in .NET, a better way? | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/10/working-with-json-in-net-a-better-way/",
    "Timestamp": "2023-04-29T16:04:53",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nTwo recent experiences with C# and JSON frustrated me with how difficult it is to work JSON inside an application. I have also been learning Node.",
    "Confidence": 0.9921594
  },
  {
    "Title": "Simple Action and Action<string> Examples | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/03/simple-action-and-action-examples/",
    "Timestamp": "2023-04-29T16:04:52",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nA junior engineer colleague of mine recently asked me “how the f* * * do I call this method?”. Seemed like a reasonable question. It was a method that took a complicated Func and an Action with a series of parameters.",
    "Confidence": 0.9927427
  },
  {
    "Title": "C# and AWS Lambdas, Part 6 – .NET 5 inside a Container inside a Lambda | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/03/c-and-aws-lambdas-part-6-net-5-inside-a-container-inside-a-lambda/",
    "Timestamp": "2023-04-29T16:04:52",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "A few months ago AWS released a feature allowing Lambdas to run container images, for larger applications this is easier to work with than a zip file or set of layers, it also lets you move your already containerized apps to Lambda with a small effort. This post shows how to get .NET 5 \"Hello World\" application running in this manner.",
    "Confidence": 0.99605936
  },
  {
    "Title": "Getting Error Messages and Status Codes from Typed HttpClients | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/05/getting-error-messages-and-status-codes-from-typed-httpclients/",
    "Timestamp": "2023-04-29T16:04:51",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nI have been using HttpClientFactory for a while and have generally preferred using named clients over typed clients. With a named client you get the HttpClient just before you are going to use it, and you have full access to the HttpResponse at the point you make the call to the remote service.",
    "Confidence": 0.99535835
  },
  {
    "Title": "Using JSON to store application preferences and configuration | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2015/04/using-json-to-store-application-preferences-and-configuration/",
    "Timestamp": "2023-04-29T16:04:51",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Download full source code.\nStoring configuration preferences in the database is not a hard task. It usually involves storing the name of the preference, the value and the type in the database.",
    "Confidence": 0.9607526
  },
  {
    "Title": "Starting the Presenter View in PowerPoint | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/07/starting-the-presenter-view-in-powerpoint/",
    "Timestamp": "2023-04-29T16:04:51",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "When practicing a presentation on a single screen it is helpful to see the notes, next slide, time information, etc., that you normally get with multiple monitors. This can be done with the Presenter View.",
    "Confidence": 0.9744278
  },
  {
    "Title": "The Simplest S3 Upload Example with .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/02/the-simplest-s3-upload-example-with-net/",
    "Timestamp": "2023-04-29T16:04:50",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "A simple example of uploading a file to S3 with .NET using a few lines of code.",
    "Confidence": 0.9989849
  },
  {
    "Title": "Simple Lambda Function with a Function URL | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/08/simple-lambda-function-with-a-function-url/",
    "Timestamp": "2023-04-29T16:04:50",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This is a simple Lambda function that uses a Function URL. This blog post will be referenced in more complicated examples.",
    "Confidence": 0.99523354
  },
  {
    "Title": "Using Step Functions and C# Lambdas to Orchestrate API Calls | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/09/using-step-functions-and-c-lambdas-to-orchestrate-api-calls/",
    "Timestamp": "2023-04-29T16:04:50",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I've been playing with Step Functions for a while and wanted to see if I could use them to orchestrate a bunch of API calls, processes the responses, make decisions, etc. This post shows how to combine a single Lambda, HttpClient, and Step Functions to achieve this.",
    "Confidence": 0.9729274
  },
  {
    "Title": "Entity Framework Migrations with an existing database | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2015/05/entity-framework-migrations-with-an-existing-database/",
    "Timestamp": "2023-04-29T16:04:49",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Introduction If you read my post on Entity Framework migrations, you might be saying, “that’s amazing, but that’s all very well for new projects, but we’ve got eighty tables in place already and that code first migration ship has sailed”.",
    "Confidence": 0.9980017
  },
  {
    "Title": "Printing on the Spot in a Console | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/07/printing-on-the-same-spot-in-console/",
    "Timestamp": "2023-04-29T16:04:49",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "For the sheer fun of doing a little silly programming...",
    "Confidence": 0.98435855
  },
  {
    "Title": "Polly with .NET 6, Part 1 - Dependency Injection of a Policy into a Controller | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/02/polly-with-net-6-part-1-dependency-injection-of-policy-to-controller/",
    "Timestamp": "2023-04-29T16:04:49",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This post shows how to use Polly with .NET 6 if you are taking advantage of top-level statements.",
    "Confidence": 0.9951771
  },
  {
    "Title": "Securing Lab Environments Part 2",
    "Url": "https://basementprogrammer.hashnode.dev/securing-lab-environments-part-2",
    "Timestamp": "2023-04-29T16:04:45",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "In my last post I wrote about securing your AWS lab environments by using Managed Microsoft Active Directory as an authentication provider and configuring that active directory with randomly created passwords. This is a great first step in helping to...",
    "Confidence": 0.9905883
  },
  {
    "Title": "Using Other Verbs with Web API | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/06/using-other-verbs-with-web-api/",
    "Timestamp": "2023-04-29T16:04:44",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nYou will often use the GET verb when making requests to an API. You have probably used it like this - www.example.com/person/ or www.example.com/person/1 or www.",
    "Confidence": 0.98957044
  },
  {
    "Title": "Adding a Test Task to the VS Code Command Palette | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/07/adding-a-test-task-to-the-vs-code-command-palette/",
    "Timestamp": "2023-04-29T16:04:43",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I thought it would be simple to add a task to run tests from the VS Code command palette, but it was not as straightforward as I hoped. Here's how to do it.",
    "Confidence": 0.99437106
  },
  {
    "Title": "POST with HttpClient and Basic Authorization | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/01/post-with-httpclient-and-basic-authorization/",
    "Timestamp": "2023-04-29T16:04:43",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nA non .NET developer friend asked me to help him write a sample C# application that exercises a POST endpoint he wrote, it requires Basic authorization. After a quick search, I found that there are relatively few good examples of doing this in .",
    "Confidence": 0.99813664
  },
  {
    "Title": "Serializing a stack to XML in C# | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2014/01/serializing-a-stack-to-xml-in-c/",
    "Timestamp": "2023-04-29T16:04:42",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Serializing a class to XML in C# is straightforward; most collections can be easily serialized also.\nSomething like the following will work in most scenarios -\n1public string GetSerializedString<T>(T objectToSerialize) 2{ 3 var serializer = new XmlSerializer(typeof(T)); 4 TextWriter textWriter = new StringWriter(); 5 6 var xmlWriter = XmlWriter.",
    "Confidence": 0.9961444
  },
  {
    "Title": "Installing Docker Desktop on Ubuntu 22.04 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2022/12/installing-docker-desktop-on-ubuntu-22-04/",
    "Timestamp": "2023-04-29T16:04:41",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I love using Docker when developing software, but installing it on Linux is not as simple as I had hoped. If you have hit the error \"docker-desktop : Depends: docker-ce-cli but it is not installable\" then this post is for you.",
    "Confidence": 0.9957798
  },
  {
    "Title": "Alter response header in Web API to return machine name | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/08/alter-response-header-in-web-api-to-return-machine-name/",
    "Timestamp": "2023-04-29T16:04:41",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nI recently hit a problem where I was getting incorrect responses from a server behind a load balancer. Looking at the logs didn’t help because there was no error.",
    "Confidence": 0.98934716
  },
  {
    "Title": "Using Polly with Any Type of Request | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2018/10/using-polly-with-any-type-of-request/",
    "Timestamp": "2023-04-29T16:04:41",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nI recently presented a talk on Polly at the DevUp conference in St. Louis.",
    "Confidence": 0.9914257
  },
  {
    "Title": "Build, Zip, Update a .NET Core 3.1 AWS Lambda, and Run a Test, with a Single Command | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/08/build-zip-update-a-net-core-31-aws-lambda-and-run-a-test-with-a-single-command/",
    "Timestamp": "2023-04-29T16:04:40",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I've been working on a small AWS Lambda that has needed many iterations, I quickly got tired of building it, zipping by hand from Windows UI, uploading from the AWS console UI, and executing a test  from there. Here is a simple batch file that does it all.",
    "Confidence": 0.981402
  },
  {
    "Title": "Simmy Chaos Engine for .NET – Part 2, Resilience and Injected Faults | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2019/07/simmy-chaos-engine-for-net-part-2-resilience-and-injected-faults/",
    "Timestamp": "2023-04-29T16:04:39",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nI wrote a blog on using a Simmy Fault policy a few days ago, it is very simple to use by itself, but it is far more useful when used in combination with a resilience policy.",
    "Confidence": 0.9897091
  },
  {
    "Title": "Redis Hello World with C# and .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/10/redis-hello-world-with-c-net/",
    "Timestamp": "2023-04-29T16:04:39",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "A simple Hello World type application for Redis using C#.",
    "Confidence": 0.9978926
  },
  {
    "Title": "Using Intrinsic Functions with Step Functions to Clean Json Strings | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/08/using-intrinsic-functions-with-step-functions-to-clean-json-strings/",
    "Timestamp": "2023-04-29T16:04:39",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Working with Json directly in C# has always been a problem, but as Json becomes more common the problems mount. I was using AWS Step Functions recently and wanted to pass the Json string output from a Lambda running .NET Core 3.1. As with all things C# Json string related, it was not easy.",
    "Confidence": 0.95011735
  },
  {
    "Title": "Re-authorization and onRetry with Polly | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/05/re-authorization-and-onretry-with-polly/",
    "Timestamp": "2023-04-29T16:04:39",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nIn a previous post I showed how to use Polly to make a simple call, retrying in the event of failure.",
    "Confidence": 0.99507654
  },
  {
    "Title": "Connecting your RaspberryPi to AWS IoT",
    "Url": "https://basementprogrammer.hashnode.dev/connecting-your-raspberrypi-to-aws-iot",
    "Timestamp": "2023-04-29T16:04:39",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "In my last article \"IoT for the .NET Developer\", I covered how you can get .NET 7 installed and running on your RaspberryPi. In this article, I am going to cover how to get your Raspberry Pi set up and connected to AWS's IoT Core.\nThere are two main ...",
    "Confidence": 0.99702716
  },
  {
    "Title": "Hour of Code:",
    "Url": "https://basementprogrammer.hashnode.dev/hour-of-code",
    "Timestamp": "2023-04-29T16:04:35",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "I wanted to start the year with a post about one of my favorite activities. The organization Code.org has an annual event that they run called Hour of Code. The idea of Hour of Code is to have technology professionals like you and I go into the class...",
    "Confidence": 0.9888147
  },
  {
    "Title": "Two Ways to Count the Number of Times a Mocked Method is Called With Moq | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/07/two-ways-to-count-the-number-of-times-a-mocked-method-is-called-with-moq/",
    "Timestamp": "2023-04-29T16:04:35",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "There are at least two ways to count the number of times a mocked method is called with Moq. The first is with the Verify method, the second is with the Callback method.",
    "Confidence": 0.99588275
  },
  {
    "Title": "Complex model validation using Fluent Validation | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2015/04/complex-model-validation-using-fluent-validation/",
    "Timestamp": "2023-04-29T16:04:35",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code is available here.\nA common problem is validating an object using a complicated set of rules.\nI started using the Fluent Validation package some time back, it is commonly used with MVC and Web API applications but can be used with in any scenario that requires validation.",
    "Confidence": 0.99714476
  },
  {
    "Title": "Using Entity Framework for .NET 6 with SQL Server in a Docker Container | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/08/using-entity-framework-for-net-6-with-sql-server-in-a-docker-container/",
    "Timestamp": "2023-04-29T16:04:35",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Want to see how easy it is to use a SQL Server Docker container with Entity Framework for .NET 6?",
    "Confidence": 0.99986887
  },
  {
    "Title": "A simple Polly example with WebApi 2 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/03/a-simple-polly-example-with-webapi-2/",
    "Timestamp": "2023-04-29T16:04:33",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Download full source code.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nIf you are calling APIs and you haven’t heard about The Polly Project, you should check it out.",
    "Confidence": 0.9900855
  },
  {
    "Title": "Reusing HttpClient with Dependency Injection | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/10/reusing-httpclient-with-dependency-injection/",
    "Timestamp": "2023-04-29T16:04:29",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nIf you are using HttpClient to make requests for you, you might have come across some articles discussing how to reuse HttpClient. They strongly advocate for using a single HttpClient for as many requests as possible, i.",
    "Confidence": 0.998174
  },
  {
    "Title": "Transcribing Two Speakers with Amazon Transcribe via Channel Identification | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/02/transcribing-two-speakers-with-amazon-transcribe-via-channel-identification/",
    "Timestamp": "2023-04-29T16:04:29",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Amazon Transcribe provides two ways to identify speakers in a piece of audio. In this post you will see how to use channel identification to identify speakers. In a subsequent post I will show how to use speaker identification for cases where you don't have the speakers on separate channels.",
    "Confidence": 0.99364823
  },
  {
    "Title": "Entity Framework with Proper Foreign Key Names | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2015/06/entity-framework-with-proper-foreign-key-names/",
    "Timestamp": "2023-04-29T16:04:28",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nOne of the very nice features of Entity Framework is the navigational properties. But it is easy to set them up in a less that optimal way.",
    "Confidence": 0.98685896
  },
  {
    "Title": "Web API 2 Controller with multiple GET methods - part 2 | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/02/web-api-2-controller-with-multiple-get-methods-part-2/",
    "Timestamp": "2023-04-29T16:04:28",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "I have two other posts on multiple GET methods, one for ASP.NET 5 Web Api, and another for Web Api 2.\nDownload full source code.\nA few months ago I wrote a post explaining how to create a controller with multiple GET methods.",
    "Confidence": 0.9922295
  },
  {
    "Title": "Simmy Chaos Engine for .NET – Part 7, Using a Random Chaos Policy | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/01/simmy-chaos-engine-for-net-part-7-using-a-random-chaos-policy/",
    "Timestamp": "2023-04-29T16:04:28",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nThis post builds on the previous one where I added chaos policies to a registry and dynamically configured their settings via a config file.",
    "Confidence": 0.98235995
  },
  {
    "Title": "Simple Example of C# 9 Lambda Discards | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/06/simple-c-9-lambda-discards-example/",
    "Timestamp": "2023-04-29T16:04:27",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Discards can now be used with Lambdas in C# 9. Here is a simple example.",
    "Confidence": 0.98651785
  },
  {
    "Title": "Returning default values from a failed web request with Polly Fallbacks | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/05/returning-default-values-from-a-failed-web-request-with-polly-fallbacks/",
    "Timestamp": "2023-04-29T16:04:27",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nWant to learn more about Polly? Check out my Pluralsight course on it.\nIn previous posts on Polly I showed how to use a simple retry, and a retry with a delegate that is called before the request is retried.",
    "Confidence": 0.975269
  },
  {
    "Title": "Extracting Key-Value Pairs from Document Form Fields with Amazon Textract and .NET | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2023/02/extracting-key-value-pairs-from-document-form-fields-with-amazon-textract-and-net/",
    "Timestamp": "2023-04-29T16:04:27",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Textract can do more than just extract plain text, it can also identify fields in a form and extract the key-value pairs. In this post, I'll show how to use it to extract key-value pairs from a tax document.",
    "Confidence": 0.9931442
  },
  {
    "Title": "IoT for the .NET Developer",
    "Url": "https://basementprogrammer.hashnode.dev/iot-for-the-net-developer",
    "Timestamp": "2023-04-29T16:04:26",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "In this blog post, we are going to start the process of developing an Internet of Things (IoT) solution using .NET 7 on a Raspberry Pi.\nIoT systems often run a lightweight Linux OS and leverage ARM hardware with low-power processors and have small am...",
    "Confidence": 0.99898344
  },
  {
    "Title": "C# and AWS Lambdas, Part 5 – Updating the Zip in S3 and Updating the Running Lambda, with Pulumi IaC | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2021/03/c-and-aws-lambdas-part-5-updating-the-zip-in-s3-and-updating-the-running-lambda-with-pulumi-iac/",
    "Timestamp": "2023-04-29T16:04:26",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "This post pulls together a few threads I've been working on - the creation of Lambda to run .NET, storing the zip in S3, and updating the .NET Lambda when the zip in S3 is updated.\nThis one took quite a while to put together - the permissions, roles, and policies were not obvious and I hope it will be of help to you.",
    "Confidence": 0.9976672
  },
  {
    "Title": "Pizza Delivery IoT Project Pt. 1",
    "Url": "https://basementprogrammer.hashnode.dev/pizza-delivery-iot-project-pt-1",
    "Timestamp": "2023-04-29T16:04:25",
    "Domain": "basementprogrammer.hashnode.dev",
    "Description": "Introduction\nThere is an ongoing project each year for the Developer Advocates to build sample applications. This year my sample application is going to be built around an IoT use case. This project was the catalyst for my IoT for the .NET developer ...",
    "Confidence": 0.99055547
  },
  {
    "Title": "Enum ToString(), Caching for Performance | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2020/07/enum-tostring-caching-for-performance/",
    "Timestamp": "2023-04-29T16:04:25",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nA while ago I was working on a program that had to convert enums values to strings as it saved data.\nWhen I removed the enum value from the data that was saved it went noticeably faster.",
    "Confidence": 0.98731244
  },
  {
    "Title": "SSN checking and formatting | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2013/08/ssn-checking-and-formatting/",
    "Timestamp": "2023-04-29T16:04:25",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Here’s something I worked on a few days ago. It shows six ways of verifying that an incoming string has nine numeric characters and then returns a string in the standard social security number format.",
    "Confidence": 0.99169654
  },
  {
    "Title": "Web Api Routing in .NET Core | no dogma blog",
    "Url": "https://nodogmablog.bryanhogan.net/2017/07/net-core-web-api-routing/",
    "Timestamp": "2023-04-29T16:04:24",
    "Domain": "nodogmablog.bryanhogan.net",
    "Description": "Full source code available here.\nRouting in .NET Core Web Api (1.1 and 2) is a little different than in earlier versions.\nI’ve written about this a few times, you can find those posts here.",
    "Confidence": 0.9972013
  },
  {
    "Title": "Microsoft is rewriting core Windows libraries in Rust",
    "Url": "https://www.theregister.com/2023/04/27/microsoft_windows_rust/",
    "Timestamp": "2023-04-29T15:02:27",
    "Domain": "www.theregister.com",
    "Description": "Now that's a C change we can back",
    "Confidence": 0.8220447
  },
  {
    "Title": "Make Your C# Code Simpler With Target Typed New #shorts",
    "Url": "https://youtube.com/watch?v=X9raWjQ7n8s",
    "Timestamp": "2023-04-29T13:01:58",
    "Domain": "youtube.com",
    "Description": "Support me on Patreon to access the source code:https://www.patreon.com/milanjovanovicJoin my weekly .NET newsletter:https://www.milanjovanovic.techRead my B...",
    "Confidence": 0.9429552
  }
]