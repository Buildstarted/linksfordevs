[
  {
    "Title": ".NET App Developer Links - 2021-07-14",
    "Url": "https://links.danrigby.com/2021/07/app-developer-links-2021-07-14/",
    "Timestamp": "2021-07-14T07:03:56",
    "Domain": "links.danrigby.com",
    "Description": "The latest news and resources for .NET app developers."
  },
  {
    "Title": "The ugly, geeky war for web privacy is playing out in the W3C",
    "Url": "https://www.protocol.com/policy/w3c-privacy-war",
    "Timestamp": "2021-07-14T07:03:53",
    "Domain": "www.protocol.com",
    "Description": "The inside story of how the World Wide Web Consortium, one of the internet’s geekiest corners, became a key battleground in the global fight for web privacy."
  },
  {
    "Title": "Permission-Based Security for ASP.NET Web APIs",
    "Url": "https://auth0.com/blog/permission-based-security-aspnet-webapi/",
    "Timestamp": "2021-07-14T06:04:19",
    "Domain": "auth0.com",
    "Description": "How to check user permissions to have more control over access to your ASP.NET Web API."
  },
  {
    "Title": "A Better Way To Discover APIs With The New Endpoints Window | The .NET Tools Blog",
    "Url": "https://blog.jetbrains.com/dotnet/2021/07/12/a-better-way-to-discover-apis-with-the-new-endpoints-window/",
    "Timestamp": "2021-07-14T06:04:15",
    "Domain": "blog.jetbrains.com",
    "Description": "Despite the name, endpoints are generally where ASP.NET Core development starts for many developers. Endpoints handle incoming requests and provide appropriate responses to clients. While the concept"
  },
  {
    "Title": "Build a shopping app with Azure Static Web Apps",
    "Url": "https://techcommunity.microsoft.com/t5/apps-on-azure/build-a-shopping-app-with-azure-static-web-apps/ba-p/2542576",
    "Timestamp": "2021-07-14T06:04:08",
    "Domain": "techcommunity.microsoft.com",
    "Description": "If you're looking for tips and best practices on how to create and deploy fully featured web apps with Azure Static Web Apps, we created a series of short practical videos to help you with various use cases. You can look at the announcement here and watch all videos here: Azure Tips and Tricks: Stat..."
  },
  {
    "Title": "Hardening an ASP.NET container running on Kubernetes",
    "Url": "https://techcommunity.microsoft.com/t5/azure-developer-community-blog/hardening-an-asp-net-container-running-on-kubernetes/ba-p/2542224",
    "Timestamp": "2021-07-14T06:04:01",
    "Domain": "techcommunity.microsoft.com",
    "Description": "In my day to day job, I often stumbled upon a surprising fact: many ASP.NET Core (or .NET 5) K8s deployments are too permissive when it comes to the execution context. Basically, most deployments are not hardened properly, and I see countless ASP.NET containers running as root. Admitedly, there is a..."
  },
  {
    "Title": "The worst volume control UI in the world",
    "Url": "https://uxdesign.cc/the-worst-volume-control-ui-in-the-world-60713dc86950",
    "Timestamp": "2021-07-14T05:04:21",
    "Domain": "uxdesign.cc",
    "Description": "A group of bored developers and designers has decided to start a thread on reddit to figure out who can come up with the worst volume…"
  },
  {
    "Title": "Firefox 89 delivered more speed—today’s Firefox 90 adds SmartBlock 2.0",
    "Url": "https://arstechnica.com/gadgets/2021/07/firefox-90-ramps-up-private-browsing-with-new-smartblock-2-0/?utm_social-type=owned",
    "Timestamp": "2021-07-14T03:03:48",
    "Domain": "arstechnica.com",
    "Description": "Mozilla's browser continues ramping up its speed and blocking efforts."
  },
  {
    "Title": "tuya/tuya-home-assistant",
    "Url": "https://github.com/tuya/tuya-home-assistant/",
    "Timestamp": "2021-07-14T02:03:40",
    "Domain": "github.com",
    "Description": "Home Assistant custom integration for controlling Powered by Tuya (PBT) devices using Tuya Open API, officially maintained by the Tuya Developer Team. - tuya/tuya-home-assistant"
  },
  {
    "Title": "MacOS Nix Setup (an alternative to Homebrew)",
    "Url": "https://wickedchicken.github.io/post/macos-nix-setup/",
    "Timestamp": "2021-07-14T01:04:05",
    "Domain": "wickedchicken.github.io",
    "Description": "I recently got a new Macbook, and began setting up the Nix package manager to install my developer toolset. I mainly did this to try and have a working setup without installing Homebrew. Since I ran into a few issues, I wanted to briefly document what I did and why in case others wanted to try the same.\nWhy Nix? (and why not Homebrew or MacPorts?) The short answer: hype."
  },
  {
    "Title": "ShinyHunters Wave 3: One Hacker Exposes over 125 Million Credentials",
    "Url": "https://www.riskbasedsecurity.com/2021/01/25/shinyhunters-wave-3-one-hacker-exposes-over-125-million-credentials/",
    "Timestamp": "2021-07-13T23:04:59",
    "Domain": "www.riskbasedsecurity.com",
    "Description": "UPDATE: ShinyHunters returned in 2021 with a number of new breached database leaks. Starting on January 17th, 2021, the threat actor has leaked 10 new databases including: \n\n\n\nPixlr.com Bonobos.com Wognai.comTesspring.com Tunedglobal.com Buyucoin.com Wappalyzer.com Chqbook.com Rooter.ioMeetMindful.c"
  },
  {
    "Title": "Give me /events, not webhooks - Sync Inc",
    "Url": "https://blog.syncinc.so/events-not-webhooks",
    "Timestamp": "2021-07-13T23:04:56",
    "Domain": "blog.syncinc.so",
    "Description": "Webhooks come with some challenges. We prefer polling an /events endpoint instead when possible."
  },
  {
    "Title": "GitHub Actions: New settings for maintainers | GitHub Changelog",
    "Url": "https://github.blog/changelog/2021-07-01-github-actions-new-settings-for-maintainers/",
    "Timestamp": "2021-07-13T23:04:53",
    "Domain": "github.blog",
    "Description": "GitHub Actions: New settings for maintainers"
  },
  {
    "Title": "Cryptography @ Google",
    "Url": "https://docs.google.com/presentation/d/1ml0St9lmRX0FeekKyaPmLch3TTOUG84rU2sEjfpalaU/mobilepresent?slide=id.p",
    "Timestamp": "2021-07-13T23:04:51",
    "Domain": "docs.google.com",
    "Description": "Cryptography @ Google from research to practice Cathie Yun cathieyun@ {gmail, twitter, github, medium, ...}"
  },
  {
    "Title": "Machine Learning at Microsoft with ML.NET",
    "Url": "https://arxiv.org/pdf/1905.05715.pdf",
    "Timestamp": "2021-07-13T22:03:53",
    "Domain": "arxiv.org",
    "Description": null
  },
  {
    "Title": "dotnet/apireviews",
    "Url": "https://github.com/dotnet/apireviews/blob/main/2021/07-13-quick-reviews/README.md",
    "Timestamp": "2021-07-13T22:03:51",
    "Domain": "github.com",
    "Description": "This repository contains the notes and API differences that we reviewed. - dotnet/apireviews"
  },
  {
    "Title": "XPRIZE Carbon Removal",
    "Url": "https://www.xprize.org/prizes/elonmusk",
    "Timestamp": "2021-07-13T22:03:48",
    "Domain": "www.xprize.org",
    "Description": "XPRIZE Carbon Removal is aimed at tackling the biggest threat facing humanity - fighting climate change and rebalancing Earth’s carbon cycle. Funded by Elon"
  },
  {
    "Title": "The Human Side of Elixir",
    "Url": "https://akoutmos.com/post/betting-on-elixir/",
    "Timestamp": "2021-07-13T21:05:32",
    "Domain": "akoutmos.com",
    "Description": "In this blog post, we take a look at the Elixir programming language from the engineer/business perspective."
  },
  {
    "Title": "I just can't do this anymore, Copilot",
    "Url": "https://johnaaronnelson.com/i-cant-anymore-with-copilot/",
    "Timestamp": "2021-07-13T21:05:30",
    "Domain": "johnaaronnelson.com",
    "Description": "I’ve been using Github Copilot in my daily coding activity for the last two weeks, and I just can’t anymore. I read a post on Hacker News this morning talking…"
  },
  {
    "Title": "My observations on the complexity of software after building test acceleration - John Ewart",
    "Url": "https://johnewart.net/2021/my-observations-on-the-complexity-of-software-after-building-test-acceleration/",
    "Timestamp": "2021-07-13T21:05:28",
    "Domain": "johnewart.net",
    "Description": "16 min read"
  },
  {
    "Title": "GitHub Quick Reviews",
    "Url": "https://www.youtube.com/watch?v=qIprM6S6V8U",
    "Timestamp": "2021-07-13T21:05:25",
    "Domain": "www.youtube.com",
    "Description": "Powered by Restream https://restream.io/"
  },
  {
    "Title": "Pockets of rest enable careers.",
    "Url": "https://lethain.com/pockets-of-rest/",
    "Timestamp": "2021-07-13T21:05:19",
    "Domain": "lethain.com",
    "Description": "Being burnt out at work feels like this year’s life crisis. Almost every conversation I have with a friend in the industry lingers on the topic of struggling to focus at work. Last week, I was chatting with a friend and we diagnosed their core career ambition as the deep desire to spend several years sleeping. Reflecting on the chaos of the last year, that does, indeed, sound like a solid career plan."
  },
  {
    "Title": "Trusting Everybody",
    "Url": "https://thomask.sdf.org/blog/2021/07/13/trusting-everybody.html",
    "Timestamp": "2021-07-13T21:05:17",
    "Domain": "thomask.sdf.org",
    "Description": "My security brain says I shouldn’t run untrusted code on trusted machines. My developer brain says that I should download 800 transitive dependencies from cr..."
  },
  {
    "Title": "Profit Sharing | Paul Copplestone",
    "Url": "https://paul.copplest.one/blog/profit-sharing.html",
    "Timestamp": "2021-07-13T21:05:15",
    "Domain": "paul.copplest.one",
    "Description": "How to compensate employees."
  },
  {
    "Title": "How I Write Code, Take Notes, Journal, Track Time and Tasks, and Stay Organized using Emacs",
    "Url": "https://blog.calebjay.com/posts/my-emacs-environment/",
    "Timestamp": "2021-07-13T21:05:13",
    "Domain": "blog.calebjay.com",
    "Description": "The personal blog of Caleb Jay Rogers, Frontend Engineer"
  },
  {
    "Title": "Can I disable Examine indexes on Umbraco front-end servers?",
    "Url": "https://shazwazza.com/post/can-i-disable-examine-indexes-on-umbraco-front-end-servers/",
    "Timestamp": "2021-07-13T21:05:07",
    "Domain": "shazwazza.com",
    "Description": "In Umbraco v8, Examine and Lucene are only used for the back office searches, unless you specifically use those APIs for your front-end pages. I recently had a request to know if it’s possible to"
  },
  {
    "Title": "A simple idea to reduce procrastination",
    "Url": "https://elazzabi.com/2021/07/13/a-simple-idea-to-reduce-procrastination/",
    "Timestamp": "2021-07-13T21:05:02",
    "Domain": "elazzabi.com",
    "Description": "Like every human being, I used to procrastinate a lot. Dishes? Nah. Cleaning something? Nah. Folding clothes? Nah… I knew it’s wrong, but I couldn’t help it. My body was against me. That was a few …"
  },
  {
    "Title": "Firefox  90.0, See All New Features, Updates and Fixes",
    "Url": "https://www.mozilla.org/en-US/firefox/90.0/releasenotes/",
    "Timestamp": "2021-07-13T21:04:59",
    "Domain": "www.mozilla.org",
    "Description": ""
  },
  {
    "Title": "Marginalia Search - Notes on Designing a Search Engine",
    "Url": "https://search.marginalia.nu/notes.html",
    "Timestamp": "2021-07-13T21:04:57",
    "Domain": "search.marginalia.nu",
    "Description": "Some technical observations and thoughts I've had during this project."
  },
  {
    "Title": "Steve Blank The Class That Changed the Way Entrepreneurship is Taught",
    "Url": "https://steveblank.com/2021/07/13/this-class-changed-the-way-entrepreneurship-is-taught/",
    "Timestamp": "2021-07-13T21:04:54",
    "Domain": "steveblank.com",
    "Description": "This article first appeared in Poets and Quants   Revolutions start by overturning the status quo. By the end of the 20th century, case studies and business plans had reached an evolutionary d…"
  },
  {
    "Title": "The Death of the Internet – Mad at the Internet",
    "Url": "https://madattheinternet.com/2021/07/08/where-the-sidewalk-ends-the-death-of-the-internet/",
    "Timestamp": "2021-07-13T21:04:50",
    "Domain": "madattheinternet.com",
    "Description": "The Internet is becoming much smaller, fragmenting down national borders and succumbing to regulations imposed by governments, companies, and outrage machines."
  },
  {
    "Title": "Optimizing Inputs and becoming Indistractable",
    "Url": "https://sovereign-individual.xyz/posts/becoming-indistractable/",
    "Timestamp": "2021-07-13T21:04:48",
    "Domain": "sovereign-individual.xyz",
    "Description": "How to optimize your information diet and become indistractable."
  },
  {
    "Title": "GitHub Quick Reviews",
    "Url": "https://www.youtube.com/watch?v=RqjdL1_lai4",
    "Timestamp": "2021-07-13T21:04:46",
    "Domain": "www.youtube.com",
    "Description": "Powered by Restream https://restream.io/"
  },
  {
    "Title": "Delta Variant: Everything You Need to Know",
    "Url": "https://unchartedterritories.tomaspueyo.com/p/delta-variant-everything-you-need",
    "Timestamp": "2021-07-13T20:04:13",
    "Domain": "unchartedterritories.tomaspueyo.com",
    "Description": "Cases are growing exponentially across the world. Again. If you don’t know where this is going, a historical refresher might help. India has suffered about two million COVID deaths, the majority of them during its latest surge caused by Delta.Victims of COVID-19 are cremated in funeral pyres in New Delhi."
  },
  {
    "Title": "Visual Studio Toolbox Live - .NET Machine Learning in Visual Studio",
    "Url": "https://www.youtube.com/watch?v=OGQN48G5mQg",
    "Timestamp": "2021-07-13T20:04:10",
    "Domain": "www.youtube.com",
    "Description": "Join Bri Achtman and Luis Quintanilla from the ML.NET team as we discuss how you can use the ML.NET framework and its new Model Builder in Visual Studio to a..."
  },
  {
    "Title": "GitHub Quick Reviews",
    "Url": "https://www.youtube.com/watch?v=AaZ8PB7LS7M",
    "Timestamp": "2021-07-13T19:04:12",
    "Domain": "www.youtube.com",
    "Description": "Powered by Restream https://restream.io/"
  },
  {
    "Title": "83% of Developers Suffer From Burnout, Haystack Analytics Study Finds",
    "Url": "https://www.usehaystack.io/blog/83-of-developers-suffer-from-burnout-haystack-analytics-study-finds",
    "Timestamp": "2021-07-13T19:04:07",
    "Domain": "www.usehaystack.io",
    "Description": "San Francisco & London; 12th July 2021 - Technology has played a key role in our society, especially during the pandemic, but little is understood about the engineers who build the software that powers the modern world. A new study¹ has found that 83% of software developers suffer from workplace burnout. The top reasons cited for burnout included high workload (47%), inefficient process (31%) alongside unclear goals and targets (29%)."
  },
  {
    "Title": "GitHub Quick Reviews",
    "Url": "https://www.youtube.com/watch?v=K9jWLvN9bts",
    "Timestamp": "2021-07-13T19:04:04",
    "Domain": "www.youtube.com",
    "Description": "Powered by Restream https://restream.io/"
  },
  {
    "Title": "GitHub Quick Reviews",
    "Url": "https://www.youtube.com/watch?v=QuUMh4Xm_EU",
    "Timestamp": "2021-07-13T19:03:59",
    "Domain": "www.youtube.com",
    "Description": "Powered by Restream https://restream.io/"
  },
  {
    "Title": "pwa-builder/pwa-install",
    "Url": "https://github.com/pwa-builder/pwa-install",
    "Timestamp": "2021-07-13T19:03:54",
    "Domain": "github.com",
    "Description": "Web Component from the PWABuilder team that brings an awesome \"install\" experience to your Progressive Web App! - pwa-builder/pwa-install"
  },
  {
    "Title": "Google Releases Visual Studio Tool for Android Game Development -- Visual Studio Magazine",
    "Url": "https://visualstudiomagazine.com/articles/2021/07/13/vs-android-game-tool.aspx",
    "Timestamp": "2021-07-13T19:03:51",
    "Domain": "visualstudiomagazine.com",
    "Description": "Google released a Visual Studio extension for creating gaming apps for Android, targeting C++ developers."
  },
  {
    "Title": "TypeScript 4.4 Beta Boosts Performance, Suggests JavaScript Spelling -- Visual Studio Magazine",
    "Url": "https://visualstudiomagazine.com/articles/2021/07/13/typescript-4-4-beta.aspx",
    "Timestamp": "2021-07-13T19:03:48",
    "Domain": "visualstudiomagazine.com",
    "Description": "Microsoft has shipped a TypeScript v4.4 beta release, with new features ranging from performance improvements to spelling suggestions for JavaScript."
  },
  {
    "Title": "Featured | Powered 4 TV",
    "Url": "https://powered4.tv/",
    "Timestamp": "2021-07-13T18:04:08",
    "Domain": "powered4.tv",
    "Description": "Indie Wrestling On Demand"
  },
  {
    "Title": "GitHub’s Commercial AI Tool Copilot Facing Criticism From Open-Source Community For Blind Copying Of Blocks Of Code",
    "Url": "https://www.theinsaneapp.com/2021/07/github-copilot-ai-facing-criticism.html",
    "Timestamp": "2021-07-13T18:04:02",
    "Domain": "www.theinsaneapp.com",
    "Description": "AI Copilot is pitched as a helpful aid to programmers. But some developers object to the blind copying of blocks of code used to train the algorithm."
  },
  {
    "Title": "Building a Vision of Life Without Work",
    "Url": "https://livingafi.com/2015/03/09/building-a-vision-of-life-without-work/",
    "Timestamp": "2021-07-13T18:03:59",
    "Domain": "livingafi.com",
    "Description": "The number one question that people ask once you tell them you’re considering early retirement is:  What will you do with your time?"
  },
  {
    "Title": "Beating TimSort at Merging",
    "Url": "https://earthly.dev/blog/python-timsort-merge/",
    "Timestamp": "2021-07-13T18:03:57",
    "Domain": "earthly.dev",
    "Description": "Here is a problem. You are tasked with improving the hot loop of a Python program: maybe it is an in-memory sequential index of some sort. The slow part is the updating, where you are adding a new sorted list of items to the already sorted index. You need to combine two sorted lists and keep the result sorted. How do you do that update?   Yes, this sounds like a LeetCode problem, and maybe in the real-world you would reach for some existing sorted set data structure, but if you were working with python lists, you might do something like this1:   def merge_sorted_lists(l1, l2):     sorted_list = []      while (l1 and l2):         if (l1[0] <= l2[0]): # Compare both heads             item = l1.pop(0) # Pop from the head             sorted_list.append(item)         else:             item = l2.pop(0)             sorted_list.append(item)      # Add the remaining of the lists     sorted_list.extend(l1 if l1 else l2)      return sorted_list   Python has a built-in method in heapq.merge that does this. It takes advantage of the fact that our lists are already sorted, so we can get a new sorted list linear time rather than the n*log(n) time it would take for combining and sorting two unsorted lists.   Imagine my surprise then when I saw this performance graph from Stack Overflow:       Python’s sort is beating merge at merging sorted lists!    Sorting the list is faster than just merging the list in almost all cases! That doesn’t sound right, but I checked it, and it’s true. As Stack Overflow user JFS puts it:    Long story short, unless len(l1 + l2) >= 1,000,000 use sort    The reason sort beats merge in most cases is because of a man named Tim Peters.   TimSort   Python’s list.sort is the original implementation of a hybrid sorting algorithm called TimSort, named after its author, Tim Peters.    [Here is] stable, natural merge sort, modestly called Timsort (hey, I earned it ). It has supernatural performance on many kinds of partially ordered arrays (less than lg(N!) comparisons needed, and as few as N-1), yet as fast as Python’s previous highly tuned sample sort hybrid on random arrays.    Tim Peters explaining TimSort   Timsort is designed to find runs of sequential numbers and merge them together:    The main routine marches over the array once, left to right, alternately identifying the next run, then merging it into the previous runs “intelligently”. Everything else is complication for speed, and some hard-won measure of memory efficiency.    This is why list(x + y).sort() can be surprisingly fast: once it finds the sequential runs of numbers, it functions like our merge algorithm: combining the two sorted lists in linear time.   Timsort does have to do extra work, though. It needs to do a pass over the data to find these sequential runs, and heapq.merge knows where the runs are ahead of time. Timsort overcomes this disadvantage by being written in C rather than Python. Or as ShawdowRanger on Stack Overflow explains it:    CPython’s list.sort is implemented in C (avoiding interpreter overhead), while heapq.merge is mostly implemented in Python, and optimizes for the “many iterables” case in a way that slows the “two iterables” case.    This means that if I drop down to C and write a C extension I should be able to beat Timsort. This turned out to be easier than I thought it would be2.   The C Extension   The bulk of the C Extension, whose performance I’m going to cover in a minute, is just the pop the stack algorithm discussed before, but using an index to point to the head of the stack:     //New List   PyObject* mergedList = PyList_New( n1 + n2 );    for( i = 0;; ) {     elem1 = PyList_GetItem( listObj1, i1 );     elem2 = PyList_GetItem( listObj2, i2 );     result = PyObject_RichCompareBool(v, w, Py_LT);     switch( result ) {       // List1 has smallest, Pop from list 1       case 1:         PyList_SetItem( mergedList, i++, elem1 );         i1++;         break;        case 0:           // List2 has smallest, Pop from list 2         PyList_SetItem( mergedList, i++, elem2 );         i2++;         break;     }     if( i2 >= n2 || i1 >= n1 )) {     //One list is empty, add remainder of other list to result     ...     break;     }  }  return mergedList;   C merge (full and final version on GitHub)   The nice thing about C extensions in Python is that they are easy to use. Once compiled, I can just import merge and use my new merge method:   import merge  # create some sorted lists a = list(range(-100, 1700)) b = list(range(1400, 1800))  # merge them merge.merge(a, b)   Testing It   Testing my new merge with a list of integers and floats, we can see that we are beating Timsort, especially for long lists:   import merge import timeit  a = list(range(-100, 1700)) + [0.1] b = list(range(1400, 1800))  def merge_test():    m1 = merge.merge(a, b)  def sort_test():    m2 = list(a + b)    m2.sort()  sort_time = timeit.timeit(\"sort_test()\", setup=\"from __main__ import sort_test\", number=100000) merge_time = timeit.timeit(\"merge_test()\", setup=\"from __main__ import merge_test\",number=100000)  print(f'timsort took {sort_time} seconds') print(f'merge took {merge_time} seconds')   timsort took 3.9523325259999997 seconds merge took 3.0547665259999994 seconds   Graphing the performance we get this:       We are beating Timsort with our merge    But if we switch to a list of only integers sort is beating us for small lists and even on big lists our performance improvement is thin at best:       With lists of all int or all float we lose our advantage.    What is going on here?   Timsort’s Special Comparisons   It turns out that Timsort has some extra tricks up its sleeves in the case of a list of integers. In that initial pass over the list, it checks the types of the elements, and if they are all uniform it tries to use a cheaper comparison operation.   Specifically, if your list is all longs, floats, or Latin strings Timsort will save a lot of cycles on the comparison operations.   Learning from Timsort we can bring in these comparison operations ourselves. We don’t want to do a full pass over the list, or we will lose our advantage, so we can just specialize our merge by offering separate calls for longs, floats, and Latin alphabet strings like so:   //Default comparison PyObject* merge( PyObject*, PyObject* );  //Compare assuming ints PyObject* merge_int( PyObject*, PyObject* );  //Compare assuming floats PyObject* merge_float( PyObject*, PyObject* );  //Compare assuming latin PyObject* merge_latin( PyObject*, PyObject* )   merge.h   Beating TimSort   Doing that, we now can finally beat Timsort at merging sorted lists, not just when the list is a heterogeneous mix of elements, but also when it’s all integers, or floating-point numbers, or one byte per char strings.       merge vs TimSort for int.        merge vs TimSort for float.        merge vs TimSort for Latin alphabet strings.        merge vs TimSort for everything without a specialized compare.    The default merge beats Timsort for heterogeneous lists, and the specialized versions are there for when you have uniform types in your list, and you need to go fast.   TimSort Is Good   There, I have beat Timsort for merging sorting lists, although I had to pull in some code from TimSort itself to get here. I’m not sure how valuable this is: if you need to go fast, you might not choose Python, but it was a fun learning project.   Also, I learned that dropping down to C isn’t as scary as it sounds. The build steps are a bit more involved, but with the included Earthfile, the build is a one-liner and works cross-platform. You can find the code on GitHub and an intro to Earthly on this very site, and with that example, you can build your own C extension reasonably quickly.   The surprising thing, though, is how good Timsort still is. It wasn’t designed for merging sorted lists but for sorting real-world data. It turns out real-world data is often partially sorted, just like our use case.   Timsort on partially sorted data shows us where Big O notation can misinform us. If your input always keeps you near the median or best-case performance, then the worst-case performance doesn’t matter much. It’s no wonder then that since its first creation, Timsort has spread from Python to JavaScript, Swift, and Rust. Thank you, Tim Peters!        Practically, you might not want to use pop, but just track an index of where the head of the stack should be, like the C code shown later.↩︎     It was easier because my teammate Alex has experience writing C extensions for Python, so by the time I had found the Python header files, Alex had already put together a prototype solution.↩︎"
  },
  {
    "Title": "The ASP.NET Team @TheASPNETTeam",
    "Url": "https://www.pscp.tv/w/c7xsfzFyYWpaeUJKTE9aS3p8MVprS3plYnBrQnl4doGWVHO7FoeNM5axhLef1QJY8SsIvq0oqAI8VqKwubAg",
    "Timestamp": "2021-07-13T18:03:54",
    "Domain": "www.pscp.tv",
    "Description": "ASP.NET Community Standup - Building with Blazor: Powered4.tv - Chat live at https://live.dot.net"
  },
  {
    "Title": "Writing a Bash Builtin in C to Parse INI Configs",
    "Url": "https://mbuki-mvuki.org/posts/2021-07-12-writing-a-bash-builtin-in-c-to-parse-ini-configs/",
    "Timestamp": "2021-07-13T16:04:36",
    "Domain": "mbuki-mvuki.org",
    "Description": "Why Not Just Parse INI Configs With Bash? Shell languages such as Bash excel at certain tasks, such as gluing programs together or quickly automating a set of command line steps. In contrast to those strengths, using a Shell to parse an INI config file is a bit like writing a poem in mud, you might succeed, but the result will probably be inscrutable and your swear jar will be full!"
  },
  {
    "Title": "You Really Shouldn't Roll Your Own Crypto: An Empirical Study of Vulnerabilities in Cryptographic Libraries",
    "Url": "https://arxiv.org/abs/2107.04940",
    "Timestamp": "2021-07-13T16:04:34",
    "Domain": "arxiv.org",
    "Description": "The security of the Internet rests on a small number of open-source\ncryptographic libraries: a vulnerability in any one of them threatens to\ncompromise a significant percentage of web traffic. Despite this potential for\nsecurity impact, the characteristics and causes of vulnerabilities in\ncryptographic software are not well understood. In this work, we conduct the\nfirst comprehensive analysis of cryptographic libraries and the vulnerabilities\naffecting them. We collect data from the National Vulnerability Database,\nindividual project repositories and mailing lists, and other relevant sources\nfor eight widely used cryptographic libraries.\n  Among our most interesting findings is that only 27.2% of vulnerabilities in\ncryptographic libraries are cryptographic issues while 37.2% of vulnerabilities\nare memory safety issues, indicating that systems-level bugs are a greater\nsecurity concern than the actual cryptographic procedures. In our investigation\nof the causes of these vulnerabilities, we find evidence of a strong\ncorrelation between the complexity of these libraries and their (in)security,\nempirically demonstrating the potential risks of bloated cryptographic\ncodebases. We further compare our findings with non-cryptographic systems,\nobserving that these systems are, indeed, more complex than similar\ncounterparts, and that this excess complexity appears to produce significantly\nmore vulnerabilities in cryptographic libraries than in non-cryptographic\nsoftware."
  },
  {
    "Title": "How did copying and renaming with wildcards work in MS-DOS?",
    "Url": "https://devblogs.microsoft.com/oldnewthing/20210713-00/?p=105433",
    "Timestamp": "2021-07-13T15:06:31",
    "Domain": "devblogs.microsoft.com",
    "Description": "Some time ago, I described how wildcards worked in MS-DOS, specifically how wildcards participate in pattern matching. Today, I’ll look at how wildcards participate in copying and renaming. First, the source and destination patterns are expanded into the eleven-character FCB format by the algorithm I described in that earlier article."
  },
  {
    "Title": "My Silly JavaScript Mistake - I FORGOT ABOUT FOR LOOPS!",
    "Url": "https://www.youtube.com/watch?v=etdj4qtsYN0",
    "Timestamp": "2021-07-13T15:06:28",
    "Domain": "www.youtube.com",
    "Description": "I completely forgot about for loops... I tried to get fancy and use the forEach method with an array when it was completely unnecessary.Image Gallery Video -..."
  },
  {
    "Title": "Postmortem: The case of the pauses, the fault and the GC",
    "Url": "https://ayende.com/blog/194177-A/postmortem-the-case-of-the-pauses-the-fault-and-the-gc?Key=01e08ec5-4e36-4293-a58a-1343784f8d0e",
    "Timestamp": "2021-07-13T15:06:24",
    "Domain": "ayende.com",
    "Description": "A RavenDB customer called us with an interesting issue. Every now and then, RavenDB will stop process any and all requests. These pauses could last for as lo..."
  },
  {
    "Title": "The End is Nigh",
    "Url": "https://np.reddit.com/user/SaveVideo/comments/oimo6y/the_end_is_nigh/",
    "Timestamp": "2021-07-13T14:05:58",
    "Domain": "np.reddit.com",
    "Description": "Hello users,It has been a great pleasure to serve you all in the past few months. However, as they say, **All good things must come to an..."
  },
  {
    "Title": "Highlights from Microsoft Build 2021",
    "Url": "https://www.meetup.com/fr-FR/msdevmtl/events/279441111/",
    "Timestamp": "2021-07-13T14:05:53",
    "Domain": "www.meetup.com",
    "Description": "jeu. 15 juil. 2021 à 18:00: Microsoft Build 2021 , an annual event for developers by developers just concluded and this year’s virtual experience allowed developers around the globe to meet the Micros"
  },
  {
    "Title": "Converting Images and Videos to ASCII",
    "Url": "https://www.youtube.com/watch?v=Ad_T9uC9uCg",
    "Timestamp": "2021-07-13T14:04:09",
    "Domain": "www.youtube.com",
    "Description": "I'm sure this has been done before, but here is my take on a program that converts images and webcam video into ASCII representations. It uses Python and the..."
  },
  {
    "Title": "The overall design and a first look at the internals: A deep dive on StringBuilder - Part 1",
    "Url": "https://andrewlock.net/a-deep-dive-on-stringbuilder-part-1-the-overall-design-and-first-look-at-the-internals/",
    "Timestamp": "2021-07-13T13:04:52",
    "Domain": "andrewlock.net",
    "Description": "In this post I take an initial look at the StringBuilder type, show how it's designed, and dive into the source code to see how it works"
  },
  {
    "Title": "What is Span in C# and why you should be using it",
    "Url": "https://www.youtube.com/watch?v=FM5dpxJMULY",
    "Timestamp": "2021-07-13T13:04:49",
    "Domain": "www.youtube.com",
    "Description": "Subscribe: http://bit.ly/ChapsasSubBecome a Patreon and get source code access: https://www.patreon.com/nickchapsasHello everybody I'm Nick and in this video..."
  },
  {
    "Title": "Episode 19: Blazor with Chris Sainty",
    "Url": "https://unhandledexceptionpodcast.com/posts/0019-blazor/",
    "Timestamp": "2021-07-13T11:04:31",
    "Domain": "unhandledexceptionpodcast.com",
    "Description": "In this episode, I was thrilled to be joined by Chris Sainty to chat all about Blazor! Blazor is a new .NET technology allowing you to build SPA-like frontend web UIs in C#! Very focused on developer productivity and componentisation - Blazor is certainly going to become my go-to for frontends moving forward! And chatting with Chris in this episode, has shown me even more reasons why Blazor is becoming so immensely popular!"
  }
]