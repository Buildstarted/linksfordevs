[
  {
    "Title": "Helix",
    "Url": "https://helix-editor.com/news/release-25-01-highlights/",
    "Timestamp": "2025-01-04T13:01:37",
    "Domain": "helix-editor.com",
    "Description": "A post-modern modal text editor.",
    "Confidence": 0.9942733
  },
  {
    "Title": "Which Projects To Build?! - Principal Software Engineering Manager AMA",
    "Url": "https://youtube.com/watch?v=_8BSVnT8mdw",
    "Timestamp": "2025-01-04T09:01:30",
    "Domain": "youtube.com",
    "Description": "This comes up all the time -- if I'm applying for jobs, which types of projects should I be building?\n\nI see different answers for this, and I think that there are multiple ways to go... but it's important to understand the goals!\n\nAs with all livestreams, I'm looking forward to answering YOUR questions! So join me live and ask in the chat, or you can comment now and I can try to get it answered while I stream.\r\n\r\n----\r\nüîë Membership & Subscriptions:\n- üì® Weekly Newsletter: https://weekly.devleader.ca\n- üèòÔ∏è Private Discord Community: https://sidestack.io/devleader\n\nüß† Courses:\n- All Courses: https://www.devleader.ca/courses\n- Get Promoted As A Software Engineer: https://dometrain.com/course/career-getting-promoted-as-a-software-engineer/?ref=nick-cosentino\n- Nailing The Behavioral Interview: https://dometrain.com/course/career-nailing-the-behavioral-interview/?ref=nick-cosentino\n- Getting Started with C#: https://dometrain.com/course/getting-started-csharp?ref=nick-cosentino\n- Deep dive C#: https://dometrain.com/course/deep-dive-csharp?ref=nick-cosentino\n- C# Zero to Hero BUNDLE: https://dometrain.com/bundle/from-zero-to-hero-csharp/?ref=nick-cosentino\n- Reflection in .NET: https://dometrain.com/course/from-zero-to-hero-reflection-in-dotnet/?ref=nick-cosentino\n- Refactoring For C# Devs: https://dometrain.com/course/from-zero-to-hero-refactoring-for-csharp-developers?ref=nick-cosentino\n- [FREE] Intro to Software Development: https://www.youtube.com/playlist?list=PLzATctVhnsggb3lj53T8fJSK6LJQFUyKS\r\n\r\nüó£Ô∏è Social Media & Links:\r\n- All My Links: https://linktr.ee/devleader\r\n- Vlogs: @DevLeaderBTS  @CodeCommute \r\n- Blog: https://www.devleader.ca/\r\n- TikTok: https://www.tiktok.com/@devleader\r\n- LinkedIn: https://www.linkedin.com/in/nickcosentino\r\n- Threads: https://threads.net/@dev.leader\r\n- Twitter: https://twitter.com/DevLeaderCa\r\n- Facebook: https://www.facebook.com/DevLeaderCa\r\n- Instagram: https://www.instagram.com/dev.leader\r\n- GitHub: https://github.com/ncosentino/\r\n- Twitch: https://twitch.tv/devleaderca\r\n- YouTube: https://youtube.com/@DevLeader?sub_confirmation=1\r\n\r\n‚ù§Ô∏è Affiliations & Products/Services That I Love:\r\n- @BrandGhostAI  for all of my content creation: https://brandghost.ai\r\n- AI shorts helper Opus Clip: https://opus.pro/?via=2f9e97\r\n- VPS hosting from RackNerd: https://my.racknerd.com/aff.php?aff=9013\r\n- VPS hosting from Contabo: https://www.jdoqocy.com/click-101028632-12454592\r\n- Newsletter platform ConvertKit: https://convertkit.com/?lmref=c5X7KQ\r\n- Newsletter referral system SparkLoop: https://dash.sparkloop.app/signup?aff=9fe76c8b\r\n----\r\n#ama #askmeanything #softwareengineering #softwareengineer",
    "Confidence": 0.99063617
  },
  {
    "Title": "OpenSPH",
    "Url": "https://pavelsevecek.github.io/",
    "Timestamp": "2025-01-04T03:01:52",
    "Domain": "pavelsevecek.github.io",
    "Description": "A new graphical application that uses the OpenSPH solver, but with a user interface that is more interactive, intuitive, and easy to use. This version is still under development.",
    "Confidence": 0.968257
  },
  {
    "Title": "The Missing Mirror",
    "Url": "https://virtuallytd.com/posts/the-missing-mirror/",
    "Timestamp": "2025-01-04T02:05:10",
    "Domain": "virtuallytd.com",
    "Description": "Delve into the nuanced realm of morality in 'The Missing Mirror.' This article explores the profound impact of self-reflection and remorse on distinguishing 'good' people from 'bad.' Discover how empathy and the ability to recognize one's mistakes foster personal growth and redefine our understanding of moral character.",
    "Confidence": 0.97960603
  },
  {
    "Title": "Writing About Writing",
    "Url": "https://www.matthartz.me/p/writing-about-writing",
    "Timestamp": "2025-01-04T02:02:22",
    "Domain": "www.matthartz.me",
    "Description": "Starting this blog has given me a strong incentive to organize my thoughts.",
    "Confidence": 0.9772658
  },
  {
    "Title": "How we speed up filtered vector search with ACORN | Weaviate",
    "Url": "https://weaviate.io/blog/speed-up-filtered-vector-search",
    "Timestamp": "2025-01-04T02:02:22",
    "Domain": "weaviate.io",
    "Description": "Learn about the challenges of filtered vector search and how Weaviate tackles them with ACORN.",
    "Confidence": 0.9921319
  },
  {
    "Title": "Farewell: Third-Generation (3G UMTS WCDMA) Mobile Service in Australia (2002-2024)",
    "Url": "https://goughlui.com/2024/12/31/farewell-third-generation-3g-umts-wcdma-mobile-service-in-australia-2002-2024/",
    "Timestamp": "2025-01-04T02:02:22",
    "Domain": "goughlui.com",
    "Description": "After 22 long years, third-generation (or better known as 3G) mobile telephone service for the general public has ended across Australia. Sometimes also known as the ‚ÄúUniversal Mobile Telecom‚Ä¶",
    "Confidence": 0.9436262
  },
  {
    "Title": "DIY Multideck | A game system to play hundreds of board games",
    "Url": "https://diymultideck.mauri.app/manual/",
    "Timestamp": "2025-01-04T02:02:22",
    "Domain": "diymultideck.mauri.app",
    "Description": "The DIY multideck is a deck of 162 playing cards (3 standard decks) that allows you to play hundreds of existing games, not only classic card games but also modern games that use components like boards or coins. The DIY multideck is ideal for traveling and prototyping new games.",
    "Confidence": 0.9756
  },
  {
    "Title": "My objection(s) to the \"LLMs are just next-token predictors\" take | Alejandro Tlaie Boria, PhD",
    "Url": "https://alejandrotlaie.net/my-objections-to-the-llms-are-just-next-token-predictors-take",
    "Timestamp": "2025-01-04T02:02:21",
    "Domain": "alejandrotlaie.net",
    "Description": "An outline of why I believe this is a wrong stance to have in light of the current evidence",
    "Confidence": 0.90708053
  },
  {
    "Title": "Maximum Speed SQLite Inserts",
    "Url": "https://blog.julik.nl/2025/01/maximum-speed-sqlite-inserts",
    "Timestamp": "2025-01-04T02:02:20",
    "Domain": "blog.julik.nl",
    "Description": "In my work I tend to reach for SQLite more and more. The type of work I find it useful for most these days is quickly amalgamating, dissecting, collecting and analyzing large data sets. As I have outlined in my Euruko talk on scheduling, a key element of the project was writing a simulator. That simulator outputs metrics - lots and lots of metrics, which resemble what our APM solution collects. Looking at those metrics makes it possible to plot, dissect and examine the performance of various job flows. You can, of course, store those metrics in plain Ruby objects and then work with them in memory - there is nothing wrong with that. However, I find using SQL vastly superior. And since the simulator only ever runs on one machine, and every session is unique - SQLite is the perfect tool for collecting metrics. Even if it is not a specialized datastore. One challenge presented itself, though: those metrics get output in very large amounts. Every tick of the simulator can generate thousands of values. Persisting them to SQLite is fast, but with very large amounts that ‚Äúfast‚Äù becomes ‚Äúnot that fast‚Äù. I had to go through a number of steps to make these inserts more palatable, which led to a very, very pleasant speed improvement indeed. That seems worth sharing - so strap in and let‚Äôs play. Setting the scene Let‚Äôs generate our data first and see how far we can push our little setup. rng = Random.new(42) metrics = %w( foo bar baz bad bleg ) values = (500_000).times.map do |n| {name: metrics.sample(random: rng), value: rng.rand} end We will assume we are inserting from Hash objects representing column-value mappings. We will use a fresh database for every test and keep it in memory to not even care about the filesystem performance - for now: def create_db db = SQLite3::Database.new(\":memory:\") db.execute(\"CREATE TABLE metrics (name VARCHAR NOT NULL, value FLOAT NOT NULL)\") db end and add a timing helper: def timed(&blk) t = Process.clock_gettime(Process::CLOCK_MONOTONIC) yield delta = Process.clock_gettime(Process::CLOCK_MONOTONIC) - t warn \"Took #{delta} seconds\" end First - the naive insert: timed(\"Naive\") do db = create_db first_record = values.first cols = first_record.keys.join(\", \") placeholders = ([\"?\"] * first_record.length).join(\", \") sql = \"INSERT INTO metrics (#{cols}) VALUES (#{placeholders})\" values.each do |cols_to_values| db.query(sql, cols_to_values.values) end end This gives Naive - 2.3065050000150222 seconds. Surely we can do better than that. Transactions for bulk insert are great, let‚Äôs use one: timed(\"With transaction\") do db = create_db db.transaction do first_record = values.first cols = first_record.keys.join(\", \") placeholders = ([\"?\"] * first_record.length).join(\", \") sql = \"INSERT INTO metrics (#{cols}) VALUES (#{placeholders})\" values.each do |cols_to_values| db.query(sql, cols_to_values.values) end end end That gives With transaction - 1.8898840000038035 seconds. Better, but by far not the improvement we need. Let‚Äôs use a prepared statement next: timed(\"With transaction and prepared statement\") do db = create_db first_record = values.first cols = first_record.keys.join(\", \") placeholders = ([\"?\"] * first_record.length).join(\", \") sql_stmt = \"INSERT INTO metrics (#{cols}) VALUES (#{placeholders})\" db.transaction do prepared_stmt = db.prepare(sql_stmt) values.each do |cols_to_values| prepared_stmt.execute(cols_to_values.values) end end end This gives: With transaction and prepared statement - 0.6456299999845214 seconds - much better. But we can go further. By default SQLite optimizes for durability (at least on my version). Since we are working with a local database and we do not care about a potential crash, we can ‚Äúdowngrade‚Äù the durability of the storage engine to get more speed: timed(\"With pragmas, transaction and prepared statement\") do db = create_db db.query(\"PRAGMA synchronous = OFF\") db.query(\"PRAGMA journal_mode = OFF\") first_record = values.first cols = first_record.keys.join(\", \") placeholders = ([\"?\"] * first_record.length).join(\", \") sql_stmt = \"INSERT INTO metrics (#{cols}) VALUES (#{placeholders})\" db.transaction do prepared_stmt = db.prepare(sql_stmt) values.each do |cols_to_values| prepared_stmt.execute(cols_to_values.values) end end end Still better: With pragmas, transaction and prepared statement - 0.6219140000175685 seconds - this is already a substantial improvement, but we can give the crank another turn. Host parameter stuffing How can we make it even faster than that? Well, the INSERT SQL statement supports multiple tuples in sequence, as long as they have the same cardinality. A bit like so: INSERT INTO metrics (name, value) VALUES ('foo', 1.0), ('bar', 2.0), ('baz', 4.0) We can assign our placeholders in the prepared statement and then pass our bound parameters in the end: db.query(\"INSERT INTO metrics (name, value) VALUES (?, ?), (?, ?)\", [\"foo\", 1.0, \"bar\", 2.0\"]) But there is a limit - the maximum number of bound variables per SQL statement, varies with the version of SQLite. Sadly, the sqlite3 gem does not support querying for sqlite3_limit(), but the info says: To prevent excessive memory allocations, the maximum value of a host parameter number is SQLITE_MAX_VARIABLE_NUMBER, which defaults to 999 for SQLite versions prior to 3.32.0 (2020-05-22) or 32766 for SQLite versions after 3.32.0. We can thus assume the value to be 999 for now (but you can query for the version using SQLite3::VERSION or try to find another way to access the sqlite3_limit API). What we need to do is figure out how many of our records we can stuff into a single INSERT - since we cannot really ‚Äúsplit‚Äù the records, we always need to insert all values pertaining to a single record in one statement. max_bindvars = 999 first_record = values.first cardinality = first_record.length records_per_statement, _ = max_bindvars.divmod(cardinality) This shows us that we can at most stuff records_per_statement into a single INSERT (the remainder is not really useful here). We will use 2 statements, one of which we will prepare - since it is going to be reused. The first one will fit as many records as we can and bind variables for all of them - 999 bindvars or less, depending on the cardinality of our records. The second one will contain enough bindvars to fit the remaining records, and will be used only once - in fact, we do not even need to prepare it. timed(\"With multirow inserts, pragmas, transaction and prepared statement\") do db = create_db db.query(\"PRAGMA synchronous = OFF\") db.query(\"PRAGMA journal_mode = OFF\") first_record = values.first # We need to group our records into blocks of at most max_bindvars values cardinality = first_record.length row_placeholder = \"(\" + ([\"?\"] * cardinality).join(\", \") + \")\" # => (?, ?, ?) max_bindvars = 999 max_records_per_statement, _ = max_bindvars.divmod(cardinality) prepared_statement_for_max = nil cols = first_record.keys.join(\", \") db.transaction do values.each_slice(max_records_per_statement) do |records_subset| bound_params = records_subset.flat_map(&:values) if records_subset.length == max_records_per_statement prepared_statement_for_max ||= begin placeholders_for_larger_chunk = ([row_placeholder] * max_records_per_statement).join(\", \") sql_max = \"INSERT INTO metrics (#{cols}) VALUES #{placeholders_for_larger_chunk}\" db.prepare(sql_max) end prepared_statement_for_max.execute(bound_params) else # This is the last slice which is smaller placeholders_for_smaller_chunk = ([row_placeholder] * records_subset.length).join(\", \") sql_rest = \"INSERT INTO metrics (#{cols}) VALUES #{placeholders_for_smaller_chunk}\" db.query(sql_rest, bound_params) end end end end Running all of our implementations then gives us: Naive - 2.7048650000069756 seconds With transaction - 2.3600640000076964 seconds With transaction and prepared statement - 0.637083999987226 seconds With pragmas, transaction and prepared statement - 0.6406159999896772 seconds With multirow inserts, pragmas, transaction and prepared statement - 0.3141590000013821 seconds We can see that using multirow inserts gives us a 2x speedup. Splendid. Memory databases to disk Of course, this is with memory databases - so it is probably very fast because of that. But what if I told you that you can actually serialize a memory DB onto disk very quickly, just using the builtin SQLite functions? A little-known feature of SQLite called online backup can be used to prepare your database in memory, do all of the bulk operations ‚Äì and then write it out onto the filesystem, in a very fast (and consistent) way. The API in the Ruby gem is not pretty - but it is there and it works, and it works well (has been for more than a decade, in fact). Let‚Äôs put it to use: def write_to_disk(source_db, filename) destination_db = SQLite3::Database.new(filename) b = SQLite3::Backup.new(destination_db, 'main', source_db, 'main') begin b.step(1) end while b.remaining > 0 b.finish destination_db.close end Running the code gives us: Naive - 2.706573000003118 seconds With a prepared statement - 0.990191999997478 seconds With transaction and prepared statement - 0.627656000026036 seconds With pragmas, transaction and prepared statement - 0.6277800000098068 seconds With multirow inserts, pragmas, transaction and prepared statement - 0.3135960000217892 seconds These timings include serialization to disk using the backup API. And produces a few SQLite3 files of exactly the same size. Comparing disk and memory performance Out of curiosity, I would like to show what kind of performance we can have if we perform the same ‚Äúaccelerated‚Äù inserts on a disk DB, with the same 500000 rows: Disk DBs: Naive - 474.50496300001396 seconds With transaction - 2.3882359999988694 seconds With transaction and prepared statement - 0.7706829999806359 seconds With pragmas, transaction and prepared statement - 0.7386469999910332 seconds With multirow inserts, pragmas, transaction and prepared statement - 0.3565039999957662 seconds Memory DBs: Naive - 2.3065050000150222 seconds With transaction - 1.8898840000038035 seconds With transaction and prepared statement - 0.6456299999845214 seconds With pragmas, transaction and prepared statement - 0.634888000000501 seconds With multirow inserts, pragmas, transaction and prepared statement - 0.31626500000129454 seconds This is curious: using a DB in RAM only helps is in the most pathological case with our ‚Äúnaive‚Äù inserts ‚Äì but for other cases performance is on par. Aren‚Äôt modern SSDs marvelous? So there you have it: a roughly x8 speedup for inserts.",
    "Confidence": 0.9881529
  },
  {
    "Title": "A Software Observability Roundup - parente.dev",
    "Url": "https://blog.parente.dev/software-observability-roundup/",
    "Timestamp": "2025-01-04T02:02:20",
    "Domain": "blog.parente.dev",
    "Description": "I spent some time recently catching up on my #to-read saves in Obsidian. More than a fewof these were blog posts from 2024 about software observability. Talk of \"redefining observability\",\"observability 2.0\", and \"try Honeycomb\" had caught my eye in a few spaces,and so I had been hoarding links on the topic. After spending a few days immersing myself in thosearticles and branching out to others, I decided to write this bullet-form roundup.",
    "Confidence": 0.9197064
  },
  {
    "Title": "Bitmasking: Storing Multiple States in a Single Integer",
    "Url": "https://www.ika.im/posts/bitmasking",
    "Timestamp": "2025-01-04T02:02:20",
    "Domain": "www.ika.im",
    "Description": "Elegant and super-useful technique to store multiple on/off states into a single value.",
    "Confidence": 0.9969987
  },
  {
    "Title": "On log levels",
    "Url": "https://weberdominik.com/blog/on-log-levels/",
    "Timestamp": "2025-01-04T02:02:20",
    "Domain": "weberdominik.com",
    "Description": "",
    "Confidence": 0.99801147
  },
  {
    "Title": "New Year resolution: sponsoring some of the open source projects I use",
    "Url": "https://www.andreagrandi.it/posts/new-year-resolution-sponsoring-opensource-projects/",
    "Timestamp": "2025-01-04T02:02:19",
    "Domain": "www.andreagrandi.it",
    "Description": "I decided to set aside a monthly budget and sponsor a few open source projects I regularly use.",
    "Confidence": 0.952446
  },
  {
    "Title": "Using LLMs and Cursor to become a finisher",
    "Url": "https://zohaib.me/using-llms-and-cursor-for-finishing-projects-productivity/",
    "Timestamp": "2025-01-04T02:02:19",
    "Domain": "zohaib.me",
    "Description": "Struggling to finish side projects due to limited time? In my latest blog post, I share how I improved my productivity using AI tools like LLMs and Cursor IDE. Learn to refine specs, bootstrap code, and iterate effectively to rapidly build and deploy your projects‚Äîeven with a busy schedule.",
    "Confidence": 0.9988368
  },
  {
    "Title": "The JIT calculator challenge",
    "Url": "https://ochagavia.nl/blog/the-jit-calculator-challenge/",
    "Timestamp": "2025-01-04T02:02:18",
    "Domain": "ochagavia.nl",
    "Description": "Advent of code has come and passed, what should I do now with so much free time? Fear not! The JIT calculator challenge is here.\n1. The challenge Back when Rust was in its infancy, the official website featured an example program to showcase the language‚Äôs syntax. It was a toy calculator, implemented as an interpreter in 20 lines of code.\nWhy talk about website archaeology, though? We are not here for nostalgia‚Äôs sake, are we?",
    "Confidence": 0.99881715
  },
  {
    "Title": "My Takeaways From 12 Months of Therapy",
    "Url": "https://cauldron.life/blog/my-takeaways-from-therapy/",
    "Timestamp": "2025-01-04T02:02:15",
    "Domain": "cauldron.life",
    "Description": "Therapy had been a buzzword amongst some people I know and on the web. Honestly, I believed it to be a waste of time and money. I gave therapy a try first in 2021, but it was short-lived and not so great. In 2024, I again got curious about the mental health space and started paying more attention to the issues I was facing in my daily life. Things that are regular and normal, but when paid attention to, could be something deep. Some of these may even look silly at first glance, like getting angry when someone questions your choices. After 12 months of work with my therapist, I feel I‚Äôve gained much, and there‚Äôs some inner work everyone could do.",
    "Confidence": 0.8799345
  },
  {
    "Title": "Unit Testing Clean Architecture Use Cases",
    "Url": "https://www.milanjovanovic.tech/blog/unit-testing-clean-architecture-use-cases",
    "Timestamp": "2025-01-04T00:02:12",
    "Domain": "www.milanjovanovic.tech",
    "Description": "Drawing from years of experience, I share my battle-tested approach to unit testing Clean Architecture use cases in .NET, focusing on the critical balance between code coverage and test quality. Through practical examples and real-world scenarios, I'll demonstrate how to write effective tests that not only catch bugs but also provide confidence in your code deployments.",
    "Confidence": 0.99405813
  },
  {
    "Title": "I still don‚Äôt think companies serve you ads based on spying through your microphone",
    "Url": "https://simonwillison.net/2025/Jan/2/they-spy-on-you-but-not-like-that/",
    "Timestamp": "2025-01-04T00:02:10",
    "Domain": "simonwillison.net",
    "Description": "One of my weirder hobbies is trying to convince people that the idea that companies are listening to you through your phone‚Äôs microphone and serving you targeted ads is a ‚Ä¶",
    "Confidence": 0.7033432
  },
  {
    "Title": "Origami Black Hole",
    "Url": "https://xkcd.com/3033/",
    "Timestamp": "2025-01-03T19:01:46",
    "Domain": "xkcd.com",
    "Description": "",
    "Confidence": 0.98151064
  },
  {
    "Title": "GitHub - PWCT/PWCT2: Programming Without Coding Technology - Second Generation, written in the Ring programming language!",
    "Url": "https://github.com/PWCT/PWCT2",
    "Timestamp": "2025-01-03T18:01:41",
    "Domain": "github.com",
    "Description": "Programming Without Coding Technology - Second Generation, written in the Ring programming language! - PWCT/PWCT2",
    "Confidence": 0.9587552
  },
  {
    "Title": "Never Have Outdated Footer Dates Again",
    "Url": "https://getfullyear.com/",
    "Timestamp": "2025-01-03T17:01:43",
    "Domain": "getfullyear.com",
    "Description": "We've raised $4M to solve the problem of wrong years in footers.",
    "Confidence": 0.96120083
  },
  {
    "Title": "OpenAI hat detection with C#",
    "Url": "https://youtube.com/watch?v=R8RYuLlIFGk",
    "Timestamp": "2025-01-03T17:01:40",
    "Domain": "youtube.com",
    "Description": "Turn your videos into live streams with https://restream.io\n\nFritz is tuning a chatbot that runs in THIS STREAM that you can use to get information about the hat he is wearing.",
    "Confidence": 0.72392946
  },
  {
    "Title": "Can LLMs write better code if you keep asking them to ‚Äúwrite better code‚Äù?",
    "Url": "https://minimaxir.com/2025/01/write-better-code/",
    "Timestamp": "2025-01-03T16:01:47",
    "Domain": "minimaxir.com",
    "Description": "Most coders want AI to write code faster: I want AI to write FASTER CODE.",
    "Confidence": 0.99399185
  },
  {
    "Title": "BlogScroll - Personal Blog & Site Directory",
    "Url": "https://blogscroll.com/",
    "Timestamp": "2025-01-03T15:02:10",
    "Domain": "blogscroll.com",
    "Description": "An open directory of personal sites and blogs, maintained entirely on GitHub.",
    "Confidence": 0.96727914
  },
  {
    "Title": "Demystifying Network Programming: The Backbone of Modern Applications - Chris Woody Woodruff",
    "Url": "https://woodruff.dev/demystifying-network-programming-the-backbone-of-modern-applications/",
    "Timestamp": "2025-01-03T15:02:06",
    "Domain": "woodruff.dev",
    "Description": "Network programming might sound intimidating, but at its core, it‚Äôs the art of making applications talk to each other. Whether it‚Äôs your favorite messaging app sending texts in real-time or your smartwatch syncing health stats to your phone, network programming is the magic behind it all. It‚Äôs not just a technical skill‚Äîit‚Äôs the backbone of our interconnected digital world.",
    "Confidence": 0.997032
  },
  {
    "Title": "It Ain't For Everyone: Becoming An Engineering Manager",
    "Url": "https://youtube.com/watch?v=jnrm-9qmSR8",
    "Timestamp": "2025-01-03T14:01:37",
    "Domain": "youtube.com",
    "Description": "There are software engineers who might find themselves being promoted to an engineering manager role at some point in their career.\n\nBut is this really a great promotion? Will they be a good fit for the role? Let's discuss!\n\n----\nLinks From Video:\n- https://learn.microsoft.com/en-us/visualstudio/deployment/installer-projects-net-core?view=vs-2022\n- https://marketplace.visualstudio.com/items?itemName=VisualStudioClient.MicrosoftVisualStudio2022InstallerProjects\n\n----\nüîë Membership & Subscriptions:\n- üì® Weekly Newsletter: https://weekly.devleader.ca\n- üèòÔ∏è Private Discord Community: https://sidestack.io/devleader\n\nüß† Courses:\n- All Courses: https://www.devleader.ca/courses\n- Get Promoted As A Software Engineer: https://dometrain.com/course/career-getting-promoted-as-a-software-engineer/?ref=nick-cosentino\n- Nailing The Behavioral Interview: https://dometrain.com/course/career-nailing-the-behavioral-interview/?ref=nick-cosentino\n- Getting Started with C#: https://dometrain.com/course/getting-started-csharp?ref=nick-cosentino\n- Deep dive C#: https://dometrain.com/course/deep-dive-csharp?ref=nick-cosentino\n- C# Zero to Hero BUNDLE: https://dometrain.com/bundle/from-zero-to-hero-csharp/?ref=nick-cosentino\n- Reflection in .NET: https://dometrain.com/course/from-zero-to-hero-reflection-in-dotnet/?ref=nick-cosentino\n- Refactoring For C# Devs: https://dometrain.com/course/from-zero-to-hero-refactoring-for-csharp-developers?ref=nick-cosentino\n- [FREE] Intro to Software Development: https://www.youtube.com/playlist?list=PLzATctVhnsggb3lj53T8fJSK6LJQFUyKS\n\nüó£Ô∏è Social Media & Links:\n- All My Links: https://linktr.ee/devleader\n- Vlogs:  @DevLeaderBTS @CodeCommute \n- Blog: https://www.devleader.ca/\n- TikTok: https://www.tiktok.com/@devleader\n- LinkedIn: https://www.linkedin.com/in/nickcosentino\n- Threads: https://threads.net/@dev.leader\n- Twitter: https://twitter.com/DevLeaderCa\n- Facebook: https://www.facebook.com/DevLeaderCa\n- Instagram: https://www.instagram.com/dev.leader\n- GitHub: https://github.com/ncosentino/\n- Twitch: https://twitch.tv/devleaderca\n- YouTube: https://youtube.com/@DevLeader?sub_confirmation=1\n\n‚ù§Ô∏è Affiliations & Products/Services That I Love:\n- @BrandGhostAI for all of my content creation: https://brandghost.ai\n- AI shorts helper Opus Clip: https://opus.pro/?via=2f9e97\n- VPS hosting from RackNerd: https://my.racknerd.com/aff.php?aff=9013\n- VPS hosting from Contabo: https://www.jdoqocy.com/click-101028632-12454592\n- Newsletter platform ConvertKit: https://convertkit.com/?lmref=c5X7KQ\n- Newsletter referral system SparkLoop: https://dash.sparkloop.app/signup?aff=9fe76c8b\n----\n\n#softwareengineering #softwaredeveloper #softwareengineer",
    "Confidence": 0.9949385
  }
]