[
  {
    "Title": "Artificial Gravity",
    "Url": "https://xkcd.com/3111/",
    "Timestamp": "2025-07-04T16:02:16",
    "Domain": "xkcd.com",
    "Description": "",
    "Confidence": 0.98151064
  },
  {
    "Title": "The rise of Whatever",
    "Url": "https://eev.ee/blog/2025/07/03/the-rise-of-whatever/",
    "Timestamp": "2025-07-04T09:02:45",
    "Domain": "eev.ee",
    "Description": "This was originally titled “I miss when computers were fun”. But in the course of writing it, I discovered that there is a reason computers became less fun, a dark thread woven through a number of events in recent history. Let me back up a bit.",
    "Confidence": 0.9684576
  },
  {
    "Title": "Opening up ‘Zero-Knowledge Proof’ technology to promote privacy in age assurance",
    "Url": "https://blog.google/technology/safety-security/opening-up-zero-knowledge-proof-technology-to-promote-privacy-in-age-assurance/",
    "Timestamp": "2025-07-04T05:02:31",
    "Domain": "blog.google",
    "Description": "Today, we open sourced our Zero-Knowledge Proof (ZKP) libraries, fulfilling a promise and building on our partnership with Sparkasse to support EU age assurance.",
    "Confidence": 0.9877294
  },
  {
    "Title": "Taming agentic engineering - Prompts are code, .json/.md files are state",
    "Url": "https://mariozechner.at/posts/2025-06-02-prompts-are-code/",
    "Timestamp": "2025-07-04T00:02:37",
    "Domain": "mariozechner.at",
    "Description": "Treating LLMs as shitty general purpose computers we program with natural language. Because throwing shit at the wall wasn't working anymore.",
    "Confidence": 0.9987896
  },
  {
    "Title": "Can We Afford Large-scale Solar PV?",
    "Url": "https://www.construction-physics.com/p/can-we-afford-large-scale-solar-pv",
    "Timestamp": "2025-07-04T00:02:36",
    "Domain": "www.construction-physics.com",
    "Description": "In the US solar energy has steadily risen in how much of our electricity it supplies.",
    "Confidence": 0.9855003
  },
  {
    "Title": "[Bash] Building a Simple Social Media Blocker with Bash",
    "Url": "https://ebourgess.dev/posts/building-a-social-media-blocker/",
    "Timestamp": "2025-07-04T00:02:36",
    "Domain": "ebourgess.dev",
    "Description": "DevSecOps Engineer blogs about coding, life and other stuff",
    "Confidence": 0.99416405
  },
  {
    "Title": "You People Keep Contradicting Yourselves! — Taylor G. Lunt",
    "Url": "https://www.taylor.gl/blog/27",
    "Timestamp": "2025-07-04T00:02:35",
    "Domain": "www.taylor.gl",
    "Description": "I saw this tweet1 recently:",
    "Confidence": 0.7810487
  },
  {
    "Title": "Claude Code in a Chinese Room",
    "Url": "https://me.micahrl.com/blog/claude-code-chinese-room/",
    "Timestamp": "2025-07-04T00:02:33",
    "Domain": "me.micahrl.com",
    "Description": "All rituals restricted. All rites reserved.",
    "Confidence": 0.97737384
  },
  {
    "Title": "Using ClickHouse Cloud For Real Time Sports Analytics | BenjaminWootton.com",
    "Url": "https://benjaminwootton.com/insights/sports-analytics-with-clickhouse/",
    "Timestamp": "2025-07-04T00:02:32",
    "Domain": "benjaminwootton.com",
    "Description": "A demonstration of a real time sports analytics use case powered by ClickHouse.",
    "Confidence": 0.9664515
  },
  {
    "Title": "37 Things I Learned About Information Retrieval in Two Years at a Vector Database Company – Leonie Monigatti",
    "Url": "https://leoniemonigatti.com/blog/what_i_learned.html",
    "Timestamp": "2025-07-04T00:02:31",
    "Domain": "leoniemonigatti.com",
    "Description": "From BM25 to RAG: Everything I learned about vector databases, embedding models, and vector search - and everything in between.",
    "Confidence": 0.98775023
  },
  {
    "Title": "My LLMs Have Personalities and I Can’t Unsee It",
    "Url": "https://www.vincentschmalbach.com/my-llms-have-personalities-and-i-cant-unsee-it/",
    "Timestamp": "2025-07-04T00:02:30",
    "Domain": "www.vincentschmalbach.com",
    "Description": "Spending 8+ hours a day with AI assistants does things to you. Time to share my completely scientific personality assessments. GPT-3.5 was revolutionary when it arrived. Unlike its predecessor GPT-3…",
    "Confidence": 0.95274925
  },
  {
    "Title": "Self-hosting changed the way I listen to music",
    "Url": "https://arthi-chaud.github.io/posts/self-hosting/",
    "Timestamp": "2025-07-04T00:02:30",
    "Domain": "arthi-chaud.github.io",
    "Description": "A ROX on self-hosting media and how it impacted the way I consume multimedia",
    "Confidence": 0.98907834
  },
  {
    "Title": "Making a custom porteur bag",
    "Url": "https://macwright.com/2025/05/18/sewing",
    "Timestamp": "2025-07-04T00:02:30",
    "Domain": "macwright.com",
    "Description": "My first truly custom sewing project",
    "Confidence": 0.9559901
  },
  {
    "Title": "Extending that XOR Trick to Billions of Rows - an Introduction to Invertible Bloom Filters",
    "Url": "https://nochlin.com/blog/extending-that-xor-trick",
    "Timestamp": "2025-07-04T00:02:30",
    "Domain": "nochlin.com",
    "Description": "Learn how to extend the classic XOR trick to find thousands of missing values using Invertible Bloom Filters",
    "Confidence": 0.9869706
  },
  {
    "Title": "Stay Out Of My (Project) $HOME",
    "Url": "https://jackson.dev/post/stay-out-of-my-project-home/",
    "Timestamp": "2025-07-04T00:02:30",
    "Domain": "jackson.dev",
    "Description": "Warning, I’m about to get on my mild OCD soapbox again.\nToo many development tools expect to get the privilege of a config file in the root directory of my projects. Many of them don’t even allow it to be a hidden file—they just require a fully unhidden “tool.yml” file sitting right there in the root of your project.\nStop it. Please.\nLinux HOME Directory Link to heading Once upon a time this was a serious problem for organizing files in the Linux HOME directory too. Tools thought way too much of themselves and added files, directories, etc. to your HOME folder. A lot of them still do!",
    "Confidence": 0.99097127
  },
  {
    "Title": "Debouncing API Calls",
    "Url": "https://thomascountz.com/2025/07/02/debouncing-api-calls",
    "Timestamp": "2025-07-04T00:02:30",
    "Domain": "thomascountz.com",
    "Description": "Debounce Delay: 500ms Hardware The term “debouncing” originates from electronics (at least that’s where I first came across it). When you press a physical button or flip a switch, its metal contacts don’t connect cleanly just once; they “bounce,” opening and closing rapidly, creating multiple pulses of current as the circuit connects and disconnects. Although this happens on the order of milliseconds, filtering the rapid switching is necessary to prevent other components from misinterpreting the bounces as intentional signals. Debouncing in hardware ensures that only a single, clean signal is sent when the button is pressed. Software In software, we hit this same problem. Take search bars, for example. They often fire off an API call on every keystroke to give search results to users with broken enter keys. With a typing speed of around 200 characters-per-minute (3.33 characters-per-second), a user searching for “parachute pants” could trigger 16 API calls in about 5 seconds—and that’s assuming they don’t make any typos. We can’t possibly know which of those 16 API calls actually improve the user experience, but if I had to guess, search suggestions are most effective when presented after a natural pause in typing—not during every keystroke. Debouncing with Delays This debounce function uses setTimeout to delay the execution of a callback. function debounce(callback, delay) { let timerId; return (...args) => { clearTimeout(timerId); timerId = setTimeout(() => { callback(...args); }, delay); }; } If the returned function gets called again before the timer finishes, it clears the previous timer and starts a new one. This resets the wait time and prevents callbacks from executing until there has been a pause in calls for the specified delay. This is exactly what the demo above does. It waits for you to stop typing for a set number of milliseconds before updating the output field with your input. Delays and Cancellations For input-triggered API calls (like the search bar example) we can take this further by combining debouncing with request cancellation. When the user stops typing in the search bar, the app waits until after a delay (similar to our earlier debounce implementation) before making an API call to fetch search suggestions. If, however, the user begins typing again before the fetch resolves, we need a way to throw away the request. This is because, by the time we would receive a response, the user has already moved on and started searching for something else. So, before making any new API requests, we first cancel the previous fetch, using the AbortController API. function debouncedFetch(delay) { let timerId; let controller; return (...args) => { clearTimeout(timerId); if (controller) { controller.abort(); } controller = new AbortController(); const signal = controller.signal; timerId = setTimeout(async () => { const response = await fetch(`https://example.com`, { signal: controller.signal }); // Handle the response here }, delay); }; } This debouncedFetch function works in three steps. First, it clears any pending timer and cancels any in-flight request. If there’s no previous request (like on the first call), the latter step is skipped. Then, it creates a new AbortController and extracts its signal. This signal acts like a remote control that can cancel the upcoming fetch request at any time. This works because the fetch API supports aborting requests using an AbortSignal. Finally, it starts a new timer. When the timer expires, it calls fetch. And when fetch resolves, we handle the response as needed. So, as before, if the user types again before the timer expires, the timer is restarted before a new fetch request is made. In addition to this, if the user types again while the previous fetch is still in progress, that request is cancelled, the new input is debounced, and then finally, a new fetch request is made with the latest input.",
    "Confidence": 0.9439375
  },
  {
    "Title": "I’ve Got Better Things To Do Than This, and Yet",
    "Url": "https://lmnt.me/blog/ive-got-better-things-to-do-than-this-and-yet.html",
    "Timestamp": "2025-07-04T00:02:30",
    "Domain": "lmnt.me",
    "Description": "Last week, when I posted my Finder icon suggestion on Mastodon, I mentioned how I don’t really like spending my time talking about this kind of stuff. To clarify, I don’t like doing it when I have other things I would much rather be doing. Lately, I have an abundance of things I want to make, so spending any amount of time whining about Liquid Glass feels… bad. It just feels bad.",
    "Confidence": 0.98691565
  },
  {
    "Title": "Product Design, Developers and AI - GizVault: Unique Retro & Cyberpunk Tech Gear for Geeks",
    "Url": "https://www.gizvault.com/archives/product-design-dev-and-ai",
    "Timestamp": "2025-07-04T00:02:30",
    "Domain": "www.gizvault.com",
    "Description": "Explore our cyberpunk-inspired store for geeks and tech lovers. Find unique retro-tech gadgets and gear crafted for U.S. makers and creators.",
    "Confidence": 0.9646795
  },
  {
    "Title": "Take Two: Eshell",
    "Url": "http://yummymelon.com/devnull/take-two-eshell.html",
    "Timestamp": "2025-07-04T00:02:29",
    "Domain": "yummymelon.com",
    "Description": "This is a contribution to the Emacs Carnival 2025-06: Take Two collection of posts on Christian Tietze’s blog. My first take with Eshell many years back did not leave a good impression. My...",
    "Confidence": 0.99259704
  },
  {
    "Title": "This Overly Long Variable Name Could Have Been a Comment | Jonathan's Blog",
    "Url": "https://jonathan-frere.com/posts/names-vs-comments/",
    "Timestamp": "2025-07-04T00:02:29",
    "Domain": "jonathan-frere.com",
    "Description": "Here’s a belief I’ve held for a while but only recently been able to put into words: explanatory comments are often easier to understand than explanatory variable or function names.\nConsider a complicated expression with multiple sub-expressions. This expression is going to be difficult for the next person reading this code to decipher; we should make it easier for them.\nThere are a couple of ways to solve this. We could break down the expression into sub-expressions, and assign those sub-expressions to intermediate variables. Or we could pull the expression out into its own dedicated function. In each case, the goal is to give either part or all of the expression a dedicated name. This name helps the next reader to understand the purpose or meaning of the expression.",
    "Confidence": 0.9979884
  },
  {
    "Title": "Introducing tmux-rs",
    "Url": "https://richardscollin.github.io/tmux-rs/",
    "Timestamp": "2025-07-03T19:02:31",
    "Domain": "richardscollin.github.io",
    "Description": "A Rust port of tmux",
    "Confidence": 0.99566615
  }
]