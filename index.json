[
  {
    "Title": "Return youtube dislike count",
    "Url": "https://www.returnyoutubedislike.com/",
    "Timestamp": "2021-11-15T04:02:23",
    "Domain": "www.returnyoutubedislike.com",
    "Description": "",
    "Confidence": 0.9884588
  },
  {
    "Title": "SoK: Cryptographic Confidentiality of Data on Mobile Devices",
    "Url": "https://arxiv.org/abs/2109.11007",
    "Timestamp": "2021-11-15T03:02:17",
    "Domain": "arxiv.org",
    "Description": "Mobile devices have become an indispensable component of modern life. Their\nhigh storage capacity gives these devices the capability to store vast amounts\nof sensitive personal data, which makes them a high-value target: these devices\nare routinely stolen by criminals for data theft, and are increasingly viewed\nby law enforcement agencies as a valuable source of forensic data. Over the\npast several years, providers have deployed a number of advanced cryptographic\nfeatures intended to protect data on mobile devices, even in the strong setting\nwhere an attacker has physical access to a device. Many of these techniques\ndraw from the research literature, but have been adapted to this entirely new\nproblem setting.\n  This involves a number of novel challenges, which are incompletely addressed\nin the literature. In this work, we outline those challenges, and systematize\nthe known approaches to securing user data against extraction attacks. Our work\nproposes a methodology that researchers can use to analyze cryptographic data\nconfidentiality for mobile devices. We evaluate the existing literature for\nsecuring devices against data extraction adversaries with powerful capabilities\nincluding access to devices and to the cloud services they rely on. We then\nanalyze existing mobile device confidentiality measures to identify research\nareas that have not received proper attention from the community and represent\nopportunities for future research.",
    "Confidence": 0.71889764
  },
  {
    "Title": "Paul Graham 101",
    "Url": "https://www.jaakkoj.com/blog/graham",
    "Timestamp": "2021-11-15T00:02:32",
    "Domain": "www.jaakkoj.com",
    "Description": "A summary of Paul Graham’s 200+ essays. This is an introduction to his ideas on startups, writing, society, decision-making and more.",
    "Confidence": 0.72623837
  },
  {
    "Title": "Be flexible to win big",
    "Url": "https://pointieststick.com/2021/11/13/be-flexible-to-win-big/",
    "Timestamp": "2021-11-15T00:02:32",
    "Domain": "pointieststick.com",
    "Description": "My goal of KDE Plasma World Domination is not a secret at this point. But what does it truly take to get there? Let’s look at the existing market leaders in the OS space: Microsoft’s Wi…",
    "Confidence": 0.8466285
  },
  {
    "Title": "Writing new system software",
    "Url": "https://borud.no/notes/2021/system-software/",
    "Timestamp": "2021-11-15T00:02:32",
    "Domain": "borud.no",
    "Description": "When I see new projects being announced that are implemented in C or C++ I have to admit that I quickly lose interest. I think C and C++ are poor language choices for system software in 2021.",
    "Confidence": 0.9474166
  },
  {
    "Title": "Using a framework can make you stupid!",
    "Url": "https://unixsheikh.com/articles/using-a-framework-can-make-you-stupid.html",
    "Timestamp": "2021-11-15T00:02:31",
    "Domain": "unixsheikh.com",
    "Description": "Published on 2021-11-13.",
    "Confidence": 0.933964
  },
  {
    "Title": "The One Risk To Rule Them All",
    "Url": "https://timothy.de/blog/the-one-risk-to-rule-them-all/",
    "Timestamp": "2021-11-15T00:02:31",
    "Domain": "timothy.de",
    "Description": "We interviewed more than 40 innovators about their approaches to discovery. In this post, I'll share why I think value risk is not given enough attention and how to overcome this.",
    "Confidence": 0.81835216
  },
  {
    "Title": "‏Nils's website - The ultimate solution to the nightmare of truncated tab titles",
    "Url": "https://www.nilsand.re/programming/2021/11/14/title-direction.html",
    "Timestamp": "2021-11-15T00:02:31",
    "Domain": "www.nilsand.re",
    "Description": "I think we’ve all been in this situation: whilst navigating the pages of a website, following links by opening new tabs, we ultimately end up with an unnavigable mess:",
    "Confidence": 0.9548775
  },
  {
    "Title": "How Not To Switch To Linux With Your Hosts Linus and Luke",
    "Url": "https://jaylittle.com/post/view/2021/10/how-not-to-switch-to-linux-with-your-hosts-linus-and-luke",
    "Timestamp": "2021-11-15T00:02:31",
    "Domain": "jaylittle.com",
    "Description": "So over the last few weeks Linus and Luke over at LTT / FloatPlane have been teasing us with tales of their so-called Linux Challenge.  The basic premise being that whichever of them can switch from Windows to Linux on their daily driver home PCs, wins the challenge.  Simple enough, right?  Well as it turns out, not actually.",
    "Confidence": 0.8645479
  },
  {
    "Title": "Yes, Programming is Hard",
    "Url": "https://drew.thecsillags.com/posts/2021-11-14-yes-porgramming-is-hard/",
    "Timestamp": "2021-11-15T00:02:31",
    "Domain": "drew.thecsillags.com",
    "Description": "I saw the article in Communications of the ACM “What Does Saying That ‘Programming Is Hard’ Really Say, and About Whom?” and as a twenty-six year veteran of the profession, I thought “of course programming is hard! Duh!” I then spoke with a friend where after a bit said “Do they mean like writing? Writing isn’t hard, but writing a book is”.",
    "Confidence": 0.8479133
  },
  {
    "Title": "The present moment is not enough",
    "Url": "https://hadalin.me/essays/the-present-moment-is-not-enough",
    "Timestamp": "2021-11-15T00:02:31",
    "Domain": "hadalin.me",
    "Description": "It's most likely only you who thinks you're not good enough. Your operating system has a bug, and it's raising too many instances of NotGoodEnoughException.",
    "Confidence": 0.84605134
  },
  {
    "Title": "Making Super Mario Bros using C++ and SFML - SFML Tutorial",
    "Url": "https://youtu.be/7D4uoSoQsjw",
    "Timestamp": "2021-11-14T23:02:22",
    "Domain": "youtu.be",
    "Description": "I tried to remake the original Super Mario Bros by Nintendo using C++ and SFML.Code: https://github.com/Kofybrek/Super-Mario-BrosPatreon: https://www.patreon...",
    "Confidence": 0.67069095
  },
  {
    "Title": "GitHub - hectorm/docker-qemu-win2000: A Docker image for Windows 2000 Advanced Server with SP4.",
    "Url": "https://github.com/hectorm/docker-qemu-win2000",
    "Timestamp": "2021-11-14T23:02:19",
    "Domain": "github.com",
    "Description": "A Docker image for Windows 2000 Advanced Server with SP4. - GitHub - hectorm/docker-qemu-win2000: A Docker image for Windows 2000 Advanced Server with SP4.",
    "Confidence": 0.83884466
  },
  {
    "Title": "The System | Tilt Five",
    "Url": "https://www.tiltfive.com/the-system",
    "Timestamp": "2021-11-14T22:02:46",
    "Domain": "www.tiltfive.com",
    "Description": "",
    "Confidence": 0.95365256
  },
  {
    "Title": "Daily links from Cory Doctorow",
    "Url": "https://pluralistic.net/2021/11/14/still-the-product/#vizio",
    "Timestamp": "2021-11-14T22:02:46",
    "Domain": "pluralistic.net",
    "Description": "",
    "Confidence": 0.96940833
  },
  {
    "Title": "Daily links from Cory Doctorow",
    "Url": "https://pluralistic.net/2021/11/14/still-the-product/",
    "Timestamp": "2021-11-14T21:02:48",
    "Domain": "pluralistic.net",
    "Description": "",
    "Confidence": 0.7705746
  },
  {
    "Title": "C# 10 new feature CallerArgumentExpression, argument check and more",
    "Url": "https://weblogs.asp.net/dixin/csharp-10-new-feature-callerargumentexpression-argument-check-and-more",
    "Timestamp": "2021-11-14T21:02:48",
    "Domain": "weblogs.asp.net",
    "Description": "The CallerArgumentExpression has been discussed for years, it was supposed to a part of C# 8.0 but got delayed. Finally this month it is delivered along with C# 10 and .NET 6.&#160;&#8230;",
    "Confidence": 0.9965923
  },
  {
    "Title": "2022 could be the year of 8K monitors: Here’s why",
    "Url": "https://www.techradar.com/news/2022-could-be-the-year-of-8k-monitors-heres-why",
    "Timestamp": "2021-11-14T18:04:01",
    "Domain": "www.techradar.com",
    "Description": "Exclusive: Fast cards, high-octane displays, what’s not to like",
    "Confidence": 0.5495726
  },
  {
    "Title": "Intro to Graphics 22 - Signal Processing",
    "Url": "https://www.youtube.com/watch?v=UQl6ttthfXE",
    "Timestamp": "2021-11-14T18:03:59",
    "Domain": "www.youtube.com",
    "Description": "Introduction to Computer Graphics.School of Computing, University of Utah.Full playlist: https://www.youtube.com/playlist?list=PLplnkTzzqsZTfYh4UbhLGpI5kGd5o...",
    "Confidence": 0.617489
  },
  {
    "Title": "Hack Chinese - Professional software to grow your Chinese language ability",
    "Url": "https://www.hackchinese.com/?r=405487",
    "Timestamp": "2021-11-14T18:03:58",
    "Domain": "www.hackchinese.com",
    "Description": "Grow your Chinese language ability",
    "Confidence": 0.9610168
  },
  {
    "Title": "The weirdest bug I've ever encountered",
    "Url": "https://mental-reverb.com/blog.php?id=29",
    "Timestamp": "2021-11-14T18:03:58",
    "Domain": "mental-reverb.com",
    "Description": "I am responsible for the reliability of the firmware updates on our devices and this work never gets boring. The thing about firmware updates is that by definition, every bug is caused by the updater because before installing the affected version, the bug was not present. You could say that updates are the cause and the solution of all software problems. So, a lot of update bug reports that find their way to me have nothing to do with the updater per se, they just manifest themselves immediately, giving the impression that the updater is broken. But I'm getting ahead of myself, so let's start from the beginning.",
    "Confidence": 0.93756855
  },
  {
    "Title": "Champion \"CallerArgumentExpression\" · Issue #287 · dotnet/csharplang",
    "Url": "https://github.com/dotnet/csharplang/issues/287",
    "Timestamp": "2021-11-14T16:02:55",
    "Domain": "github.com",
    "Description": "Allow developers to capture the expressions passed to a method, to enable better error messages in diagnostic/testing APIs and reduce keystrokes. Proposal added caller-argument-expression.md Discus...",
    "Confidence": 0.9903117
  },
  {
    "Title": "Debugging memory corruption: who the hell writes “2” into my stack?! | Unity Blog",
    "Url": "https://blog.unity.com/technology/debugging-memory-corruption-who-the-hell-writes-2-into-my-stack-2",
    "Timestamp": "2021-11-14T14:02:44",
    "Domain": "blog.unity.com",
    "Description": "Several weeks ago we received a bug report from a customer that said their game was crashing when using IL2CPP scripting backend. QA verified the bug and assigned it to me for fixing. The project was quite big (although far from the largest ones); it took 40 minutes to build on my machine. The instructions on the bug report said: “Play the game for 5-10 minutes until it crashes”. Sure enough, after following instructions, I observed a crash. I fired up WinDbg ready to nail it down. Unfortunately, the stack trace was bogus:\n0:049&gt; k\n# Child-SP RetAddr Call Site\n00 00000022`e25feb10 00000000`00000010 0x00007ffa`00000102\n0:050&gt; u 0x00007ffa`00000102 L10\n00007ffa`00000102 ?? ???\n^ Memory access error in 'u 0x00007ffa`00000102 l10'\nClearly, it tried executing an invalid memory address. Although the stacktrace had been corrupted, I was hoping that only a part of the whole stack got corrupted and that I should be able to reconstruct it if I look at memory contents past the stack pointer register. Surely enough, that gave me an idea where to look next:\n0:049&gt; dps @rsp L200\n...............\n00000022`e25febd8 00007ffa`b1fdc65c ucrtbased!heap_alloc_dbg+0x1c [d:\\th\\minkernel\\crts\\ucrt\\src\\appcrt\\heap\\debug_heap.cpp @ 447]\n00000022`e25febe0 00000000`00000004\n00000022`e25febe8 00000022`00000001\n00000022`e25febf0 00000022`00000000\n00000022`e25febf8 00000000`00000000\n00000022`e25fec00 00000022`e25fec30\n00000022`e25fec08 00007ffa`99b3d3ab UnityPlayer!std::_Vector_alloc&lt;std::_Vec_base_types&lt;il2cpp::os::PollRequest,std::allocator&lt;il2cpp::os::PollRequest&gt; &gt; &gt;::_Get_data+0x2b [ c:\\program files (x86)\\microsoft visual studio 14.0\\vc\\include\\vector @ 642]\n00000022`e25fec10 00000022`e25ff458\n00000022`e25fec18 cccccccc`cccccccc\n00000022`e25fec20 cccccccc`cccccccc\n00000022`e25fec28 00007ffa`b1fdf54c ucrtbased!_calloc_dbg+0x6c [d:\\th\\minkernel\\crts\\ucrt\\src\\appcrt\\heap\\debug_heap.cpp @ 511]\n00000022`e25fec30 00000000`00000010\n00000022`e25fec38 00007ffa`00000001\n...............\n00000022`e25fec58 00000000`00000010\n00000022`e25fec60 00000022`e25feca0\n00000022`e25fec68 00007ffa`b1fdb69e ucrtbased!calloc+0x2e [d:\\th\\minkernel\\crts\\ucrt\\src\\appcrt\\heap\\calloc.cpp @ 25]\n00000022`e25fec70 00000000`00000001\n00000022`e25fec78 00000000`00000010\n00000022`e25fec80 cccccccc`00000001\n00000022`e25fec88 00000000`00000000\n00000022`e25fec90 00000022`00000000\n00000022`e25fec98 cccccccc`cccccccc\n00000022`e25feca0 00000022`e25ff3f0\n00000022`e25feca8 00007ffa`99b3b646 UnityPlayer!il2cpp::os::SocketImpl::Poll+0x66 [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\os\\win32\\socketimpl.cpp @ 1429]\n00000022`e25fecb0 00000000`00000001\n00000022`e25fecb8 00000000`00000010\n...............\n00000022`e25ff3f0 00000022`e25ff420\n00000022`e25ff3f8 00007ffa`99c1caf4 UnityPlayer!il2cpp::os::Socket::Poll+0x44 [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\os\\socket.cpp @ 324]\n00000022`e25ff400 00000022`e25ff458\n00000022`e25ff408 cccccccc`ffffffff\n00000022`e25ff410 00000022`e25ff5b4\n00000022`e25ff418 00000022`e25ff594\n00000022`e25ff420 00000022`e25ff7e0\n00000022`e25ff428 00007ffa`99b585f8 UnityPlayer!il2cpp::vm::SocketPollingThread::RunLoop+0x268 [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\vm\\threadpool.cpp @ 452]\n00000022`e25ff430 00000022`e25ff458\n00000022`e25ff438 00000000`ffffffff\n...............\n00000022`e25ff7d8 00000022`e25ff6b8\n00000022`e25ff7e0 00000022`e25ff870\n00000022`e25ff7e8 00007ffa`99b58d2c UnityPlayer!il2cpp::vm::SocketPollingThreadEntryPoint+0xec [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\vm\\threadpool.cpp @ 524]\n00000022`e25ff7f0 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread\n00000022`e25ff7f8 00007ffa`99b57700 UnityPlayer!il2cpp::vm::FreeThreadHandle [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\vm\\threadpool.cpp @ 488]\n00000022`e25ff800 00000000`0000106c\n00000022`e25ff808 cccccccc`cccccccc\n00000022`e25ff810 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread\n00000022`e25ff818 000001c4`1705f5c0\n00000022`e25ff820 cccccccc`0000106c\n...............\n00000022`e25ff860 00005eaa`e9a6af86\n00000022`e25ff868 cccccccc`cccccccc\n00000022`e25ff870 00000022`e25ff8d0\n00000022`e25ff878 00007ffa`99c63b52 UnityPlayer!il2cpp::os::Thread::RunWrapper+0xd2 [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\os\\thread.cpp @ 106]\n00000022`e25ff880 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread\n00000022`e25ff888 00000000`00000018\n00000022`e25ff890 cccccccc`cccccccc\n...............\n00000022`e25ff8a8 000001c4`15508c90\n00000022`e25ff8b0 cccccccc`00000002\n00000022`e25ff8b8 00007ffa`99b58c40 UnityPlayer!il2cpp::vm::SocketPollingThreadEntryPoint [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\vm\\threadpool.cpp @ 494]\n00000022`e25ff8c0 00007ffa`9da83610 UnityPlayer!il2cpp::vm::g_SocketPollingThread\n00000022`e25ff8c8 000001c4`155a5890\n00000022`e25ff8d0 00000022`e25ff920\n00000022`e25ff8d8 00007ffa`99c19a14 UnityPlayer!il2cpp::os::ThreadStartWrapper+0x54 [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\os\\win32\\threadimpl.cpp @ 31]\n00000022`e25ff8e0 000001c4`155a5890\n...............\n00000022`e25ff900 cccccccc`cccccccc\n00000022`e25ff908 00007ffa`99c63a80 UnityPlayer!il2cpp::os::Thread::RunWrapper [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\os\\thread.cpp @ 80]\n00000022`e25ff910 000001c4`155a5890\n...............\n00000022`e25ff940 000001c4`1e0801b0\n00000022`e25ff948 00007ffa`e6858102 KERNEL32!BaseThreadInitThunk+0x22\n00000022`e25ff950 000001c4`1e0801b0\n00000022`e25ff958 00000000`00000000\n00000022`e25ff960 00000000`00000000\n00000022`e25ff968 00000000`00000000\n00000022`e25ff970 00007ffa`99c199c0 UnityPlayer!il2cpp::os::ThreadStartWrapper [ c:\\users\\tautvydas\\builds\\bin2\\il2cppoutputproject\\il2cpp\\libil2cpp\\os\\win32\\threadimpl.cpp @ 26]\n00000022`e25ff978 00007ffa`e926c5b4 ntdll!RtlUserThreadStart+0x34\n00000022`e25ff980 00007ffa`e68580e0 KERNEL32!BaseThreadInitThunk\nHere’s a rough reconstructed stacktrace:\n00000022`e25febd8 00007ffa`b1fdc65c ucrtbased!heap_alloc_dbg+0x1c [...\\appcrt\\heap\\debug_heap.cpp @ 447]\n00000022`e25fec28 00007ffa`b1fdf54c ucrtbased!_calloc_dbg+0x6c [...\\appcrt\\heap\\debug_heap.cpp @ 511]\n00000022`e25fec68 00007ffa`b1fdb69e ucrtbased!calloc+0x2e [...\\appcrt\\heap\\calloc.cpp @ 25]\n00000022`e25feca8 00007ffa`99b3b646 UnityPlayer!il2cpp::os::SocketImpl::Poll+0x66 [...\\libil2cpp\\os\\win32\\socketimpl.cpp @ 1429]\n00000022`e25ff3f8 00007ffa`99c1caf4 UnityPlayer!il2cpp::os::Socket::Poll+0x44 [...\\libil2cpp\\os\\socket.cpp @ 324]\n00000022`e25ff428 00007ffa`99b585f8 UnityPlayer!il2cpp::vm::SocketPollingThread::RunLoop+0x268 [...\\libil2cpp\\vm\\threadpool.cpp @ 452]\n00000022`e25ff7e8 00007ffa`99b58d2c UnityPlayer!il2cpp::vm::SocketPollingThreadEntryPoint+0xec [...\\libil2cpp\\vm\\threadpool.cpp @ 524]\n00000022`e25ff878 00007ffa`99c63b52 UnityPlayer!il2cpp::os::Thread::RunWrapper+0xd2 [...\\libil2cpp\\os\\thread.cpp @ 106]\n00000022`e25ff8d8 00007ffa`99c19a14 UnityPlayer!il2cpp::os::ThreadStartWrapper+0x54 [...\\libil2cpp\\os\\win32\\threadimpl.cpp @ 31]\n00000022`e25ff948 00007ffa`e6858102 KERNEL32!BaseThreadInitThunk+0x22\n00000022`e25ff978 00007ffa`e926c5b4 ntdll!RtlUserThreadStart+0x34\nAlright, so now I knew which thread was crashing: it was the IL2CPP runtime socket polling thread. Its responsibility is tell other threads when their sockets are ready to send or receive data. It goes like this: there’s a FIFO queue that socket poll requests get put in by other threads, the socket polling thread then dequeues these requests one by one, calls select() function and when select() returns a result, it queues a callback that was in the original request to the thread pool. So somebody is corrupting the stack badly. In order to narrow the search, I decided to put “stack sentinels” on most stack frames in that thread. Here’s how my stack sentinel was defined:",
    "Confidence": 0.93993986
  },
  {
    "Title": "Welcome to Full Stack Week",
    "Url": "https://blog.cloudflare.com/full-stack-week-2021/",
    "Timestamp": "2021-11-14T14:02:43",
    "Domain": "blog.cloudflare.com",
    "Description": "This week, as we do in our Innovation Weeks, we’ll make a series of announcements to help paint a vision for how we see the future of compute, and giving our developers the tools they need to build their next application on our network.",
    "Confidence": 0.9691908
  },
  {
    "Title": "C# 10 new feature CallerArgumentExpression, argument check and more",
    "Url": "https://weblogs.asp.net/dixin/c-10-new-feature-callerargumentexpression-argument-check-and-more",
    "Timestamp": "2021-11-14T11:01:57",
    "Domain": "weblogs.asp.net",
    "Description": "The CallerArgumentExpression has been discussed for years, it was supposed to a part of C# 8.0 but got delayed. Finally this month it is delivered along with C# 10 and .NET 6.&#160;&#8230;",
    "Confidence": 0.9967147
  },
  {
    "Title": "Change-making problem - Wikipedia",
    "Url": "https://en.m.wikipedia.org/wiki/Change-making_problem",
    "Timestamp": "2021-11-14T09:02:23",
    "Domain": "en.m.wikipedia.org",
    "Description": "The change-making problem addresses the question of finding the minimum number of coins (of certain denominations) that add up to a given amount of money. It is a special case of the integer knapsack problem, and has applications wider than just currency.",
    "Confidence": 0.9275621
  },
  {
    "Title": "Windows 10 and 11 minimal setup for HDR video playback and streaming",
    "Url": "https://weblogs.asp.net/dixin/windows-10-and-11-minimal-setup-for-hdr-video-playback-and-streaming",
    "Timestamp": "2021-11-14T07:02:56",
    "Domain": "weblogs.asp.net",
    "Description": "On last Black Friday, I purchased a 50-inch 4K HDR10 smart TV with only $150. I use it as monitor for my computer. I didn’t find a walk through tutorial for the whole HDR (High Dynamic Range) setup,&#160;&#8230;",
    "Confidence": 0.98119694
  }
]