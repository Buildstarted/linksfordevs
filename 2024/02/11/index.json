[
  {
    "Title": "Cloud Egress Costs",
    "Url": "https://getdeploying.com/reference/data-egress",
    "Timestamp": "2024-02-11T03:04:10",
    "Domain": "getdeploying.com",
    "Description": "A list of egress costs for major cloud providers."
  },
  {
    "Title": "FastPay: High-Performance Byzantine Fault Tolerant Settlement",
    "Url": "https://arxiv.org/abs/2003.11506",
    "Timestamp": "2024-02-11T03:04:09",
    "Domain": "arxiv.org",
    "Description": "FastPay allows a set of distributed authorities, some of which are Byzantine, to maintain a high-integrity and availability settlement system for pre-funded payments. It can be used to settle payments in a native unit of value (crypto-currency), or as a financial side-infrastructure to support retail payments in fiat currencies. FastPay is based on Byzantine Consistent Broadcast as its core primitive, foregoing the expenses of full atomic commit channels (consensus). The resulting system has low-latency for both confirmation and payment finality. Remarkably, each authority can be sharded across many machines to allow unbounded horizontal scalability. Our experiments demonstrate intra-continental confirmation latency of less than 100ms, making FastPay applicable to point of sale payments. In laboratory environments, we achieve over 80,000 transactions per second with 20 authorities---surpassing the requirements of current retail card payment networks, while significantly increasing their robustness."
  },
  {
    "Title": "Mysticeti: Low-Latency DAG Consensus with Fast Commit Path",
    "Url": "https://arxiv.org/abs/2310.14821",
    "Timestamp": "2024-02-11T03:04:09",
    "Domain": "arxiv.org",
    "Description": "We introduce Mysticeti-C a byzantine consensus protocol with low-latency and high resource efficiency. It leverages a DAG based on Threshold Clocks and incorporates innovations in pipelining and multiple leaders to reduce latency in the steady state and under crash failures. Mysticeti-FPC incorporates a fast commit path that has even lower latency. We prove the safety and liveness of the protocols in a byzantine context. We evaluate Mysticeti and compare it with state-of-the-art consensus and fast path protocols to demonstrate its low latency and resource efficiency, as well as more graceful degradation under crash failures. Mysticeti is the first byzantine protocol to achieve WAN latency of 0.5s for consensus commit, at a throughput of over 50k TPS that matches the state-of-the-art."
  },
  {
    "Title": "GitHub - damienbod/AspNetCoreEntraIdBlobStorage: ASP.NET Core Razor page using Azure Blob Storage to upload download files securely using OAuth and Open ID Connect",
    "Url": "https://github.com/damienbod/AspNetCoreEntraIdBlobStorage",
    "Timestamp": "2024-02-11T01:04:24",
    "Domain": "github.com",
    "Description": "ASP.NET Core Razor page using Azure Blob Storage to upload download files securely using OAuth and Open ID Connect - GitHub - damienbod/AspNetCoreEntraIdBlobStorage: ASP.NET Core Razor page using A..."
  },
  {
    "Title": "GitHub - kzu/StreamAI: A sample of how to implement streaming responses from OpenAI using SignalR",
    "Url": "https://github.com/kzu/StreamAI",
    "Timestamp": "2024-02-11T01:04:24",
    "Domain": "github.com",
    "Description": "A sample of how to implement streaming responses from OpenAI using SignalR - GitHub - kzu/StreamAI: A sample of how to implement streaming responses from OpenAI using SignalR"
  },
  {
    "Title": "Building AI-powered Microsoft Copilot with SignalR and other open-source tools - .NET Blog",
    "Url": "https://devblogs.microsoft.com/dotnet/building-ai-powered-bing-chat-with-signalr-and-other-open-source-tools/#deep-dive-how-do-we-use-signalr",
    "Timestamp": "2024-02-11T01:04:24",
    "Domain": "devblogs.microsoft.com",
    "Description": "Microsoft Copilot is powered by several open-source tools, such as SignalR, Adaptive Cards, Markdown, and object-basin to solve the unique challenges in building AI-enabled applications at scale. In this article, we share the design considerations and how we integrated various tools with a focus on how we stream messages and responses to the front-end UI while giving some overview of what happens on the server-side."
  }
]