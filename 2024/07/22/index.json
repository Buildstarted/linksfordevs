[
  {
    "Title": "Mastering Error Insights in .NET MAUI: Sentry vs. Firebase Crashlytics",
    "Url": "https://dev.to/vhugogarcia/mastering-error-insights-in-net-maui-sentry-vs-firebase-crashlytics-5aj3",
    "Timestamp": "2024-07-22T21:01:03",
    "Domain": "dev.to",
    "Description": "As the .NET MAUI ecosystem gains momentum, developers are keen to adopt robust error monitoring..."
  },
  {
    "Title": "Add AI to Your .NET Apps Easily with Prompty - .NET Blog",
    "Url": "https://devblogs.microsoft.com/dotnet/add-ai-to-your-dotnet-apps-easily-with-prompty/",
    "Timestamp": "2024-07-22T19:00:59",
    "Domain": "devblogs.microsoft.com",
    "Description": "Learn how to integrate AI into your .NET applications with Prompty, a powerful Visual Studio Code extension."
  },
  {
    "Title": "No More Blue Fridays",
    "Url": "https://www.brendangregg.com/blog/2024-07-22/no-more-blue-fridays.html",
    "Timestamp": "2024-07-22T17:00:55",
    "Domain": "www.brendangregg.com",
    "Description": "No More Blue Fridays: How eBPF is already being adopted to prevent kernel crashes."
  },
  {
    "Title": "Organizing the five creation dispositions of the Create­File function - The Old New Thing",
    "Url": "https://devblogs.microsoft.com/oldnewthing/20240722-00/?p=110026",
    "Timestamp": "2024-07-22T14:01:03",
    "Domain": "devblogs.microsoft.com",
    "Description": "Six possibilities, but only five useful ones."
  },
  {
    "Title": "We're good, seriously",
    "Url": "https://forum.jellyfin.org/t-we-re-good-seriously",
    "Timestamp": "2024-07-22T12:01:00",
    "Domain": "forum.jellyfin.org",
    "Description": "This message was posted to our OpenCollective here. However, their page layout leaves a lot to be desired, with the post being very far down the page. So it is reproduced here for posterity. We have q"
  },
  {
    "Title": "GitHub - BurntSushi/jiff: A date-time library for Rust that encourages you to jump into the pit of success.",
    "Url": "https://github.com/BurntSushi/jiff",
    "Timestamp": "2024-07-22T12:00:59",
    "Domain": "github.com",
    "Description": "A date-time library for Rust that encourages you to jump into the pit of success. - BurntSushi/jiff"
  },
  {
    "Title": "The state machine in C# with async/await",
    "Url": "https://steven-giesel.com/blogPost/720a48fd-0abe-4c32-83ac-26926d501895",
    "Timestamp": "2024-07-22T07:01:02",
    "Domain": "steven-giesel.com",
    "Description": "You often here that the async/await keywords leads to a state machine. But what does that mean? Let's discuss this with a simple example.\n"
  },
  {
    "Title": "Composing Linq Queries\n",
    "Url": "https://wildermuth.com/2024/07/20/composing-linq-queries/",
    "Timestamp": "2024-07-22T06:01:10",
    "Domain": "wildermuth.com",
    "Description": "At one of my clients, I was showing him how to structure a complex Linq query. This came as a surprise to him and I thought it was worth a quick blog entry.\n"
  },
  {
    "Title": "Migrating .NET APIs with Obsolete Attribute",
    "Url": "https://www.compositional-it.com/news-blog/migrating-net-apis-with-obsolete-attribute/",
    "Timestamp": "2024-07-22T06:01:10",
    "Domain": "www.compositional-it.com",
    "Description": "Creating APIs for consumers can be a challenging skill to master. We have to balance APIs that are flexible for reasonable changes, but not overly verbose or complicated in order to cater for all possibilities rather than focusing on the here-and-now. Sometimes, you'll get it wrong and realise that you need to change the way…"
  },
  {
    "Title": "ILSpy for macOS: First Public Beta Release",
    "Url": "https://avaloniaui.net/blog/ilspy-for-macos-first-public-beta-release",
    "Timestamp": "2024-07-22T06:01:09",
    "Domain": "avaloniaui.net",
    "Description": "Announcing the first public beta release of ILSpy for macOS, powered by Avalonia XPF. "
  },
  {
    "Title": "ASP.NET8 using DataTables.net – Part4 – Multilingual",
    "Url": "https://www.codeproject.com/Articles/5385407/ASP-NET8-using-DataTables-net-Part4-Multilingual",
    "Timestamp": "2024-07-22T06:01:09",
    "Domain": "www.codeproject.com",
    "Description": "A practical guide to using jQuery DataTables.net component in Asp.Net 8 MVC application."
  },
  {
    "Title": "EF Core - The conversion of a datetime2 data type to a datetime data type resulted in an out-of-range value",
    "Url": "https://bartwullems.blogspot.com/2024/07/ef-core-conversion-of-datetime2-data.html",
    "Timestamp": "2024-07-22T06:01:09",
    "Domain": "bartwullems.blogspot.com",
    "Description": "Athough EF Core is a developer friendly Object-Relational Mapper (ORM), working with it isn't without its challenges. One error that we enco..."
  },
  {
    "Title": "Array Grouping in JavaScript",
    "Url": "https://www.telerik.com/blogs/array-grouping-javascript",
    "Timestamp": "2024-07-22T06:01:09",
    "Domain": "www.telerik.com",
    "Description": "Combining data into groups—like Object.groupBy and Map.groupBy in JavaScript—allows you to compute higher order datasets, like grouping employees by department."
  },
  {
    "Title": "Auto-document dotnet CLI tool via dynamically generated markdown readme fragments",
    "Url": "https://www.cazzulino.com/auto-doc-cli.html",
    "Timestamp": "2024-07-22T06:01:08",
    "Domain": "www.cazzulino.com",
    "Description": "Every time I create a new CLI tool, I face the challenge of keeping the project and package readme (for dotnet tools like dotnet-trx) up to date with the evolving tool itself. It’s annoying and repetitive (run with --help, copy-paste) and it’s not uncommon to end up with stale docs. Here’s one way to automate the whole thing so you can just focus on making your tool awesome. First, have your project emit the help to a text file, say help.md: &lt;Target Name=\"RenderHelp\" AfterTargets=\"Build\"&gt; &lt;WriteLinesToFile Lines=\"```shell\" Overwrite=\"true\" File=\"help.md\" /&gt; &lt;Exec Command=\"dotnet run --no-build -- --help &amp;gt;&amp;gt; help.md\" EnvironmentVariables=\"NO_COLOR=true\" /&gt; &lt;WriteLinesToFile..."
  }
]