[
  {
    "Title": "Understanding how GitHub Copilot works",
    "Url": "https://techcommunity.microsoft.com/t5/educator-developer-blog/understanding-how-github-copilot-works/ba-p/4021562",
    "Timestamp": "2024-01-25T06:02:49",
    "Domain": "techcommunity.microsoft.com",
    "Description": "Have you ever wondered how GitHub Copilot helps you write code faster and with less work? In this article, we will learn how it works and resources that can.."
  },
  {
    "Title": "Handling external API errors: A transactional approach",
    "Url": "https://thoughtbot.com/blog/handling-external-api-errors-a-transactional-approach",
    "Timestamp": "2024-01-25T06:02:49",
    "Domain": "thoughtbot.com",
    "Description": "Clarifying a few possible ways to implement transactional workflows when working with external APIs."
  },
  {
    "Title": "Murmurations - Smarter Every Day 234",
    "Url": "https://youtube.com/watch?v=4LWmRuB-uNU",
    "Timestamp": "2024-01-25T06:02:49",
    "Domain": "youtube.com",
    "Description": "Check out https://kiwico.com/smarter and get your first month free!Click here if you're interested in subscribing: http://bit.ly/Subscribe2SED⇊  Click below ..."
  },
  {
    "Title": "Merge feature/dashboard-oop to main by drewnoakes · Pull Request #1774 · dotnet/aspire",
    "Url": "https://github.com/dotnet/aspire/pull/1774",
    "Timestamp": "2024-01-25T06:02:49",
    "Domain": "github.com",
    "Description": "Fixes #1003\nFixes #851\nFixes #1753\nFixes #1688\nFixes #1687\nFixes #1686\nFixes #1639\nThis PR merges the feature branch for OOP dashboard work into main.\nIt will remain in draft until it is ready to m..."
  },
  {
    "Title": "Blazor Basics: Component Parameters and State Management",
    "Url": "https://www.telerik.com/blogs/blazor-basics-component-parameters-state-management",
    "Timestamp": "2024-01-25T06:02:48",
    "Domain": "www.telerik.com",
    "Description": "In Blazor, there are several ways parent and child components communicate with each other and pass data. Let’s take a look."
  },
  {
    "Title": "Understanding CQRS Architecture",
    "Url": "https://www.codeproject.com/Articles/5376316/Understanding-CQRS-Architecture",
    "Timestamp": "2024-01-25T06:02:47",
    "Domain": "www.codeproject.com",
    "Description": "Comprehending the CQRS architecture and learning how to implement it"
  },
  {
    "Title": "Share user authentication state with interactive WASM components",
    "Url": "https://jonhilton.net/blazor-share-auth-state/",
    "Timestamp": "2024-01-25T06:02:47",
    "Domain": "jonhilton.net",
    "Description": "Your server knows your user is authenticated, but what about your interactive WASM components?"
  },
  {
    "Title": "Azure Static Web App– Application configuration using staticwebapp.config.json",
    "Url": "https://bartwullems.blogspot.com/2024/01/azure-static-web-app-application.html",
    "Timestamp": "2024-01-25T06:02:47",
    "Domain": "bartwullems.blogspot.com",
    "Description": "As a follow-up on the presentation I did at CloudBrew  about Azure Static Web Apps I want to write a series of blog posts.      Part I - Usi..."
  },
  {
    "Title": "Code Faster and Better with GitHub Copilot's New Features: Slash Commands and Context Variables - Visual Studio Blog",
    "Url": "https://devblogs.microsoft.com/visualstudio/copilot-chat-slash-commands-and-context-variables/",
    "Timestamp": "2024-01-25T06:02:47",
    "Domain": "devblogs.microsoft.com",
    "Description": "Have you ever wished you had an AI assistant that could help you write code faster and better? That’s what Visual Studio Copilot Chat offers you: an AI-powered pair programmer that can answer your questions, suggest code snippets, explain code logic, and chat with you about your project. You can use Copilot Chat to code faster and better, as it helps you avoid errors and learn new skills."
  },
  {
    "Title": "Celebrating our first 20,000 members",
    "Url": "https://blog.kagi.com/celebrating-20k",
    "Timestamp": "2024-01-25T04:03:21",
    "Domain": "blog.kagi.com",
    "Description": "Dear Kagi community, Today, we’re happy and proud to have reached *20,000 paying members* , including over 1,500 families all over the world, in our community."
  },
  {
    "Title": "Building a Critter Stack Application: Resiliency",
    "Url": "https://jeremydmiller.com/2024/01/24/building-a-critter-stack-application-resiliency/",
    "Timestamp": "2024-01-25T03:03:12",
    "Domain": "jeremydmiller.com",
    "Description": "Hey, did you know that JasperFx Software is ready for formal support plans for Marten and Wolverine? Not only are we trying to make the “Critter Stack” tools be viable long term options for your sh…"
  },
  {
    "Title": "How we made an animated movie in 8kB - Ctrl-Alt-Test",
    "Url": "https://www.ctrl-alt-test.fr/2024/how-we-made-an-animated-movie-in-8kb/",
    "Timestamp": "2024-01-25T03:03:10",
    "Domain": "www.ctrl-alt-test.fr",
    "Description": "The Sheep and the Flower - a demoscene production and real-time animation that looks like a standard short animated movie, in just 8kB"
  },
  {
    "Title": "Motorway: Seamless high speed BFT",
    "Url": "https://arxiv.org/abs/2401.10369",
    "Timestamp": "2024-01-25T03:03:09",
    "Domain": "arxiv.org",
    "Description": "Today's practical, high performance Byzantine Fault Tolerant (BFT) consensus protocols operate in the partial synchrony model. However, existing protocols are often inefficient when networks are indeed partially synchronous. They obtain either low latency during synchrony or robust recovery from periods of asynchrony. At one end, traditional, view-based BFT protocols optimize for latency in the sunny-network case, but when faced with periods of asynchrony are subject to performance degradations (hangovers) that can last beyond the return to synchrony. At the other end, modern DAG-based BFT protocols recover gracefully from asynchrony, but exhibit lackluster latency during synchronous intervals. To close the gap, this work presents Motorway, a novel high-throughput BFT protocol that offers both low latency and seamless recovery from periods of asynchrony. Motorway combines a highly parallel asynchronous data dissemination layer with a low-latency, partially synchronous consensus mechanism to construct an efficient consensus protocol for partial synchrony. Motorway (i) avoids the hangovers incurred by traditional BFT protocols and (ii) matches the throughput of state of the art DAG-BFT protocols while reducing latency by 2.1x, matching the latency of traditional BFT protocols."
  },
  {
    "Title": "Burke Learns Blazor - API Wrap Up",
    "Url": "https://youtube.com/watch?v=EvZ35LtVkd0",
    "Timestamp": "2024-01-25T01:04:22",
    "Domain": "youtube.com",
    "Description": "As we get ready to go live, it's time to finish off a few things in the API - delete lists, update lists, etc. Let's go!Community Links: https://theurlist.co..."
  }
]