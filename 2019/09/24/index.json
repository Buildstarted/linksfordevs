[
  {
    "Title": "Blazor - Official Release, Free Offer, and Future Plans",
    "Url": "https://community.devexpress.com/blogs/aspnet/archive/2019/09/24/blazor-components-launch-and-future-plans.aspx",
    "Timestamp": "2019-09-24T23:00:15",
    "Domain": "community.devexpress.com",
    "Description": "I'm happy to announce the official release of DevExpress UI for Blazor. To help celebrate Blazor official launch at #dotnetconf, we're offering our this release to our customers free-of-charge!"
  },
  {
    "Title": "3 as the sum of the 3 cubes - Numberphile",
    "Url": "https://www.youtube.com/watch?v=GXhzZAem7k0",
    "Timestamp": "2019-09-24T20:00:16",
    "Domain": "www.youtube.com",
    "Description": "A problem posed in 1953 is finally cracked by a network of computers in seven hours.\nMore links & stuff in full description below ↓↓↓\n\nNumberphile T-Shirts and stuff: https://teespring.com/stores/numberphile\n\nSee our playlist previous videos on this area of research: http://bit.ly/SumOfCubes\n\nAndrew Booker: http://www.bristol.ac.uk/maths/people/andrew-r-booker/overview.html\nAndrew Sutherland: https://math.mit.edu/directory/profile.php?pid=272\nCharity Engine: https://www.charityengine.com\n\nNumberphile is supported by the Mathematical Sciences Research Institute (MSRI): http://bit.ly/MSRINumberphile\n\nWe are also supported by Science Sandbox, a Simons Foundation initiative dedicated to engaging everyone with the process of science. https://www.simonsfoundation.org/outreach/science-sandbox/\n\nAnd support from Math For America - https://www.mathforamerica.org/\n\nNUMBERPHILE\nWebsite: http://www.numberphile.com/\nNumberphile on Facebook: http://www.facebook.com/numberphile\nNumberphile tweets: https://twitter.com/numberphile\nSubscribe: http://bit.ly/Numberphile_Sub\n\nVideos by Brady Haran\n\nPatreon: http://www.patreon.com/numberphile\n\nNumberphile T-Shirts: https://teespring.com/stores/numberphile\n\nBrady's videos subreddit: http://www.reddit.com/r/BradyHaran/\n\nBrady's latest videos across all channels: http://www.bradyharanblog.com/\n\nSign up for (occasional) emails: http://eepurl.com/YdjL9"
  },
  {
    "Title": ".NET Design Review: GitHub Quick Reviews",
    "Url": "https://www.youtube.com/watch?v=8M5rFkINsus",
    "Timestamp": "2019-09-24T18:00:17",
    "Domain": "www.youtube.com",
    "Description": "00:00:00 - Approved: Add a Generic version of GetValues to Enum (probably GetName/GetNames) https://github.com/dotnet/corefx/issues/27453#issuecomment-534690642\r\n00:24:12 - Approved: Add Path.RemoveRelativeSegments Api https://github.com/dotnet/corefx/issues/30701#issuecomment-534695882\r\n00:37:23 - Approved: Add List(T) AsSpan to CollectionsMarshal https://github.com/dotnet/corefx/issues/31597#issuecomment-534703891"
  },
  {
    "Title": "davidfowl/BedrockFramework",
    "Url": "https://github.com/davidfowl/BedrockTransports/blob/5bfaf995b02cd09106d79fdaa352b23f4c0184f1/ServerApplication/Program.cs",
    "Timestamp": "2019-09-24T18:00:14",
    "Domain": "github.com",
    "Description": "High performance, low level networking APIs for building custom servers and clients. - davidfowl/BedrockFramework"
  },
  {
    "Title": "Windows Terminal Preview 1909 | Windows Command Line",
    "Url": "https://devblogs.microsoft.com/commandline/windows-terminal-preview-1909/",
    "Timestamp": "2019-09-24T17:00:19",
    "Domain": "devblogs.microsoft.com",
    "Description": "Welcome back to another release of the Windows Terminal! We have switched to the Windows version syntax, so this is the September 2019 release (1909). As always, you can download the latest release of the Terminal from the Microsoft Store or from the GitHub releases page."
  },
  {
    "Title": "[Linux] Add initial perf jitdump support · Issue #13462 · dotnet/runtime",
    "Url": "https://github.com/dotnet/coreclr/issues/26842",
    "Timestamp": "2019-09-24T17:00:17",
    "Domain": "github.com",
    "Description": "Linux uses the perf tools to profile application. The linux 4.10 kernel added support for a perf jitdump format. It has allows better JIT support for perf. Specifically allowing adding: native code..."
  },
  {
    "Title": "Creating gRPC .NET Core Client Libraries - Steve Gordon",
    "Url": "https://www.stevejgordon.co.uk/creating-grpc-net-core-client-libraries",
    "Timestamp": "2019-09-24T17:00:05",
    "Domain": "www.stevejgordon.co.uk",
    "Description": "In this post, I will show you how to easily create a shared class library which includes the auto-generate gRPC client code for reference by other projects."
  },
  {
    "Title": "UserSecrets Broken in VS 2019 16.3.0 - Developer Community",
    "Url": "https://developercommunity.visualstudio.com/content/problem/744067/usersecrets-broken-in-vs-2019-1630.html",
    "Timestamp": "2019-09-24T14:00:05",
    "Domain": "developercommunity.visualstudio.com",
    "Description": "Developer Community for Visual Studio Product family"
  },
  {
    "Title": "Supreme Court bombshell: Britain is working once again ",
    "Url": "http://www.politics.co.uk/blogs/2019/09/24/supreme-court-bombshell-britain-is-working-once-again",
    "Timestamp": "2019-09-24T13:00:22",
    "Domain": "www.politics.co.uk",
    "Description": "Supreme Court judgement destroys Boris Johnson's attempt to silence parliament: In an extraordinary moment of political and legal drama, the British constitution stands firm against an out-of-control executive."
  },
  {
    "Title": "Welcome to .NET Conf 2019!",
    "Url": "https://www.youtube.com/watch?v=YH4tV_vbsPY&index=4",
    "Timestamp": "2019-09-24T09:00:18",
    "Domain": "www.youtube.com",
    "Description": "Announcing .NET Core 3.0: https://aka.ms/dotnetcore3\n#dotNETConf\n\nFiller after keynote that tells people what to expect for the day, how to participate in the technical treasure hunt and #CodeParty"
  },
  {
    "Title": "Welcome to Esquio — Esquio 0.0.1 documentation",
    "Url": "https://esquio.readthedocs.io/en/latest/",
    "Timestamp": "2019-09-24T09:00:04",
    "Domain": "esquio.readthedocs.io",
    "Description": ""
  },
  {
    "Title": "The government websites that still aren't 'secure'",
    "Url": "https://www.itnews.com.au/news/the-government-websites-that-still-arent-secure-531301",
    "Timestamp": "2019-09-24T07:00:19",
    "Domain": "www.itnews.com.au",
    "Description": "HTTP connections still in use."
  },
  {
    "Title": "Sagas",
    "Url": "https://vasters.com/archive/Sagas.html",
    "Timestamp": "2019-09-24T04:12:45",
    "Domain": "vasters.com",
    "Description": "Today has been a lively day in some parts of the Twitterverse debating the Saga pattern. As it stands, there are a few frameworks for .NET out there that use the term \"Saga\" for some framework implementation of a state machine or workflow. Trouble is, that's not what a Saga is. A Saga is a failure management pattern. Sagas come out of the realization that particularly long-lived transactions (originally even just inside databases), but also far distributed transactions across location and/or trust boundaries can't eaily be handled using the classic ACID model with 2-Phase commit and holding locks for the duration of the work. Instead, a Saga splits work into individual transactions whose effects can be, somehow, reversed after work has been performed and commited.<P align=left><IMG title=image style=”BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BACKGROUND-IMAGE: none; BORDER-BOTTOM-WIDTH: 0px; FLOAT: none; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: auto; DISPLAY: block; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; MARGIN-RIGHT: auto” border=0 alt=image src=”http://vasters.com/binary/Windows-Live-Writer/Sagas_1273E/image_thumb_1.png” width=672 height=296></P>The picture shows a simple Saga. If you book a travel itinerary, you want a car and a hotel and a flight. If you can't get all of them, it's probably not worth going. It's also very certain that you can't enlist all of these providers into a distributed ACID transaction. Instead, you'll have an activity for booking rental cars that knows both how to perform a reservation and also how to cancel it - and one for a hotel and one for flights. The activities are grouped in a composite job (routing slip) that's handed along the activity chain. If you want, you can sign/encrypt the routing slip items so that they can only be understood and manipulated by the intended receiver. When an activity completes, it adds a record of the completion to the routing slip along with information on where its compensating operation can be reached (e.g. via a Queue). When an activity fails, it cleans up locally and then sends the routing slip backwards to the last completed activity's compensation address to unwind the transaction outcome.If you're a bit familiar with travel, you'll also notice that I've organized the steps by risk. Reserving a rental car almost always succeeds if you book in advance, because the rental car company can move more cars on-site of there is high demand. Reserving a hotel is slightly more risky, but you can commonly back out of a reservation without penalty until 24h before the stay. Airfare often comes with a refund restriction, so you'll want to do that last.I created a Gist on Github that you can run as a console application. It illustrates this model in code. Mind that it is a mockup and not a framework. I wrote this in less than 90 minutes, so don't expect to reuse this.The main program sets up an examplary routing slip (all the classes are in the one file) and creates three completely independent \"processes\" (activity hosts) that are each responsible for handling a particular kind of work. The \"processes\" are linked by a \"network\" and each kind of activity has an address for forward progress work and one of compensation work. The network resolution is simulated by 'Send\".</A><DIV class=csharpcode><PRE><SPAN class=lnum>   1:  </SPAN><SPAN class=kwrd>static</SPAN> ActivityHost[] processes;</PRE><PRE><SPAN class=lnum>   2:  </SPAN> </PRE><PRE><SPAN class=lnum>   3:  </SPAN><SPAN class=kwrd>static</SPAN> <SPAN class=kwrd>void</SPAN> Main(<SPAN class=kwrd>string</SPAN>[] args)</PRE><PRE><SPAN class=lnum>   4:  </SPAN>{</PRE><PRE><SPAN class=lnum>   5:  </SPAN>    var routingSlip = <SPAN class=kwrd>new</SPAN> RoutingSlip(<SPAN class=kwrd>new</SPAN> WorkItem[]</PRE><PRE><SPAN class=lnum>   6:  </SPAN>        {</PRE><PRE><SPAN class=lnum>   7:  </SPAN>            <SPAN class=kwrd>new</SPAN> WorkItem<ReserveCarActivity>(<SPAN class=kwrd>new</SPAN> WorkItemArguments),</PRE><PRE><SPAN class=lnum>   8:  </SPAN>            <SPAN class=kwrd>new</SPAN> WorkItem<ReserveHotelActivity>(<SPAN class=kwrd>new</SPAN> WorkItemArguments),</PRE><PRE><SPAN class=lnum>   9:  </SPAN>            <SPAN class=kwrd>new</SPAN> WorkItem<ReserveFlightActivity>(<SPAN class=kwrd>new</SPAN> WorkItemArguments)</PRE><PRE><SPAN class=lnum>  10:  </SPAN>        });</PRE><PRE><SPAN class=lnum>  11:  </SPAN> </PRE><PRE><SPAN class=lnum>  12:  </SPAN> </PRE><PRE><SPAN class=lnum>  13:  </SPAN>    <SPAN class=rem>// imagine these being completely separate processes with queues between them</SPAN></PRE><PRE><SPAN class=lnum>  14:  </SPAN>    processes = <SPAN class=kwrd>new</SPAN> ActivityHost[]</PRE><PRE><SPAN class=lnum>  15:  </SPAN>                        {</PRE><PRE><SPAN class=lnum>  16:  </SPAN>                            <SPAN class=kwrd>new</SPAN> ActivityHost<ReserveCarActivity>(Send),</PRE><PRE><SPAN class=lnum>  17:  </SPAN>                            <SPAN class=kwrd>new</SPAN> ActivityHost<ReserveHotelActivity>(Send),</PRE><PRE><SPAN class=lnum>  18:  </SPAN>                            <SPAN class=kwrd>new</SPAN> ActivityHost<ReserveFlightActivity>(Send)</PRE><PRE><SPAN class=lnum>  19:  </SPAN>                        };</PRE><PRE><SPAN class=lnum>  20:  </SPAN> </PRE><PRE><SPAN class=lnum>  21:  </SPAN>    <SPAN class=rem>// hand off to the first address</SPAN></PRE><PRE><SPAN class=lnum>  22:  </SPAN>    Send(routingSlip.ProgressUri, routingSlip);</PRE><PRE><SPAN class=lnum>  23:  </SPAN>}</PRE><PRE><SPAN class=lnum>  24:  </SPAN> </PRE><PRE><SPAN class=lnum>  25:  </SPAN><SPAN class=kwrd>static</SPAN> <SPAN class=kwrd>void</SPAN> Send(Uri uri, RoutingSlip routingSlip)</PRE><PRE><SPAN class=lnum>  26:  </SPAN>{</PRE><PRE><SPAN class=lnum>  27:  </SPAN>    <SPAN class=rem>// this is effectively the network dispatch</SPAN></PRE><PRE><SPAN class=lnum>  28:  </SPAN>    <SPAN class=kwrd>foreach</SPAN> (var process <SPAN class=kwrd>in</SPAN> processes)</PRE><PRE><SPAN class=lnum>  29:  </SPAN>    {</PRE><PRE><SPAN class=lnum>  30:  </SPAN>        <SPAN class=kwrd>if</SPAN> (process.AcceptMessage(uri, routingSlip))</PRE><PRE><SPAN class=lnum>  31:  </SPAN>        {</PRE><PRE><SPAN class=lnum>  32:  </SPAN>            <SPAN class=kwrd>break</SPAN>;</PRE><PRE><SPAN class=lnum>  33:  </SPAN>        }</PRE><PRE><SPAN class=lnum>  34:  </SPAN>    }</PRE><PRE><SPAN class=lnum>  35:  </SPAN>}</PRE></DIV><STYLE type=text/css>.csharpcode, .csharpcode pre{\tfont-size: small;\tcolor: black;\tfont-family: consolas, “Courier New”, courier, monospace;\tbackground-color: #ffffff;\t/white-space: pre;/}.csharpcode pre { margin: 0em; }.csharpcode .rem { color: #008000; }.csharpcode .kwrd { color: #0000ff; }.csharpcode .str { color: #006080; }.csharpcode .op { color: #0000c0; }.csharpcode .preproc { color: #cc6633; }.csharpcode .asp { background-color: #ffff00; }.csharpcode .html { color: #800000; }.csharpcode .attr { color: #ff0000; }.csharpcode .alt {\tbackground-color: #f4f4f4;\twidth: 100%;\tmargin: 0em;}.csharpcode .lnum { color: #606060; }</STYLE>"
  },
  {
    "Title": "Announcing free C#, .NET, and ASP.NET for beginners video courses and tutorials - Scott Hanselman",
    "Url": "https://www.hanselman.com/blog/AnnouncingFreeCNETAndASPNETForBeginnersVideoCoursesAndTutorials.aspx",
    "Timestamp": "2019-09-24T04:00:24",
    "Domain": "www.hanselman.com",
    "Description": "If you've been thinking about learning C#, now is the time to jump in! I've been working on this project for months and ..."
  },
  {
    "Title": "Microsoft Launches New .NET Core Video Series - Thurrott.com",
    "Url": "https://www.thurrott.com/dev/217152/microsoft-launches-new-net-core-video-series",
    "Timestamp": "2019-09-24T04:00:14",
    "Domain": "www.thurrott.com",
    "Description": "Microsoft today released a new series of developer videos explaining the entire .NET Core stack."
  },
  {
    "Title": "My Journey with Orchard Core",
    "Url": "http://www.hishambinateya.com/my-journey-with-orchard-core",
    "Timestamp": "2019-09-24T03:00:04",
    "Domain": "www.hishambinateya.com",
    "Description": "Hisham's Blog, I'm learning ASP.NET Core and write about it here"
  },
  {
    "Title": "Tips and Tricks for .NET Debugging in Visual Studio",
    "Url": "https://www.youtube.com/watch?v=lgKInHJ-tcg",
    "Timestamp": "2019-09-24T02:47:27",
    "Domain": "www.youtube.com",
    "Description": "Announcing .NET Core 3.0: https://aka.ms/dotnetcore3\n#dotNETConf\n\nDebugging is an inevitable but frustrating experience for every developer, but it's a subject that's not always taught or fully explored.  This all-demo talk will cover known and lesser-known .NET debugger features available in Visual Studio to help create a more productive debugging experience."
  },
  {
    "Title": "What's New in SignalR with .NET Core 3.0?",
    "Url": "https://www.youtube.com/watch?v=dHiETzo6GB8",
    "Timestamp": "2019-09-24T02:47:14",
    "Domain": "www.youtube.com",
    "Description": "Announcing .NET Core 3.0: https://aka.ms/dotnetcore3\n#dotNETConf\n\n.NET Core 3.0 brings a bevy of improvements to SignalR for developers who want to bring real-time to their apps. This session will cover these new features and introduce customers to the ideas we have for .NET 5.0. Come learn about the new stuff, and give feedback on what we'll do next."
  },
  {
    "Title": "Masters of the Fountain Pen：Kiyoshi Kato（Kato Seisakusho Com",
    "Url": "https://www.youtube.com/watch?v=SByOoh2XK6c",
    "Timestamp": "2019-09-24T02:33:48",
    "Domain": "www.youtube.com",
    "Description": "I claim no ownership of this video\n\nPosted for historical value. Just wish I could find the others in the series that disappeared.\n\nOriginal footage from "
  },
  {
    "Title": "MiniProfiler/dotnet",
    "Url": "https://github.com/MiniProfiler/dotnet",
    "Timestamp": "2019-09-24T01:00:04",
    "Domain": "github.com",
    "Description": "A simple but effective mini-profiler for ASP.NET (and Core) websites - MiniProfiler/dotnet"
  },
  {
    "Title": "Modernizing .NET Desktop Applications with .NET Core",
    "Url": "https://www.youtube.com/watch?v=k7z4ZxFc8h8",
    "Timestamp": "2019-09-24T00:21:18",
    "Domain": "www.youtube.com",
    "Description": "Announcing .NET Core 3.0: https://aka.ms/dotnetcore3\n#dotNETConf\n\nIn this talk I'll provide an in-depth look at porting desktop applications to .NET Core 3 and cover different ways you can upgrade your WinForms and WPF applications such as leveraging Windows 10 features, accessing device APIs, incorporating modern input methods, machine learning, and many more."
  },
  {
    "Title": "What's new in C# 8 - Part 2",
    "Url": "https://www.youtube.com/watch?v=fhf8N4004u0",
    "Timestamp": "2019-09-24T00:20:56",
    "Domain": "www.youtube.com",
    "Description": "Announcing .NET Core 3.0: https://aka.ms/dotnetcore3\n#dotNETConf\n\nThere's a lot more in C# 8: default interface members, async enumerables, ranges and indices, more pattern matching, and a host of other improvements. Join this talk for a whirlwind tour of the new things you can do with C#. We'll explore these major features, provide several example scenarios, and give you some tips and tricks you can adopt to create modern, expressive C#, whatever you're building today."
  },
  {
    "Title": "What's new in C# 8 - Part 1",
    "Url": "https://www.youtube.com/watch?v=TJiLhRPgyq4",
    "Timestamp": "2019-09-24T00:20:46",
    "Domain": "www.youtube.com",
    "Description": "Announcing .NET Core 3.0: https://aka.ms/dotnetcore3\n#dotNETConf\n\nHow do you know whether a parameter you're passing or a result you're receiving can be null? With nullable reference types in C# 8.0 the answer is no longer "
  },
  {
    "Title": "The Future of C++/CLI and .NET Core 3 | C++ Team Blog",
    "Url": "https://devblogs.microsoft.com/cppblog/the-future-of-cpp-cli-and-dotnet-core-3/",
    "Timestamp": "2019-09-24T00:00:10",
    "Domain": "devblogs.microsoft.com",
    "Description": ".NET Core 3.0 is now available and we have received a lot of questions about what that means for the future of C++/CLI. First, we would like to let everyone know that we are committed to supporting C++/CLI for .NET Core to enable easy interop between C++ codebases and .NET technologies such as WPF and Windows Forms."
  }
]