[
  {
    "Title": "Programmers, Teach Non-Geeks The True Cost of Interruptions",
    "Url": "https://daedtech.com/programmers-teach-non-geeks-the-true-cost-of-interruptions/",
    "Timestamp": "2021-07-10T14:04:20",
    "Domain": "daedtech.com",
    "Description": "Interruptions are one of the biggest sources of inefficiency for programmers. Now, to be fair, they’re probably a big source of inefficiency for everyone, but relatively speaking, they’re worse for programmers. To understand what I mean, let’s take someone whose job is in sales. A lot of the day is probably spent on the phone […]"
  },
  {
    "Title": "Put That Microservice Down.",
    "Url": "https://georgestocker.com/2021/07/10/put-that-microservice-down/",
    "Timestamp": "2021-07-10T13:05:40",
    "Domain": "georgestocker.com",
    "Description": "We need to have a no-shit moment, you and I. Put that Microservice down. Microservices aren’t for you, yet. Let’s reach over to the well of software development conventional wisdom and …"
  },
  {
    "Title": "Against SQL",
    "Url": "https://scattered-thoughts.net/writing/against-sql/",
    "Timestamp": "2021-07-10T12:03:41",
    "Domain": "scattered-thoughts.net",
    "Description": "The relational model is great:"
  },
  {
    "Title": "Creating reusable build scripts with NUKE components",
    "Url": "https://www.erikheemskerk.nl/nuke-build-components/",
    "Timestamp": "2021-07-10T09:03:52",
    "Domain": "www.erikheemskerk.nl",
    "Description": "How can we take advantage of the latest C# features to create highly reusable build scripts with NUKE?"
  },
  {
    "Title": "Spill single-def variable at definition to avoid further spilling by kunalspathak · Pull Request #54345 · dotnet/runtime",
    "Url": "https://github.com/dotnet/runtime/pull/54345",
    "Timestamp": "2021-07-10T08:04:07",
    "Domain": "github.com",
    "Description": "If a variable is a single-def and it was ever decided to be spilled during register allocation, spill it at its first and only definition so we can skip further spilling throughout the method since..."
  },
  {
    "Title": "Explore Minimal APIs with Maria Naggaga | Web Wednesday",
    "Url": "https://socx.ly/3jr7kf",
    "Timestamp": "2021-07-10T08:04:01",
    "Domain": "socx.ly",
    "Description": "What is the session about? Minimal apps minimal code!  Express, Django and Lumen provide their developers with the options to build great apps with less code..."
  },
  {
    "Title": "romeovs/creep",
    "Url": "https://github.com/romeovs/creep",
    "Timestamp": "2021-07-10T07:03:40",
    "Domain": "github.com",
    "Description": "a pretty sweet 4px wide pixel font. Contribute to romeovs/creep development by creating an account on GitHub."
  },
  {
    "Title": "Entropy coding in Oodle Data: the big picture",
    "Url": "https://fgiesen.wordpress.com/2021/07/09/entropy-coding-in-oodle-data-the-big-picture/",
    "Timestamp": "2021-07-10T05:03:59",
    "Domain": "fgiesen.wordpress.com",
    "Description": "April 26, 2016 was the release date of Oodle 2.1.5 which introduced Kraken, so it celebrated its 5-year anniversary recently. A few months later we launched Selkie and Mermaid, which were already d…"
  },
  {
    "Title": "Linux Audio is Dead | Non",
    "Url": "https://non.tuxfamily.org/wiki/2021-02-07%20Linux%20Audio%20is%20Dead",
    "Timestamp": "2021-07-10T03:03:54",
    "Domain": "non.tuxfamily.org",
    "Description": "In early 2020, most of the world was concerned with matters of great import, myself included. But three men, Filipe Coelho, David Runge, and Nils Hilbrect had more trivial things on their minds. At this time they came to me, not announcing themselves as a formal alliance, but pretending to be separate, disconnected parties suddenly showing up all at once. Each one had a list of demands for changes that I should make to NSM. I responded politely to each of these demands in turn, inquiring about why they believed them to be necessary, important, or appropriate, and I offered detailed explanations as to how they were not. They refused to participate in a discourse and reiterated their demands. I asked them why, if these trivial matters were so important to them, did they come to me with demands instead of patches to contribute? They became irate and threatened to fork my project. But of course, because they apparently lacked either the skill or the intention to make the changes themselves (as contributions), I didn't take this threat seriously, as creating a fork would require them to actually do something."
  },
  {
    "Title": "A Collection of 2020 Recorded Presentations",
    "Url": "https://jeremybytes.blogspot.com/2021/07/a-collection-of-2020-recorded.html",
    "Timestamp": "2021-07-10T01:04:02",
    "Domain": "jeremybytes.blogspot.com",
    "Description": "   2020 was \"interesting\". One good thing that came out of it is that I had the   chance to speak remotely for some user groups and conferen..."
  },
  {
    "Title": "Learn functional programming with JavaScript through this friendly, gentle introduction course to the functional programming paradigm with Anjana Vakil.",
    "Url": "https://frontendmasters.com/courses/functional-first-steps/",
    "Timestamp": "2021-07-10T00:04:13",
    "Domain": "frontendmasters.com",
    "Description": "Learn core functional JavaScript programming techniques by coding everything with pure functions, learning recursion, higher-order functions, closures, currying, and function composition. Also, learn how immutable data is essential for functional programming."
  },
  {
    "Title": "Azure DevOps Podcast: Richard Lander on the New .NET Platform - Episode 148",
    "Url": "http://azuredevopspodcast.clear-measure.com/richard-lander-on-the-new-net-platform-episode-148",
    "Timestamp": "2021-07-10T00:04:10",
    "Domain": "azuredevopspodcast.clear-measure.com",
    "Description": "Richard is a Principal Program Manager on the .NET Core team at Microsoft. He's been with Microsoft for a total of 21 years, 18 of which have been with the .NET team (since 2003 when the codename was Whidbey!) Richard is truly a mover and shaker when it comes to pushing the .NET platform forward! Currently, he’s working on runtime features and performance, CLI experience, docker container experience, ARM32 and ARM64 support, IoT/GPIO/PWM support, blogging and customer engagement, and speaking at conferences. He's also part of the design team that defines new .NET runtime capabilities and features. And in his spare time, he enjoys British rock and Doctor Who! &nbsp; A lot has changed since Richard was last on the show! In this episode, he is here to discuss all of the changes to the new .NET platform, how he’s continuing to push the .NET platform forward together with his team, the current state-of-the-art tools and techniques in the .NET IoT space and .NET applications, exciting developments with his current .NET blog series on DevBlogs.Microsoft.com, and much more! &nbsp; Topics of Discussion: [:14] About The Azure DevOps Podcast, Clear Measure, the new podcast Architect Tips, and Jeffrey’s offer to speak at virtual user groups. [1:23] About today’s episode with Richard Lander! [2:07] Jeffrey welcomes Richard Lander back to the podcast. [2:24] Richard shares what has changed on his team in the last two years and what they have been recently up to. [4:19] Richard shares about his role with the .NET team and what he mainly works on. [5:54] Richard’s vision and goals with the new .NET blog series. [7:56] About the various topics Richard has covered thus far with his blog series and a sneak preview of some upcoming blog topics he will be covering. [8:42] Richard shares what he and his team are doing on the front of platform OS enablement and Apple Silicon. [13:04] Jeffrey and Richard discuss Microsoft’s focus on backwards compatibility. [14:44] The current state-of-the-art in the .NET IoT space. [18:51] Have the .NET and IoT teams had conversations around Terminal.Gui? [19:20] A word from Azure DevOps Podcast’s sponsor: Clear Measure. [21:00] What is the current method with IoT devices? Are there any built-in testing capabilities? [24:19] Richard shares what the current state-of-the-art is for those doing regular .NET applications. [29:22] If a developer just deploys to App Service, are they using Azure containers under the covers regardless? [30:50] Richard shares his predictions on what he sees as being the most general-purpose runtime (AKS, App Service, ACI, etc.) in Azure for regular Blazor applications that developers are starting to build. [34:40] Jeffrey and Richard reflect on why it is such an interesting and exciting time to be a developer. [35:45] Does .NET and C# have the fastest mainstream execution? [39:48] Jeffrey thanks Richard for joining the podcast. &nbsp; Mentioned in this Episode:  — New video podcast!   (Sponsor)  — Available on Amazon!  — Click here to download the .NET DevOps for Azure ebook!   — Follow to stay informed about future events!                  &nbsp; Want to Learn More? Visit  for show notes and additional episodes. "
  }
]