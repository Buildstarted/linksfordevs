[
  {
    "Title": "Add support for Windows IO completions to the portable thread pool by kouvel · Pull Request #64834 · dotnet/runtime",
    "Url": "https://github.com/dotnet/runtime/pull/64834",
    "Timestamp": "2022-02-13T08:04:36",
    "Domain": "github.com",
    "Description": "Added an implementation for BindHandle\nPolling for IO completions is done in batches on separate threads similarly to what is done on Unixes\nAdded a high-priority work item queue to have IO complet..."
  },
  {
    "Title": "Add support for Windows IO completions to the portable thread pool by kouvel · Pull Request #64834 · dotnet/runtime",
    "Url": "https://github.com/dotnet/runtime/pull/64834#issuecomment-1030418098",
    "Timestamp": "2022-02-13T08:04:36",
    "Domain": "github.com",
    "Description": "Added an implementation for BindHandle\nPolling for IO completions is done in batches on separate threads similarly to what is done on Unixes\nAdded a high-priority work item queue to have IO complet..."
  },
  {
    "Title": "Piped",
    "Url": "https://youtube.censors.us/Fz4hViH5bGc",
    "Timestamp": "2022-02-13T05:03:06",
    "Domain": "youtube.censors.us",
    "Description": "An alternative privacy-friendly YouTube frontend which is efficient by design."
  },
  {
    "Title": "Weekly Update 282",
    "Url": "https://www.youtube.com/watch?v=0VwrYiVWR64",
    "Timestamp": "2022-02-13T02:02:52",
    "Domain": "www.youtube.com",
    "Description": "My New Focusrite DAC; Early Workshops; Digicert EV Bullshit; TripIt Wants Your DoB; Travelling and Speaking Again"
  },
  {
    "Title": "Interview question \"When we use async/await, how does the main thread know when the awaitable task has finished (under the hood)\"",
    "Url": "https://old.reddit.com/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/",
    "Timestamp": "2022-02-13T01:02:01",
    "Domain": "old.reddit.com",
    "Description": "I have this question on a list to prepare for and I can't think of an answer or search for one. Does anyone have any ideas how they'd go about..."
  },
  {
    "Title": "Manton Reece - Moving away from App Store-focused development",
    "Url": "https://www.manton.org/2022/02/09/moving-away-from.html",
    "Timestamp": "2022-02-13T00:02:46",
    "Domain": "www.manton.org",
    "Description": "A few things are happening at once that together are putting some clarity on the direction we should have for Micro.blog development:"
  },
  {
    "Title": "Call to mediocrity",
    "Url": "https://nikofischer.com/call-to-mediocrity",
    "Timestamp": "2022-02-13T00:02:44",
    "Domain": "nikofischer.com",
    "Description": "This is a call to mediocrity. Do things without intending to hit the big time. Do! Start! Don't think about the output, but make the way to your goal. Yes: all too often you've set out to do it, and yet you've failed again and again to meet your standards. Every text, every website, every important email: you've twisted words, deleted sentences, and rewritten. Often enough you crumpled things up afterwards and threw them away. But how much didn't get done in the first place?"
  },
  {
    "Title": "Interview question \"When we use async/await, how does the main thread know when the awaitable task has finished (under the hood)\" : dotnet",
    "Url": "https://teddit.pussthecat.org/r/dotnet/comments/sqf4ff/interview_question_when_we_use_asyncawait_how/",
    "Timestamp": "2022-02-13T00:02:44",
    "Domain": "teddit.pussthecat.org",
    "Description": "I was one of the designers of the async/await language feature. I probably could not answer this question to the satisfaction of the interviewer, but that is likely because the interviewer has a specific answer in mind that pertains only to a specific scenario. That the question presupposes the existence of a \"main thread\" implies that there is a second thread involved; that's common but by no means required or universal. I understand the feature primarily from the language design perspective, not from the behind-the-scenes low-level implementation details of the runtime."
  },
  {
    "Title": "Crypto Reading",
    "Url": "https://danromero.org/crypto-reading/",
    "Timestamp": "2022-02-13T00:02:43",
    "Domain": "danromero.org",
    "Description": "A list of worthwhile posts about cryptocurrency."
  },
  {
    "Title": "Dizzying but Invisible Depth",
    "Url": "https://josh.works/dizzying-but-invisible-depth",
    "Timestamp": "2022-02-13T00:02:43",
    "Domain": "josh.works",
    "Description": "tag(s):"
  },
  {
    "Title": "Misadventures of an Early Engineer — Dylan Barth",
    "Url": "https://www.dylanbarth.com/blog/early-engineer/",
    "Timestamp": "2022-02-13T00:02:43",
    "Domain": "www.dylanbarth.com",
    "Description": "The red text beneath the login form read \"Unexpected error.\" I was looking over the shoulder of a support technician named Eric who had just tried logging in to our product for the first time. His cubicle looked identical to the other eighty or so scattered around the room except for the custom-built mechanical keyboard with unmarked keycaps and neon-backlight sitting on his desk. We'd been getting along great, but now he was looking back at me with an expression of betrayal on his face that told me exactly what he was thinking: “Please tell me you haven’t wasted my entire Saturday.”"
  },
  {
    "Title": "David Nicholas Williams",
    "Url": "https://davnicwil.com/sticky-positions/",
    "Timestamp": "2022-02-13T00:02:43",
    "Domain": "davnicwil.com",
    "Description": "In team sports, a common thing that happens is people get 'set' in a certain position. This typically happens early on: when you first try the sport, join a team, and get put in a position for your first game."
  },
  {
    "Title": "Bad hosts, or: how I learned to stop worrying and love the overlay network",
    "Url": "https://www.robinsloan.com/lab/bad-hosts/",
    "Timestamp": "2022-02-13T00:02:43",
    "Domain": "www.robinsloan.com",
    "Description": "Stymied by NAT."
  },
  {
    "Title": "jless - Command Line JSON Viewer",
    "Url": "https://pauljuliusmartinez.github.io/",
    "Timestamp": "2022-02-13T00:02:43",
    "Domain": "pauljuliusmartinez.github.io",
    "Description": "JLess is a command-line JSON viewer designed for reading, exploring, and searching through JSON data."
  }
]