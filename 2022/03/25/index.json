[
  {
    "Title": "Why should we even do testing? - Mike Alche",
    "Url": "https://www.mikealche.com/software-development/why-should-we-even-do-testing",
    "Timestamp": "2022-03-25T00:02:11",
    "Domain": "www.mikealche.com",
    "Description": "Why should we even do testing? - software-development - Mike Alche"
  },
  {
    "Title": "How to add thousands of lights to your renderer and not die in the process",
    "Url": "http://www.zyanidelab.com/how-to-add-thousands-of-lights-to-your-renderer/",
    "Timestamp": "2022-03-25T00:02:11",
    "Domain": "www.zyanidelab.com",
    "Description": "Why ReSTIR is good for you."
  },
  {
    "Title": "The Problem With Note-Taking - More To That",
    "Url": "https://moretothat.com/the-problem-with-note-taking/",
    "Timestamp": "2022-03-25T00:02:11",
    "Domain": "moretothat.com",
    "Description": "If you view knowledge for its utility, you will never fully appreciate it."
  },
  {
    "Title": "Depth of Field",
    "Url": "https://moultano.wordpress.com/2022/03/24/depth-of-field/",
    "Timestamp": "2022-03-25T00:02:11",
    "Domain": "moultano.wordpress.com",
    "Description": "How we can understand the number of stars in the sky."
  },
  {
    "Title": "A quick reminder : Don't stress on both threat and vulnerability",
    "Url": "https://techkettle.blogspot.com/2022/03/a-quick-reminder-dont-stress-on-both.html",
    "Timestamp": "2022-03-25T00:02:10",
    "Domain": "techkettle.blogspot.com",
    "Description": ""
  },
  {
    "Title": "Combining scripts and DSLs is Kotlin’s most underrated feature - Sébastien Castiel",
    "Url": "https://scastiel.dev/posts/2022-03-23-kotlin-scripts-dsl-underrated-feature/",
    "Timestamp": "2022-03-25T00:02:10",
    "Domain": "scastiel.dev",
    "Description": "The more I play with Kotlin, the more convinced I am that a combo of two of its features is vastly underrated: first, the ability to create domain-specific languages (DSL), thanks to some syntactic sugar; then, the ability to write scripts and create interpreters for them."
  },
  {
    "Title": "We need better tools for Web & API Software Testing · m's blog",
    "Url": "https://ludovicianul.github.io/2022/03/24/better-api-tools/",
    "Timestamp": "2022-03-25T00:02:10",
    "Domain": "ludovicianul.github.io",
    "Description": "24 Mar 2022"
  },
  {
    "Title": "On the importance of trusting trust",
    "Url": "https://hozy.dev/posts/trusting-trust/",
    "Timestamp": "2022-03-25T00:02:10",
    "Domain": "hozy.dev",
    "Description": "Recently, the author of a popular npm package injected code that wipes the files of users from Russia and Belarus. Even though the change was rolled back in a few hours, newer versions of the package still create a text file on the user's desktop when called. This sparked lively debates around the utility of so-called 'protest-ware', and whether such action is in line with the spirit of open source."
  },
  {
    "Title": "Extracting web page content using Readability.js and shot-scraper",
    "Url": "https://til.simonwillison.net/shot-scraper/readability",
    "Timestamp": "2022-03-25T00:02:09",
    "Domain": "til.simonwillison.net",
    "Description": "[Readability.js](https://github.com/mozilla/readability) is \"A standalone version of the readability library used for Firefox Reader View\".\n\nMy [shot-scraper](https://datasette.io/tools/shot-scraper) tool has a `shot-scraper javascript` command which can load a web page in a headless browser (via [Playwright](https://playwright.dev/)), execute JavaScript against that page and return the result to the console as JSON - see [Scraping web pages from the command line with shot-scraper](https://simonwillison.net/2022/Mar/14/scraping-web-pages-shot-scraper/).\n\nI figured out how to use the two of these together to extract the core content from a web page using the command line.\n\nHere's the recipe:\n\n    shot-scraper javascript https://simonwillison.net/2022/Mar/24/datasette-061/ \"\n    async () => {\n      const readability = await import('https://cdn.skypack.dev/@mozilla/readability');\n      return (new readability.Readability(document)).parse();\n    }\"\n\nIt's using Skypack to [load the module](https://www.skypack.dev/view/@mozilla/readability). Playwright (the tech that powers `shot-scarper`) knows how to execute `async ()` functions and return their results.\n\nThis outputs the JSON structure created by Readability directly to the console.\n```\n% shot-scraper javascript https://simonwillison.net/2022/Mar/24/datasette-061/ \"\n    async () => {\n      const readability = await import('https://cdn.skypack.dev/@mozilla/readability');\n      return (new readability.Readability(document)).parse();\n    }\"\n{\n    \"title\": \"Datasette 0.61: The annotated release notes\",\n    \"byline\": null,\n    \"dir\": null,\n    \"lang\": \"en-gb\",\n    \"content\": \"<div id=\"readability-page-1\" cla...\n```\nPiping to `jq keys` shows the keys in the returned object:\n```\n% shot-scraper javascript https://simonwillison.net/2022/Mar/24/datasette-061/ \"\n    async () => {\n      const readability = await import('https://cdn.skypack.dev/@mozilla/readability');\n      return (new readability.Readability(document)).parse();\n    }\" | jq keys\n[\n  \"byline\",\n  \"content\",\n  \"dir\",\n  \"excerpt\",\n  \"lang\",\n  \"length\",\n  \"siteName\",\n  \"textContent\",\n  \"title\"\n]\n```\n\nTo get just the text content, use `jq .textContent -r` (the `-r` returns the raw string, without the surrounding double quotes):\n```\n% shot-scraper javascript https://simonwillison.net/2022/Mar/24/datasette-061/ \"\n    async () => {\n      const readability = await import('https://cdn.skypack.dev/@mozilla/readability');\n      return (new readability.Readability(document)).parse();\n    }\" | jq .textContent -r\nI released Datasette 0.61 this morning—closely followed by 0.61.1 to fix a minor bug.\nHere are the annotated release notes.\n\nIn preparation for Datasette 1.0, this release includes ...\n```\nI can even pipe it directly into `sqlite-utils` to insert it into a SQLite database table:\n\n```\n% shot-scraper javascript https://simonwillison.net/2021/Oct/19/datasette-059/ \"\nasync () => {    \n  const readability = await import('https://cdn.skypack.dev/@mozilla/readability');\n  return (new readability.Readability(document)).parse();\n}\" | sqlite-utils insert articles.db articles -\n```\n\n## Saving the script to a file\n\nIf you want to run this a lot, you can avoid copying-and-pasting it by saving it to a file called `readability.js`:\n\n```javascript\nasync () => {    \n  const readability = await import('https://cdn.skypack.dev/@mozilla/readability');\n  return (new readability.Readability(document)).parse();\n}\n```\n\nAnd then running:\n\n    shot-scraper javascript https://til.simonwillison.net/shot-scraper/readability -i readability.js\n\nOr even set that up as an alias, by adding the following to `~/.zshrc`:\n\n    alias readability=\"shot-scraper javascript -i ~/readability.js\"\n\nThen restart a terminal window and run:\n\n    readability https://til.simonwillison.net/shot-scraper/readability\n\n## A note on safety\n\nThe [Readability.js README says](https://github.com/mozilla/readability/blob/0.4.1/README.md#security):\n\n> If you're going to use Readability with untrusted input (whether in HTML or DOM form), we **strongly** recommend you use a sanitizer library like [DOMPurify](https://github.com/cure53/DOMPurify) to avoid script injection when you use the output of Readability.\n\nIt looks like DOMPurify could be executed against the output of Readability using the same import mechanism shown above."
  }
]