[
  {
    "Title": "GitHub - Orbis-Tertius/MVlookups: A note on multivariate lookup arguments",
    "Url": "https://github.com/Orbis-Tertius/MVlookups",
    "Timestamp": "2022-11-08T05:03:35",
    "Domain": "github.com",
    "Description": "A note on multivariate lookup arguments. Contribute to Orbis-Tertius/MVlookups development by creating an account on GitHub."
  },
  {
    "Title": "Get Revenge On Your Ex Shows You How To Get Revenge Anonymously",
    "Url": "https://getrevengeonyourex.com/",
    "Timestamp": "2022-11-08T05:03:35",
    "Domain": "getrevengeonyourex.com",
    "Description": "Why Your Ex Deserves Revenge"
  },
  {
    "Title": "GitHub - farcasterxyz/protocol: Specification of the Farcaster Protocol",
    "Url": "https://github.com/farcasterxyz/protocol",
    "Timestamp": "2022-11-08T01:01:56",
    "Domain": "github.com",
    "Description": "Specification of the Farcaster Protocol. Contribute to farcasterxyz/protocol development by creating an account on GitHub."
  },
  {
    "Title": "An F# Primitive Giraffe Wearing Lenses: A Ports and Adapters Story",
    "Url": "https://www.codit.eu/blog/a-f-primitive-giraffe-wearing-lenses-a-ports-and-adapters-story/",
    "Timestamp": "2022-11-08T00:01:43",
    "Domain": "www.codit.eu",
    "Description": "The start of both architectures is the same: the domain. The ports and adapters architecture is often referred to as an onion structure. The reason for this is that when the application is growing you’ll see a set of layers being added on top of each other, like onion peel. The domain is always the core, the layers on top of that depend on your application. The outside layer is the outside world: this could be writing to the database, receiving an API request, or reading a file on disk – anything that is not under your control should be considered the ‘outside world’ or ‘untrusted’. You’ll notice the core of your union, the place within your control, is fairly small. In functional programming, this domain is usually pure. This is a big difference from the object-oriented approach where you inject ‘impure’ or ‘untrusted’ services within core functionality. The data direction is a lot simpler and descriptive in a port and adapter architecture. The direction and relation between the layers are made explicit while in a dependency injection system. This relation is often scattered."
  }
]